/*[production-config]*/
steal = ((typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) ? self : window).steal || {};
steal.stealBundled = true;
steal.loadBundles = true;
steal.baseURL = './';
steal.configMain = "package.json!npm";
steal.main = "steal-styled-components-bug@1.0.0#public/index";
/*steal*/
!function(e){"object"==typeof exports?module.exports=e():"function"==typeof define&&define.amd?define(e):"undefined"!=typeof window?window.Promise=e():"undefined"!=typeof global?global.Promise=e():"undefined"!=typeof self&&(self.Promise=e())}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/** @license MIT License (c) copyright 2010-2014 original author or authors */
/** @author Brian Cavalier */
/** @author John Hann */

/**
 * ES6 global Promise shim
 */
var unhandledRejections = require('../lib/decorators/unhandledRejection');
var PromiseConstructor = unhandledRejections(require('../lib/Promise'));

module.exports = typeof global != 'undefined' ? (global.Promise = PromiseConstructor)
	           : typeof self   != 'undefined' ? (self.Promise   = PromiseConstructor)
	           : PromiseConstructor;

},{"../lib/Promise":2,"../lib/decorators/unhandledRejection":4}],2:[function(require,module,exports){
/** @license MIT License (c) copyright 2010-2014 original author or authors */
/** @author Brian Cavalier */
/** @author John Hann */

(function(define) { 'use strict';
define(function (require) {

	var makePromise = require('./makePromise');
	var Scheduler = require('./Scheduler');
	var async = require('./env').asap;

	return makePromise({
		scheduler: new Scheduler(async)
	});

});
})(typeof define === 'function' && define.amd ? define : function (factory) { module.exports = factory(require); });

},{"./Scheduler":3,"./env":5,"./makePromise":7}],3:[function(require,module,exports){
/** @license MIT License (c) copyright 2010-2014 original author or authors */
/** @author Brian Cavalier */
/** @author John Hann */

(function(define) { 'use strict';
define(function() {

	// Credit to Twisol (https://github.com/Twisol) for suggesting
	// this type of extensible queue + trampoline approach for next-tick conflation.

	/**
	 * Async task scheduler
	 * @param {function} async function to schedule a single async function
	 * @constructor
	 */
	function Scheduler(async) {
		this._async = async;
		this._running = false;

		this._queue = this;
		this._queueLen = 0;
		this._afterQueue = {};
		this._afterQueueLen = 0;

		var self = this;
		this.drain = function() {
			self._drain();
		};
	}

	/**
	 * Enqueue a task
	 * @param {{ run:function }} task
	 */
	Scheduler.prototype.enqueue = function(task) {
		this._queue[this._queueLen++] = task;
		this.run();
	};

	/**
	 * Enqueue a task to run after the main task queue
	 * @param {{ run:function }} task
	 */
	Scheduler.prototype.afterQueue = function(task) {
		this._afterQueue[this._afterQueueLen++] = task;
		this.run();
	};

	Scheduler.prototype.run = function() {
		if (!this._running) {
			this._running = true;
			this._async(this.drain);
		}
	};

	/**
	 * Drain the handler queue entirely, and then the after queue
	 */
	Scheduler.prototype._drain = function() {
		var i = 0;
		for (; i < this._queueLen; ++i) {
			this._queue[i].run();
			this._queue[i] = void 0;
		}

		this._queueLen = 0;
		this._running = false;

		for (i = 0; i < this._afterQueueLen; ++i) {
			this._afterQueue[i].run();
			this._afterQueue[i] = void 0;
		}

		this._afterQueueLen = 0;
	};

	return Scheduler;

});
}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(); }));

},{}],4:[function(require,module,exports){
/** @license MIT License (c) copyright 2010-2014 original author or authors */
/** @author Brian Cavalier */
/** @author John Hann */

(function(define) { 'use strict';
define(function(require) {

	var setTimer = require('../env').setTimer;
	var format = require('../format');

	return function unhandledRejection(Promise) {

		var logError = noop;
		var logInfo = noop;
		var localConsole;

		if(typeof console !== 'undefined') {
			// Alias console to prevent things like uglify's drop_console option from
			// removing console.log/error. Unhandled rejections fall into the same
			// category as uncaught exceptions, and build tools shouldn't silence them.
			localConsole = console;
			logError = typeof localConsole.error !== 'undefined'
				? function (e) { localConsole.error(e); }
				: function (e) { localConsole.log(e); };

			logInfo = typeof localConsole.info !== 'undefined'
				? function (e) { localConsole.info(e); }
				: function (e) { localConsole.log(e); };
		}

		Promise.onPotentiallyUnhandledRejection = function(rejection) {
			enqueue(report, rejection);
		};

		Promise.onPotentiallyUnhandledRejectionHandled = function(rejection) {
			enqueue(unreport, rejection);
		};

		Promise.onFatalRejection = function(rejection) {
			enqueue(throwit, rejection.value);
		};

		var tasks = [];
		var reported = [];
		var running = null;

		function report(r) {
			if(!r.handled) {
				reported.push(r);
				logError('Potentially unhandled rejection [' + r.id + '] ' + format.formatError(r.value));
			}
		}

		function unreport(r) {
			var i = reported.indexOf(r);
			if(i >= 0) {
				reported.splice(i, 1);
				logInfo('Handled previous rejection [' + r.id + '] ' + format.formatObject(r.value));
			}
		}

		function enqueue(f, x) {
			tasks.push(f, x);
			if(running === null) {
				running = setTimer(flush, 0);
			}
		}

		function flush() {
			running = null;
			while(tasks.length > 0) {
				tasks.shift()(tasks.shift());
			}
		}

		return Promise;
	};

	function throwit(e) {
		throw e;
	}

	function noop() {}

});
}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(require); }));

},{"../env":5,"../format":6}],5:[function(require,module,exports){
/** @license MIT License (c) copyright 2010-2014 original author or authors */
/** @author Brian Cavalier */
/** @author John Hann */

/*global process,document,setTimeout,clearTimeout,MutationObserver,WebKitMutationObserver*/
(function(define) { 'use strict';
define(function(require) {
	/*jshint maxcomplexity:6*/

	// Sniff "best" async scheduling option
	// Prefer process.nextTick or MutationObserver, then check for
	// setTimeout, and finally vertx, since its the only env that doesn't
	// have setTimeout

	var MutationObs;
	var capturedSetTimeout = typeof setTimeout !== 'undefined' && setTimeout;

	// Default env
	var setTimer = function(f, ms) { return setTimeout(f, ms); };
	var clearTimer = function(t) { return clearTimeout(t); };
	var asap = function (f) { return capturedSetTimeout(f, 0); };

	// Detect specific env
	if (isNode()) { // Node
		asap = function (f) { return process.nextTick(f); };

	} else if (MutationObs = hasMutationObserver()) { // Modern browser
		asap = initMutationObserver(MutationObs);

	} else if (!capturedSetTimeout) { // vert.x
		var vertxRequire = require;
		var vertx = vertxRequire('vertx');
		setTimer = function (f, ms) { return vertx.setTimer(ms, f); };
		clearTimer = vertx.cancelTimer;
		asap = vertx.runOnLoop || vertx.runOnContext;
	}

	return {
		setTimer: setTimer,
		clearTimer: clearTimer,
		asap: asap
	};

	function isNode () {
		return typeof process !== 'undefined' &&
			Object.prototype.toString.call(process) === '[object process]';
	}

	function hasMutationObserver () {
		return (typeof MutationObserver === 'function' && MutationObserver) ||
			(typeof WebKitMutationObserver === 'function' && WebKitMutationObserver);
	}

	function initMutationObserver(MutationObserver) {
		var scheduled;
		var node = document.createTextNode('');
		var o = new MutationObserver(run);
		o.observe(node, { characterData: true });

		function run() {
			var f = scheduled;
			scheduled = void 0;
			f();
		}

		var i = 0;
		return function (f) {
			scheduled = f;
			node.data = (i ^= 1);
		};
	}
});
}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(require); }));

},{}],6:[function(require,module,exports){
/** @license MIT License (c) copyright 2010-2014 original author or authors */
/** @author Brian Cavalier */
/** @author John Hann */

(function(define) { 'use strict';
define(function() {

	return {
		formatError: formatError,
		formatObject: formatObject,
		tryStringify: tryStringify
	};

	/**
	 * Format an error into a string.  If e is an Error and has a stack property,
	 * it's returned.  Otherwise, e is formatted using formatObject, with a
	 * warning added about e not being a proper Error.
	 * @param {*} e
	 * @returns {String} formatted string, suitable for output to developers
	 */
	function formatError(e) {
		var s = typeof e === 'object' && e !== null && (e.stack || e.message) ? e.stack || e.message : formatObject(e);
		return e instanceof Error ? s : s + ' (WARNING: non-Error used)';
	}

	/**
	 * Format an object, detecting "plain" objects and running them through
	 * JSON.stringify if possible.
	 * @param {Object} o
	 * @returns {string}
	 */
	function formatObject(o) {
		var s = String(o);
		if(s === '[object Object]' && typeof JSON !== 'undefined') {
			s = tryStringify(o, s);
		}
		return s;
	}

	/**
	 * Try to return the result of JSON.stringify(x).  If that fails, return
	 * defaultValue
	 * @param {*} x
	 * @param {*} defaultValue
	 * @returns {String|*} JSON.stringify(x) or defaultValue
	 */
	function tryStringify(x, defaultValue) {
		try {
			return JSON.stringify(x);
		} catch(e) {
			return defaultValue;
		}
	}

});
}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(); }));

},{}],7:[function(require,module,exports){
/** @license MIT License (c) copyright 2010-2014 original author or authors */
/** @author Brian Cavalier */
/** @author John Hann */

(function(define) { 'use strict';
define(function() {

	return function makePromise(environment) {

		var tasks = environment.scheduler;
		var emitRejection = initEmitRejection();

		var objectCreate = Object.create ||
			function(proto) {
				function Child() {}
				Child.prototype = proto;
				return new Child();
			};

		/**
		 * Create a promise whose fate is determined by resolver
		 * @constructor
		 * @returns {Promise} promise
		 * @name Promise
		 */
		function Promise(resolver, handler) {
			this._handler = resolver === Handler ? handler : init(resolver);
		}

		/**
		 * Run the supplied resolver
		 * @param resolver
		 * @returns {Pending}
		 */
		function init(resolver) {
			var handler = new Pending();

			try {
				resolver(promiseResolve, promiseReject, promiseNotify);
			} catch (e) {
				promiseReject(e);
			}

			return handler;

			/**
			 * Transition from pre-resolution state to post-resolution state, notifying
			 * all listeners of the ultimate fulfillment or rejection
			 * @param {*} x resolution value
			 */
			function promiseResolve (x) {
				handler.resolve(x);
			}
			/**
			 * Reject this promise with reason, which will be used verbatim
			 * @param {Error|*} reason rejection reason, strongly suggested
			 *   to be an Error type
			 */
			function promiseReject (reason) {
				handler.reject(reason);
			}

			/**
			 * @deprecated
			 * Issue a progress event, notifying all progress listeners
			 * @param {*} x progress event payload to pass to all listeners
			 */
			function promiseNotify (x) {
				handler.notify(x);
			}
		}

		// Creation

		Promise.resolve = resolve;
		Promise.reject = reject;
		Promise.never = never;

		Promise._defer = defer;
		Promise._handler = getHandler;

		/**
		 * Returns a trusted promise. If x is already a trusted promise, it is
		 * returned, otherwise returns a new trusted Promise which follows x.
		 * @param  {*} x
		 * @return {Promise} promise
		 */
		function resolve(x) {
			return isPromise(x) ? x
				: new Promise(Handler, new Async(getHandler(x)));
		}

		/**
		 * Return a reject promise with x as its reason (x is used verbatim)
		 * @param {*} x
		 * @returns {Promise} rejected promise
		 */
		function reject(x) {
			return new Promise(Handler, new Async(new Rejected(x)));
		}

		/**
		 * Return a promise that remains pending forever
		 * @returns {Promise} forever-pending promise.
		 */
		function never() {
			return foreverPendingPromise; // Should be frozen
		}

		/**
		 * Creates an internal {promise, resolver} pair
		 * @private
		 * @returns {Promise}
		 */
		function defer() {
			return new Promise(Handler, new Pending());
		}

		// Transformation and flow control

		/**
		 * Transform this promise's fulfillment value, returning a new Promise
		 * for the transformed result.  If the promise cannot be fulfilled, onRejected
		 * is called with the reason.  onProgress *may* be called with updates toward
		 * this promise's fulfillment.
		 * @param {function=} onFulfilled fulfillment handler
		 * @param {function=} onRejected rejection handler
		 * @param {function=} onProgress @deprecated progress handler
		 * @return {Promise} new promise
		 */
		Promise.prototype.then = function(onFulfilled, onRejected, onProgress) {
			var parent = this._handler;
			var state = parent.join().state();

			if ((typeof onFulfilled !== 'function' && state > 0) ||
				(typeof onRejected !== 'function' && state < 0)) {
				// Short circuit: value will not change, simply share handler
				return new this.constructor(Handler, parent);
			}

			var p = this._beget();
			var child = p._handler;

			parent.chain(child, parent.receiver, onFulfilled, onRejected, onProgress);

			return p;
		};

		/**
		 * If this promise cannot be fulfilled due to an error, call onRejected to
		 * handle the error. Shortcut for .then(undefined, onRejected)
		 * @param {function?} onRejected
		 * @return {Promise}
		 */
		Promise.prototype['catch'] = function(onRejected) {
			return this.then(void 0, onRejected);
		};

		/**
		 * Creates a new, pending promise of the same type as this promise
		 * @private
		 * @returns {Promise}
		 */
		Promise.prototype._beget = function() {
			return begetFrom(this._handler, this.constructor);
		};

		function begetFrom(parent, Promise) {
			var child = new Pending(parent.receiver, parent.join().context);
			return new Promise(Handler, child);
		}

		// Array combinators

		Promise.all = all;
		Promise.race = race;
		Promise._traverse = traverse;

		/**
		 * Return a promise that will fulfill when all promises in the
		 * input array have fulfilled, or will reject when one of the
		 * promises rejects.
		 * @param {array} promises array of promises
		 * @returns {Promise} promise for array of fulfillment values
		 */
		function all(promises) {
			return traverseWith(snd, null, promises);
		}

		/**
		 * Array<Promise<X>> -> Promise<Array<f(X)>>
		 * @private
		 * @param {function} f function to apply to each promise's value
		 * @param {Array} promises array of promises
		 * @returns {Promise} promise for transformed values
		 */
		function traverse(f, promises) {
			return traverseWith(tryCatch2, f, promises);
		}

		function traverseWith(tryMap, f, promises) {
			var handler = typeof f === 'function' ? mapAt : settleAt;

			var resolver = new Pending();
			var pending = promises.length >>> 0;
			var results = new Array(pending);

			for (var i = 0, x; i < promises.length && !resolver.resolved; ++i) {
				x = promises[i];

				if (x === void 0 && !(i in promises)) {
					--pending;
					continue;
				}

				traverseAt(promises, handler, i, x, resolver);
			}

			if(pending === 0) {
				resolver.become(new Fulfilled(results));
			}

			return new Promise(Handler, resolver);

			function mapAt(i, x, resolver) {
				if(!resolver.resolved) {
					traverseAt(promises, settleAt, i, tryMap(f, x, i), resolver);
				}
			}

			function settleAt(i, x, resolver) {
				results[i] = x;
				if(--pending === 0) {
					resolver.become(new Fulfilled(results));
				}
			}
		}

		function traverseAt(promises, handler, i, x, resolver) {
			if (maybeThenable(x)) {
				var h = getHandlerMaybeThenable(x);
				var s = h.state();

				if (s === 0) {
					h.fold(handler, i, void 0, resolver);
				} else if (s > 0) {
					handler(i, h.value, resolver);
				} else {
					resolver.become(h);
					visitRemaining(promises, i+1, h);
				}
			} else {
				handler(i, x, resolver);
			}
		}

		Promise._visitRemaining = visitRemaining;
		function visitRemaining(promises, start, handler) {
			for(var i=start; i<promises.length; ++i) {
				markAsHandled(getHandler(promises[i]), handler);
			}
		}

		function markAsHandled(h, handler) {
			if(h === handler) {
				return;
			}

			var s = h.state();
			if(s === 0) {
				h.visit(h, void 0, h._unreport);
			} else if(s < 0) {
				h._unreport();
			}
		}

		/**
		 * Fulfill-reject competitive race. Return a promise that will settle
		 * to the same state as the earliest input promise to settle.
		 *
		 * WARNING: The ES6 Promise spec requires that race()ing an empty array
		 * must return a promise that is pending forever.  This implementation
		 * returns a singleton forever-pending promise, the same singleton that is
		 * returned by Promise.never(), thus can be checked with ===
		 *
		 * @param {array} promises array of promises to race
		 * @returns {Promise} if input is non-empty, a promise that will settle
		 * to the same outcome as the earliest input promise to settle. if empty
		 * is empty, returns a promise that will never settle.
		 */
		function race(promises) {
			if(typeof promises !== 'object' || promises === null) {
				return reject(new TypeError('non-iterable passed to race()'));
			}

			// Sigh, race([]) is untestable unless we return *something*
			// that is recognizable without calling .then() on it.
			return promises.length === 0 ? never()
				 : promises.length === 1 ? resolve(promises[0])
				 : runRace(promises);
		}

		function runRace(promises) {
			var resolver = new Pending();
			var i, x, h;
			for(i=0; i<promises.length; ++i) {
				x = promises[i];
				if (x === void 0 && !(i in promises)) {
					continue;
				}

				h = getHandler(x);
				if(h.state() !== 0) {
					resolver.become(h);
					visitRemaining(promises, i+1, h);
					break;
				} else {
					h.visit(resolver, resolver.resolve, resolver.reject);
				}
			}
			return new Promise(Handler, resolver);
		}

		// Promise internals
		// Below this, everything is @private

		/**
		 * Get an appropriate handler for x, without checking for cycles
		 * @param {*} x
		 * @returns {object} handler
		 */
		function getHandler(x) {
			if(isPromise(x)) {
				return x._handler.join();
			}
			return maybeThenable(x) ? getHandlerUntrusted(x) : new Fulfilled(x);
		}

		/**
		 * Get a handler for thenable x.
		 * NOTE: You must only call this if maybeThenable(x) == true
		 * @param {object|function|Promise} x
		 * @returns {object} handler
		 */
		function getHandlerMaybeThenable(x) {
			return isPromise(x) ? x._handler.join() : getHandlerUntrusted(x);
		}

		/**
		 * Get a handler for potentially untrusted thenable x
		 * @param {*} x
		 * @returns {object} handler
		 */
		function getHandlerUntrusted(x) {
			try {
				var untrustedThen = x.then;
				return typeof untrustedThen === 'function'
					? new Thenable(untrustedThen, x)
					: new Fulfilled(x);
			} catch(e) {
				return new Rejected(e);
			}
		}

		/**
		 * Handler for a promise that is pending forever
		 * @constructor
		 */
		function Handler() {}

		Handler.prototype.when
			= Handler.prototype.become
			= Handler.prototype.notify // deprecated
			= Handler.prototype.fail
			= Handler.prototype._unreport
			= Handler.prototype._report
			= noop;

		Handler.prototype._state = 0;

		Handler.prototype.state = function() {
			return this._state;
		};

		/**
		 * Recursively collapse handler chain to find the handler
		 * nearest to the fully resolved value.
		 * @returns {object} handler nearest the fully resolved value
		 */
		Handler.prototype.join = function() {
			var h = this;
			while(h.handler !== void 0) {
				h = h.handler;
			}
			return h;
		};

		Handler.prototype.chain = function(to, receiver, fulfilled, rejected, progress) {
			this.when({
				resolver: to,
				receiver: receiver,
				fulfilled: fulfilled,
				rejected: rejected,
				progress: progress
			});
		};

		Handler.prototype.visit = function(receiver, fulfilled, rejected, progress) {
			this.chain(failIfRejected, receiver, fulfilled, rejected, progress);
		};

		Handler.prototype.fold = function(f, z, c, to) {
			this.when(new Fold(f, z, c, to));
		};

		/**
		 * Handler that invokes fail() on any handler it becomes
		 * @constructor
		 */
		function FailIfRejected() {}

		inherit(Handler, FailIfRejected);

		FailIfRejected.prototype.become = function(h) {
			h.fail();
		};

		var failIfRejected = new FailIfRejected();

		/**
		 * Handler that manages a queue of consumers waiting on a pending promise
		 * @constructor
		 */
		function Pending(receiver, inheritedContext) {
			Promise.createContext(this, inheritedContext);

			this.consumers = void 0;
			this.receiver = receiver;
			this.handler = void 0;
			this.resolved = false;
		}

		inherit(Handler, Pending);

		Pending.prototype._state = 0;

		Pending.prototype.resolve = function(x) {
			this.become(getHandler(x));
		};

		Pending.prototype.reject = function(x) {
			if(this.resolved) {
				return;
			}

			this.become(new Rejected(x));
		};

		Pending.prototype.join = function() {
			if (!this.resolved) {
				return this;
			}

			var h = this;

			while (h.handler !== void 0) {
				h = h.handler;
				if (h === this) {
					return this.handler = cycle();
				}
			}

			return h;
		};

		Pending.prototype.run = function() {
			var q = this.consumers;
			var handler = this.handler;
			this.handler = this.handler.join();
			this.consumers = void 0;

			for (var i = 0; i < q.length; ++i) {
				handler.when(q[i]);
			}
		};

		Pending.prototype.become = function(handler) {
			if(this.resolved) {
				return;
			}

			this.resolved = true;
			this.handler = handler;
			if(this.consumers !== void 0) {
				tasks.enqueue(this);
			}

			if(this.context !== void 0) {
				handler._report(this.context);
			}
		};

		Pending.prototype.when = function(continuation) {
			if(this.resolved) {
				tasks.enqueue(new ContinuationTask(continuation, this.handler));
			} else {
				if(this.consumers === void 0) {
					this.consumers = [continuation];
				} else {
					this.consumers.push(continuation);
				}
			}
		};

		/**
		 * @deprecated
		 */
		Pending.prototype.notify = function(x) {
			if(!this.resolved) {
				tasks.enqueue(new ProgressTask(x, this));
			}
		};

		Pending.prototype.fail = function(context) {
			var c = typeof context === 'undefined' ? this.context : context;
			this.resolved && this.handler.join().fail(c);
		};

		Pending.prototype._report = function(context) {
			this.resolved && this.handler.join()._report(context);
		};

		Pending.prototype._unreport = function() {
			this.resolved && this.handler.join()._unreport();
		};

		/**
		 * Wrap another handler and force it into a future stack
		 * @param {object} handler
		 * @constructor
		 */
		function Async(handler) {
			this.handler = handler;
		}

		inherit(Handler, Async);

		Async.prototype.when = function(continuation) {
			tasks.enqueue(new ContinuationTask(continuation, this));
		};

		Async.prototype._report = function(context) {
			this.join()._report(context);
		};

		Async.prototype._unreport = function() {
			this.join()._unreport();
		};

		/**
		 * Handler that wraps an untrusted thenable and assimilates it in a future stack
		 * @param {function} then
		 * @param {{then: function}} thenable
		 * @constructor
		 */
		function Thenable(then, thenable) {
			Pending.call(this);
			tasks.enqueue(new AssimilateTask(then, thenable, this));
		}

		inherit(Pending, Thenable);

		/**
		 * Handler for a fulfilled promise
		 * @param {*} x fulfillment value
		 * @constructor
		 */
		function Fulfilled(x) {
			Promise.createContext(this);
			this.value = x;
		}

		inherit(Handler, Fulfilled);

		Fulfilled.prototype._state = 1;

		Fulfilled.prototype.fold = function(f, z, c, to) {
			runContinuation3(f, z, this, c, to);
		};

		Fulfilled.prototype.when = function(cont) {
			runContinuation1(cont.fulfilled, this, cont.receiver, cont.resolver);
		};

		var errorId = 0;

		/**
		 * Handler for a rejected promise
		 * @param {*} x rejection reason
		 * @constructor
		 */
		function Rejected(x) {
			Promise.createContext(this);

			this.id = ++errorId;
			this.value = x;
			this.handled = false;
			this.reported = false;

			this._report();
		}

		inherit(Handler, Rejected);

		Rejected.prototype._state = -1;

		Rejected.prototype.fold = function(f, z, c, to) {
			to.become(this);
		};

		Rejected.prototype.when = function(cont) {
			if(typeof cont.rejected === 'function') {
				this._unreport();
			}
			runContinuation1(cont.rejected, this, cont.receiver, cont.resolver);
		};

		Rejected.prototype._report = function(context) {
			tasks.afterQueue(new ReportTask(this, context));
		};

		Rejected.prototype._unreport = function() {
			if(this.handled) {
				return;
			}
			this.handled = true;
			tasks.afterQueue(new UnreportTask(this));
		};

		Rejected.prototype.fail = function(context) {
			this.reported = true;
			emitRejection('unhandledRejection', this);
			Promise.onFatalRejection(this, context === void 0 ? this.context : context);
		};

		function ReportTask(rejection, context) {
			this.rejection = rejection;
			this.context = context;
		}

		ReportTask.prototype.run = function() {
			if(!this.rejection.handled && !this.rejection.reported) {
				this.rejection.reported = true;
				emitRejection('unhandledRejection', this.rejection) ||
					Promise.onPotentiallyUnhandledRejection(this.rejection, this.context);
			}
		};

		function UnreportTask(rejection) {
			this.rejection = rejection;
		}

		UnreportTask.prototype.run = function() {
			if(this.rejection.reported) {
				emitRejection('rejectionHandled', this.rejection) ||
					Promise.onPotentiallyUnhandledRejectionHandled(this.rejection);
			}
		};

		// Unhandled rejection hooks
		// By default, everything is a noop

		Promise.createContext
			= Promise.enterContext
			= Promise.exitContext
			= Promise.onPotentiallyUnhandledRejection
			= Promise.onPotentiallyUnhandledRejectionHandled
			= Promise.onFatalRejection
			= noop;

		// Errors and singletons

		var foreverPendingHandler = new Handler();
		var foreverPendingPromise = new Promise(Handler, foreverPendingHandler);

		function cycle() {
			return new Rejected(new TypeError('Promise cycle'));
		}

		// Task runners

		/**
		 * Run a single consumer
		 * @constructor
		 */
		function ContinuationTask(continuation, handler) {
			this.continuation = continuation;
			this.handler = handler;
		}

		ContinuationTask.prototype.run = function() {
			this.handler.join().when(this.continuation);
		};

		/**
		 * Run a queue of progress handlers
		 * @constructor
		 */
		function ProgressTask(value, handler) {
			this.handler = handler;
			this.value = value;
		}

		ProgressTask.prototype.run = function() {
			var q = this.handler.consumers;
			if(q === void 0) {
				return;
			}

			for (var c, i = 0; i < q.length; ++i) {
				c = q[i];
				runNotify(c.progress, this.value, this.handler, c.receiver, c.resolver);
			}
		};

		/**
		 * Assimilate a thenable, sending it's value to resolver
		 * @param {function} then
		 * @param {object|function} thenable
		 * @param {object} resolver
		 * @constructor
		 */
		function AssimilateTask(then, thenable, resolver) {
			this._then = then;
			this.thenable = thenable;
			this.resolver = resolver;
		}

		AssimilateTask.prototype.run = function() {
			var h = this.resolver;
			tryAssimilate(this._then, this.thenable, _resolve, _reject, _notify);

			function _resolve(x) { h.resolve(x); }
			function _reject(x)  { h.reject(x); }
			function _notify(x)  { h.notify(x); }
		};

		function tryAssimilate(then, thenable, resolve, reject, notify) {
			try {
				then.call(thenable, resolve, reject, notify);
			} catch (e) {
				reject(e);
			}
		}

		/**
		 * Fold a handler value with z
		 * @constructor
		 */
		function Fold(f, z, c, to) {
			this.f = f; this.z = z; this.c = c; this.to = to;
			this.resolver = failIfRejected;
			this.receiver = this;
		}

		Fold.prototype.fulfilled = function(x) {
			this.f.call(this.c, this.z, x, this.to);
		};

		Fold.prototype.rejected = function(x) {
			this.to.reject(x);
		};

		Fold.prototype.progress = function(x) {
			this.to.notify(x);
		};

		// Other helpers

		/**
		 * @param {*} x
		 * @returns {boolean} true iff x is a trusted Promise
		 */
		function isPromise(x) {
			return x instanceof Promise;
		}

		/**
		 * Test just enough to rule out primitives, in order to take faster
		 * paths in some code
		 * @param {*} x
		 * @returns {boolean} false iff x is guaranteed *not* to be a thenable
		 */
		function maybeThenable(x) {
			return (typeof x === 'object' || typeof x === 'function') && x !== null;
		}

		function runContinuation1(f, h, receiver, next) {
			if(typeof f !== 'function') {
				return next.become(h);
			}

			Promise.enterContext(h);
			tryCatchReject(f, h.value, receiver, next);
			Promise.exitContext();
		}

		function runContinuation3(f, x, h, receiver, next) {
			if(typeof f !== 'function') {
				return next.become(h);
			}

			Promise.enterContext(h);
			tryCatchReject3(f, x, h.value, receiver, next);
			Promise.exitContext();
		}

		/**
		 * @deprecated
		 */
		function runNotify(f, x, h, receiver, next) {
			if(typeof f !== 'function') {
				return next.notify(x);
			}

			Promise.enterContext(h);
			tryCatchReturn(f, x, receiver, next);
			Promise.exitContext();
		}

		function tryCatch2(f, a, b) {
			try {
				return f(a, b);
			} catch(e) {
				return reject(e);
			}
		}

		/**
		 * Return f.call(thisArg, x), or if it throws return a rejected promise for
		 * the thrown exception
		 */
		function tryCatchReject(f, x, thisArg, next) {
			try {
				next.become(getHandler(f.call(thisArg, x)));
			} catch(e) {
				next.become(new Rejected(e));
			}
		}

		/**
		 * Same as above, but includes the extra argument parameter.
		 */
		function tryCatchReject3(f, x, y, thisArg, next) {
			try {
				f.call(thisArg, x, y, next);
			} catch(e) {
				next.become(new Rejected(e));
			}
		}

		/**
		 * @deprecated
		 * Return f.call(thisArg, x), or if it throws, *return* the exception
		 */
		function tryCatchReturn(f, x, thisArg, next) {
			try {
				next.notify(f.call(thisArg, x));
			} catch(e) {
				next.notify(e);
			}
		}

		function inherit(Parent, Child) {
			Child.prototype = objectCreate(Parent.prototype);
			Child.prototype.constructor = Child;
		}

		function snd(x, y) {
			return y;
		}

		function noop() {}

		function initEmitRejection() {
			/*global process, self, CustomEvent*/
			if(typeof process !== 'undefined' && process !== null
				&& typeof process.emit === 'function') {
				// Returning falsy here means to call the default
				// onPotentiallyUnhandledRejection API.  This is safe even in
				// browserify since process.emit always returns falsy in browserify:
				// https://github.com/defunctzombie/node-process/blob/master/browser.js#L40-L46
				return function(type, rejection) {
					return type === 'unhandledRejection'
						? process.emit(type, rejection.value, rejection)
						: process.emit(type, rejection);
				};
			} else if(typeof self !== 'undefined' && typeof CustomEvent === 'function') {
				return (function(noop, self, CustomEvent) {
					var hasCustomEvent = false;
					try {
						var ev = new CustomEvent('unhandledRejection');
						hasCustomEvent = ev instanceof CustomEvent;
					} catch (e) {}

					return !hasCustomEvent ? noop : function(type, rejection) {
						var ev = new CustomEvent(type, {
							detail: {
								reason: rejection.value,
								key: rejection
							},
							bubbles: false,
							cancelable: true
						});

						return !self.dispatchEvent(ev);
					};
				}(noop, self, CustomEvent));
			}

			return noop;
		}

		return Promise;
	};
});
}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(); }));

},{}]},{},[1])
(1)
});
;
(function(__global) {

__global.$__Object$getPrototypeOf = Object.getPrototypeOf || function(obj) {
  return obj.__proto__;
};

var $__Object$defineProperty;
(function () {
  try {
    if (!!Object.defineProperty({}, 'a', {})) {
      $__Object$defineProperty = Object.defineProperty;
    }
  } catch (e) {
    $__Object$defineProperty = function (obj, prop, opt) {
      try {
        obj[prop] = opt.value || opt.get.call(obj);
      }
      catch(e) {}
    }
  }
}());

__global.$__Object$create = Object.create || function(o, props) {
  function F() {}
  F.prototype = o;

  if (typeof(props) === "object") {
    for (prop in props) {
      if (props.hasOwnProperty((prop))) {
        F[prop] = props[prop];
      }
    }
  }
  return new F();
};

/*
*********************************************************************************************

  Dynamic Module Loader Polyfill

    - Implemented exactly to the former 2014-08-24 ES6 Specification Draft Rev 27, Section 15
      http://wiki.ecmascript.org/doku.php?id=harmony:specification_drafts#august_24_2014_draft_rev_27

    - Functions are commented with their spec numbers, with spec differences commented.

    - Spec bugs are commented in this code with links.

    - Abstract functions have been combined where possible, and their associated functions
      commented.

    - Realm implementation is entirely omitted.

*********************************************************************************************
*/

// Some Helpers

// logs a linkset snapshot for debugging
/* function snapshot(loader) {
  console.log('---Snapshot---');
  for (var i = 0; i < loader.loads.length; i++) {
    var load = loader.loads[i];
    var linkSetLog = '  ' + load.name + ' (' + load.status + '): ';

    for (var j = 0; j < load.linkSets.length; j++) {
      linkSetLog += '{' + logloads(load.linkSets[j].loads) + '} ';
    }
    console.log(linkSetLog);
  }
  console.log('');
}
function logloads(loads) {
  var log = '';
  for (var k = 0; k < loads.length; k++)
    log += loads[k].name + (k != loads.length - 1 ? ' ' : '');
  return log;
} */


/* function checkInvariants() {
  // see https://bugs.ecmascript.org/show_bug.cgi?id=2603#c1

  var loads = System._loader.loads;
  var linkSets = [];

  for (var i = 0; i < loads.length; i++) {
    var load = loads[i];
    console.assert(load.status == 'loading' || load.status == 'loaded', 'Each load is loading or loaded');

    for (var j = 0; j < load.linkSets.length; j++) {
      var linkSet = load.linkSets[j];

      for (var k = 0; k < linkSet.loads.length; k++)
        console.assert(loads.indexOf(linkSet.loads[k]) != -1, 'linkSet loads are a subset of loader loads');

      if (linkSets.indexOf(linkSet) == -1)
        linkSets.push(linkSet);
    }
  }

  for (var i = 0; i < loads.length; i++) {
    var load = loads[i];
    for (var j = 0; j < linkSets.length; j++) {
      var linkSet = linkSets[j];

      if (linkSet.loads.indexOf(load) != -1)
        console.assert(load.linkSets.indexOf(linkSet) != -1, 'linkSet contains load -> load contains linkSet');

      if (load.linkSets.indexOf(linkSet) != -1)
        console.assert(linkSet.loads.indexOf(load) != -1, 'load contains linkSet -> linkSet contains load');
    }
  }

  for (var i = 0; i < linkSets.length; i++) {
    var linkSet = linkSets[i];
    for (var j = 0; j < linkSet.loads.length; j++) {
      var load = linkSet.loads[j];

      for (var k = 0; k < load.dependencies.length; k++) {
        var depName = load.dependencies[k].value;
        var depLoad;
        for (var l = 0; l < loads.length; l++) {
          if (loads[l].name != depName)
            continue;
          depLoad = loads[l];
          break;
        }

        // loading records are allowed not to have their dependencies yet
        // if (load.status != 'loading')
        //  console.assert(depLoad, 'depLoad found');

        // console.assert(linkSet.loads.indexOf(depLoad) != -1, 'linkset contains all dependencies');
      }
    }
  }
} */


(function() {
  var Promise = __global.Promise || require('when/es6-shim/Promise');
  var console;
  if (__global.console) {
    console = __global.console;
    console.assert = console.assert || function() {};
  } else {
    console = { assert: function() {} };
  }

  // IE8 support
  var indexOf = Array.prototype.indexOf || function(item) {
    for (var i = 0, thisLen = this.length; i < thisLen; i++) {
      if (this[i] === item) {
        return i;
      }
    }
    return -1;
  };
  var defineProperty = $__Object$defineProperty;

  // 15.2.3 - Runtime Semantics: Loader State

  // 15.2.3.11
  function createLoaderLoad(object) {
    return {
      // modules is an object for ES5 implementation
      modules: {},
      loads: [],
      loaderObj: object
    };
  }

  // 15.2.3.2 Load Records and LoadRequest Objects

  // 15.2.3.2.1
  function createLoad(name) {
    return {
      status: 'loading',
      name: name,
      linkSets: [],
      dependencies: [],
      metadata: {}
    };
  }

  // 15.2.3.2.2 createLoadRequestObject, absorbed into calling functions

  // 15.2.4

  // 15.2.4.1
  function loadModule(loader, name, options) {
    return new Promise(asyncStartLoadPartwayThrough({
      step: options.address ? 'fetch' : 'locate',
      loader: loader,
      moduleName: name,
      // allow metadata for import https://bugs.ecmascript.org/show_bug.cgi?id=3091
      moduleMetadata: options && options.metadata || {},
      moduleSource: options.source,
      moduleAddress: options.address
    }));
  }

  // 15.2.4.2
  function requestLoad(loader, request, refererName, refererAddress) {
    // 15.2.4.2.1 CallNormalize
    return new Promise(function(resolve, reject) {
      resolve(loader.loaderObj.normalize(request, refererName, refererAddress));
    })
    // 15.2.4.2.2 GetOrCreateLoad
    .then(function(name) {
      var load;
      if (loader.modules[name]) {
        load = createLoad(name);
        load.status = 'linked';
        // https://bugs.ecmascript.org/show_bug.cgi?id=2795
        load.module = loader.modules[name];
        return load;
      }

      for (var i = 0, l = loader.loads.length; i < l; i++) {
        load = loader.loads[i];
        if (load.name != name)
          continue;
        console.assert(load.status == 'loading' || load.status == 'loaded', 'loading or loaded');
        return load;
      }

      load = createLoad(name);
      loader.loads.push(load);

      proceedToLocate(loader, load);

      return load;
    });
  }

  // 15.2.4.3
  function proceedToLocate(loader, load) {
    proceedToFetch(loader, load,
      Promise.resolve()
      // 15.2.4.3.1 CallLocate
      .then(function() {
        return loader.loaderObj.locate({ name: load.name, metadata: load.metadata });
      })
    );
  }

  // 15.2.4.4
  function proceedToFetch(loader, load, p) {
    proceedToTranslate(loader, load,
      p
      // 15.2.4.4.1 CallFetch
      .then(function(address) {
        // adjusted, see https://bugs.ecmascript.org/show_bug.cgi?id=2602
        if (load.status != 'loading')
          return;
        load.address = address;

        return loader.loaderObj.fetch({ name: load.name, metadata: load.metadata, address: address });
      })
    );
  }

  var anonCnt = 0;

  // 15.2.4.5
  function proceedToTranslate(loader, load, p) {
    p
    // 15.2.4.5.1 CallTranslate
    .then(function(source) {
      if (load.status != 'loading')
        return;

      return Promise.resolve(loader.loaderObj.translate({ name: load.name, metadata: load.metadata, address: load.address, source: source }))

      // 15.2.4.5.2 CallInstantiate
      .then(function(source) {
        if(load.status != 'loading') {
          return;
        }
        load.source = source;
        return loader.loaderObj.instantiate({ name: load.name, metadata: load.metadata, address: load.address, source: source });
      })

      // 15.2.4.5.3 InstantiateSucceeded
      .then(function(instantiateResult) {
        if(load.status != 'loading') {
          return;
        }
        if (instantiateResult === undefined) {
          load.address = load.address || '<Anonymous Module ' + ++anonCnt + '>';

          // instead of load.kind, use load.isDeclarative
          load.isDeclarative = true;
          return loader.loaderObj.transpile(load)
          .then(function(transpiled) {
            // Hijack System.register to set declare function
            var curSystem = __global.System;
            var curRegister = curSystem.register;
            curSystem.register = function(name, regDeps, regDeclare) {
              var declare = regDeclare;
              var deps = regDeps;
              if (typeof name != 'string') {
                declare = deps;
                deps = name;
              }
              // store the registered declaration as load.declare
              // store the deps as load.deps
              load.declare = declare;
              load.depsList = deps;
            };
            __eval(transpiled, __global, load);
            curSystem.register = curRegister;
          });
        }
        else if (typeof instantiateResult == 'object') {
          load.depsList = instantiateResult.deps || [];
          load.execute = instantiateResult.execute;
          load.isDeclarative = false;
        }
        else
          throw TypeError('Invalid instantiate return value');
      })
      // 15.2.4.6 ProcessLoadDependencies
      .then(function() {
        if(load.status != 'loading') {
          return;
        }
        load.dependencies = [];
        var depsList = load.depsList;

        var loadPromises = [];
        for (var i = 0, l = depsList.length; i < l; i++) (function(request, index) {
          loadPromises.push(
            requestLoad(loader, request, load.name, load.address)

            // 15.2.4.6.1 AddDependencyLoad (load is parentLoad)
            .then(function(depLoad) {

              // adjusted from spec to maintain dependency order
              // this is due to the System.register internal implementation needs
              load.dependencies[index] = {
                key: request,
                value: depLoad.name
              };

              if (depLoad.status != 'linked') {
                var linkSets = load.linkSets.concat([]);
                for (var i = 0, l = linkSets.length; i < l; i++)
                  addLoadToLinkSet(linkSets[i], depLoad);
              }

              // console.log('AddDependencyLoad ' + depLoad.name + ' for ' + load.name);
              // snapshot(loader);
            })
          );
        })(depsList[i], i);

        return Promise.all(loadPromises);
      })

      // 15.2.4.6.2 LoadSucceeded
      .then(function() {
        // console.log('LoadSucceeded ' + load.name);
        // snapshot(loader);
        if(load.status != 'loading') {
          return;
        }

        console.assert(load.status == 'loading', 'is loading');

        load.status = 'loaded';

        var linkSets = load.linkSets.concat([]);
        for (var i = 0, l = linkSets.length; i < l; i++)
          updateLinkSetOnLoad(linkSets[i], load);
      });
    })
    // 15.2.4.5.4 LoadFailed
    ['catch'](function(exc) {
      load.status = 'failed';
      load.exception = exc;

      var linkSets = load.linkSets.concat([]);
      for (var i = 0, l = linkSets.length; i < l; i++) {
        linkSetFailed(linkSets[i], load, exc);
      }

      console.assert(load.linkSets.length == 0, 'linkSets not removed');
    });
  }

  // 15.2.4.7 PromiseOfStartLoadPartwayThrough absorbed into calling functions

  // 15.2.4.7.1
  function asyncStartLoadPartwayThrough(stepState) {
    return function(resolve, reject) {
      var loader = stepState.loader;
      var name = stepState.moduleName;
      var step = stepState.step;
      var importingModuleName = stepState.moduleMetadata.importingModuleName;

      if (loader.modules[name])
        throw new TypeError('"' + name + '" already exists in the module table');

      // adjusted to pick up existing loads
      var existingLoad, firstLinkSet;
      for (var i = 0, l = loader.loads.length; i < l; i++) {
        if (loader.loads[i].name == name) {
          existingLoad = loader.loads[i];

          if(step == 'translate' && !existingLoad.source) {
            existingLoad.address = stepState.moduleAddress;
            proceedToTranslate(loader, existingLoad, Promise.resolve(stepState.moduleSource));
          }

          // If the module importing this is part of the same linkSet, create
          // a new one for this import.
          firstLinkSet = existingLoad.linkSets[0];
          if(importingModuleName && firstLinkSet.loads[importingModuleName]) {
            continue;
          }

          return firstLinkSet.done.then(function() {
            resolve(existingLoad);
          });
        }
      }

      var load;
      if(existingLoad) {
        load = existingLoad;
      } else {
        load = createLoad(name);
        load.metadata = stepState.moduleMetadata;
      }

      var linkSet = createLinkSet(loader, load);

      if(!existingLoad) {
        loader.loads.push(load);
      }

      resolve(linkSet.done);

      if (step == 'locate')
        proceedToLocate(loader, load);

      else if (step == 'fetch')
        proceedToFetch(loader, load, Promise.resolve(stepState.moduleAddress));

      else {
        console.assert(step == 'translate', 'translate step');
        load.address = stepState.moduleAddress;
        proceedToTranslate(loader, load, Promise.resolve(stepState.moduleSource));
      }
    }
  }

  // Declarative linking functions run through alternative implementation:
  // 15.2.5.1.1 CreateModuleLinkageRecord not implemented
  // 15.2.5.1.2 LookupExport not implemented
  // 15.2.5.1.3 LookupModuleDependency not implemented

  // 15.2.5.2.1
  function createLinkSet(loader, startingLoad) {
    var linkSet = {
      loader: loader,
      loads: [],
      startingLoad: startingLoad, // added see spec bug https://bugs.ecmascript.org/show_bug.cgi?id=2995
      loadingCount: 0
    };
    linkSet.done = new Promise(function(resolve, reject) {
      linkSet.resolve = resolve;
      linkSet.reject = reject;
    });
    addLoadToLinkSet(linkSet, startingLoad);
    return linkSet;
  }
  // 15.2.5.2.2
  function addLoadToLinkSet(linkSet, load) {
    console.assert(load.status == 'loading' || load.status == 'loaded', 'loading or loaded on link set');

    for (var i = 0, l = linkSet.loads.length; i < l; i++)
      if (linkSet.loads[i] == load)
        return;

    linkSet.loads.push(load);
    linkSet.loads[load.name] = true;
    load.linkSets.push(linkSet);

    // adjustment, see https://bugs.ecmascript.org/show_bug.cgi?id=2603
    if (load.status != 'loaded') {
      linkSet.loadingCount++;
    }

    var loader = linkSet.loader;

    for (var i = 0, l = load.dependencies.length; i < l; i++) {
      var name = load.dependencies[i].value;

      if (loader.modules[name])
        continue;

      for (var j = 0, d = loader.loads.length; j < d; j++) {
        if (loader.loads[j].name != name)
          continue;

        addLoadToLinkSet(linkSet, loader.loads[j]);
        break;
      }
    }
    // console.log('add to linkset ' + load.name);
    // snapshot(linkSet.loader);
  }

  // linking errors can be generic or load-specific
  // this is necessary for debugging info
  function doLink(linkSet) {
    var error = false;
    try {
      link(linkSet, function(load, exc) {
        linkSetFailed(linkSet, load, exc);
        error = true;
      });
    }
    catch(e) {
      linkSetFailed(linkSet, null, e);
      error = true;
    }
    return error;
  }

  // 15.2.5.2.3
  function updateLinkSetOnLoad(linkSet, load) {
    // console.log('update linkset on load ' + load.name);
    // snapshot(linkSet.loader);

    console.assert(load.status == 'loaded' || load.status == 'linked', 'loaded or linked');

    linkSet.loadingCount--;

    if (linkSet.loadingCount > 0)
      return;

    // adjusted for spec bug https://bugs.ecmascript.org/show_bug.cgi?id=2995
    var startingLoad = linkSet.startingLoad;

    // non-executing link variation for loader tracing
    // on the server. Not in spec.
    /***/
    if (linkSet.loader.loaderObj.execute === false) {
      var loads = [].concat(linkSet.loads);
      for (var i = 0, l = loads.length; i < l; i++) {
        var load = loads[i];
        load.module = !load.isDeclarative ? {
          module: _newModule({})
        } : {
          name: load.name,
          module: _newModule({}),
          evaluated: true
        };
        load.status = 'linked';
        finishLoad(linkSet.loader, load);
      }
      return linkSet.resolve(startingLoad);
    }
    /***/

    var abrupt = doLink(linkSet);

    if (abrupt)
      return;

    console.assert(linkSet.loads.length == 0, 'loads cleared');

    linkSet.resolve(startingLoad);
  }

  // 15.2.5.2.4
  function linkSetFailed(linkSet, load, linkExc) {
    var loader = linkSet.loader;
    var exc = linkExc;

    if (linkSet.loads[0].name != load.name)
      exc = addToError(exc, 'Error loading "' + load.name + '" from "' + linkSet.loads[0].name + '" at ' + (linkSet.loads[0].address || '<unknown>') + '\n');

    exc = addToError(exc, 'Error loading "' + load.name + '" at ' + (load.address || '<unknown>') + '\n');

    var loads = linkSet.loads.concat([]);
    for (var i = 0, l = loads.length; i < l; i++) {
      var load = loads[i];

      // store all failed load records
      loader.loaderObj.failed = loader.loaderObj.failed || [];
      if (indexOf.call(loader.loaderObj.failed, load) == -1)
        loader.loaderObj.failed.push(load);

      var linkIndex = indexOf.call(load.linkSets, linkSet);
      console.assert(linkIndex != -1, 'link not present');
      load.linkSets.splice(linkIndex, 1);
      if (load.linkSets.length == 0) {
        var globalLoadsIndex = indexOf.call(linkSet.loader.loads, load);
        if (globalLoadsIndex != -1)
          linkSet.loader.loads.splice(globalLoadsIndex, 1);
      }
    }
    linkSet.reject(exc);
  }

  // 15.2.5.2.5
  function finishLoad(loader, load) {
    // add to global trace if tracing
    if (loader.loaderObj.trace) {
      if (!loader.loaderObj.loads)
        loader.loaderObj.loads = {};
      var depMap = {};
      load.dependencies.forEach(function(dep) {
        depMap[dep.key] = dep.value;
      });
      loader.loaderObj.loads[load.name] = {
        name: load.name,
        deps: load.dependencies.map(function(dep){ return dep.key }),
        depMap: depMap,
        address: load.address,
        metadata: load.metadata,
        source: load.source,
        kind: load.isDeclarative ? 'declarative' : 'dynamic'
      };
    }
    // if not anonymous, add to the module table
    if (load.name) {
      console.assert(!loader.modules[load.name], 'load not in module table');
      loader.modules[load.name] = load.module;
    }
    var loadIndex = indexOf.call(loader.loads, load);
    if (loadIndex != -1)
      loader.loads.splice(loadIndex, 1);
    for (var i = 0, l = load.linkSets.length; i < l; i++) {
      loadIndex = indexOf.call(load.linkSets[i].loads, load);
      if (loadIndex != -1)
        load.linkSets[i].loads.splice(loadIndex, 1);
    }
    load.linkSets.splice(0, load.linkSets.length);
  }

  // 15.2.5.3 Module Linking Groups

  // 15.2.5.3.2 BuildLinkageGroups alternative implementation
  // Adjustments (also see https://bugs.ecmascript.org/show_bug.cgi?id=2755)
  // 1. groups is an already-interleaved array of group kinds
  // 2. load.groupIndex is set when this function runs
  // 3. load.groupIndex is the interleaved index ie 0 declarative, 1 dynamic, 2 declarative, ... (or starting with dynamic)
  function buildLinkageGroups(load, loads, groups) {
    groups[load.groupIndex] = groups[load.groupIndex] || [];

    // if the load already has a group index and its in its group, its already been done
    // this logic naturally handles cycles
    if (indexOf.call(groups[load.groupIndex], load) != -1)
      return;

    // now add it to the group to indicate its been seen
    groups[load.groupIndex].push(load);

    for (var i = 0, l = loads.length; i < l; i++) {
      var loadDep = loads[i];

      // dependencies not found are already linked
      for (var j = 0; j < load.dependencies.length; j++) {
        if (loadDep.name == load.dependencies[j].value) {
          // by definition all loads in linkset are loaded, not linked
          console.assert(loadDep.status == 'loaded', 'Load in linkSet not loaded!');

          // if it is a group transition, the index of the dependency has gone up
          // otherwise it is the same as the parent
          var loadDepGroupIndex = load.groupIndex + (loadDep.isDeclarative != load.isDeclarative);

          // the group index of an entry is always the maximum
          if (loadDep.groupIndex === undefined || loadDep.groupIndex < loadDepGroupIndex) {

            // if already in a group, remove from the old group
            if (loadDep.groupIndex !== undefined) {
              groups[loadDep.groupIndex].splice(indexOf.call(groups[loadDep.groupIndex], loadDep), 1);

              // if the old group is empty, then we have a mixed depndency cycle
              if (groups[loadDep.groupIndex].length == 0)
                throw new TypeError("Mixed dependency cycle detected");
            }

            loadDep.groupIndex = loadDepGroupIndex;
          }

          buildLinkageGroups(loadDep, loads, groups);
        }
      }
    }
  }

  function doDynamicExecute(linkSet, load, linkError) {
    try {
      var module = load.execute();
    }
    catch(e) {
      linkError(load, e);
      return;
    }
    if (!module || !(module instanceof Module))
      linkError(load, new TypeError('Execution must define a Module instance'));
    else
      return module;
  }

  // 15.2.5.4
  function link(linkSet, linkError) {

    var loader = linkSet.loader;

    if (!linkSet.loads.length)
      return;

    // console.log('linking {' + logloads(linkSet.loads) + '}');
    // snapshot(loader);

    // 15.2.5.3.1 LinkageGroups alternative implementation

    // build all the groups
    // because the first load represents the top of the tree
    // for a given linkset, we can work down from there
    var groups = [];
    var startingLoad = linkSet.loads[0];
    startingLoad.groupIndex = 0;
    buildLinkageGroups(startingLoad, linkSet.loads, groups);

    // determine the kind of the bottom group
    var curGroupDeclarative = startingLoad.isDeclarative == groups.length % 2;

    // run through the groups from bottom to top
    for (var i = groups.length - 1; i >= 0; i--) {
      var group = groups[i];
      for (var j = 0; j < group.length; j++) {
        var load = group[j];

        // 15.2.5.5 LinkDeclarativeModules adjusted
        if (curGroupDeclarative) {
          linkDeclarativeModule(load, linkSet.loads, loader);
        }
        // 15.2.5.6 LinkDynamicModules adjusted
        else {
          var module = doDynamicExecute(linkSet, load, linkError);
          if (!module)
            return;
          load.module = {
            name: load.name,
            module: module
          };
          load.status = 'linked';
        }
        finishLoad(loader, load);
      }

      // alternative current kind for next loop
      curGroupDeclarative = !curGroupDeclarative;
    }
  }


  // custom module records for binding graph
  // store linking module records in a separate table
  function getOrCreateModuleRecord(name, loader) {
    var moduleRecords = loader.moduleRecords;
    return moduleRecords[name] || (moduleRecords[name] = {
      name: name,
      dependencies: [],
      module: new Module(), // start from an empty module and extend
      importers: []
    });
  }

  // custom declarative linking function
  function linkDeclarativeModule(load, loads, loader) {
    if (load.module)
      return;

    var module = load.module = getOrCreateModuleRecord(load.name, loader);
    var moduleObj = load.module.module;

    var registryEntry = load.declare.call(__global, function(name, value) {
      // NB This should be an Object.defineProperty, but that is very slow.
      //    By disaling this module write-protection we gain performance.
      //    It could be useful to allow an option to enable or disable this.
      module.locked = true;
      if(typeof name === 'object') {
        for(var p in name) {
          moduleObj[p] = name[p];
        }
      } else {
        moduleObj[name] = value;
      }

      for (var i = 0, l = module.importers.length; i < l; i++) {
        var importerModule = module.importers[i];
        if (!importerModule.locked) {
          var importerIndex = indexOf.call(importerModule.dependencies, module);
          importerModule.setters[importerIndex](moduleObj);
        }
      }

      module.locked = false;
      return value;
    });

    // setup our setters and execution function
    module.setters = registryEntry.setters;
    module.execute = registryEntry.execute;

    // now link all the module dependencies
    // amending the depMap as we go
    for (var i = 0, l = load.dependencies.length; i < l; i++) {
      var depName = load.dependencies[i].value;
      var depModule = loader.modules[depName];

      // if dependency not already in the module registry
      // then try and link it now
      if (!depModule) {
        // get the dependency load record
        for (var j = 0; j < loads.length; j++) {
          if (loads[j].name != depName)
            continue;

          // only link if already not already started linking (stops at circular / dynamic)
          if (!loads[j].module) {
            linkDeclarativeModule(loads[j], loads, loader);
            depModule = loads[j].module;
          }
          // if circular, create the module record
          else {
            depModule = getOrCreateModuleRecord(depName, loader);
          }
        }
      }

      // only declarative modules have dynamic bindings
      if (depModule.importers) {
        module.dependencies.push(depModule);
        depModule.importers.push(module);
      }
      else {
        // track dynamic records as null module records as already linked
        module.dependencies.push(null);
      }

      // run the setter for this dependency
      if (module.setters[i])
        module.setters[i](depModule.module);
    }

    load.status = 'linked';
  }



  // 15.2.5.5.1 LinkImports not implemented
  // 15.2.5.7 ResolveExportEntries not implemented
  // 15.2.5.8 ResolveExports not implemented
  // 15.2.5.9 ResolveExport not implemented
  // 15.2.5.10 ResolveImportEntries not implemented

  // 15.2.6.1
  function evaluateLoadedModule(loader, load) {
    console.assert(load.status == 'linked', 'is linked ' + load.name);

    doEnsureEvaluated(load.module, [], loader);
    return load.module.module;
  }

  /*
   * Module Object non-exotic for ES5:
   *
   * module.module        bound module object
   * module.execute       execution function for module
   * module.dependencies  list of module objects for dependencies
   * See getOrCreateModuleRecord for all properties
   *
   */
  function doExecute(module) {
    try {
      module.execute.call(__global);
    }
    catch(e) {
      return e;
    }
  }

  // propogate execution errors
  // see https://bugs.ecmascript.org/show_bug.cgi?id=2993
  function doEnsureEvaluated(module, seen, loader) {
    var err = ensureEvaluated(module, seen, loader);
    if (err)
      throw err;
  }
  // 15.2.6.2 EnsureEvaluated adjusted
  function ensureEvaluated(module, seen, loader) {
    if (module.evaluated || !module.dependencies)
      return;

    seen.push(module);

    var deps = module.dependencies;
    var err;

    for (var i = 0, l = deps.length; i < l; i++) {
      var dep = deps[i];
      // dynamic dependencies are empty in module.dependencies
      // as they are already linked
      if (!dep)
        continue;
      if (indexOf.call(seen, dep) == -1) {
        err = ensureEvaluated(dep, seen, loader);
        // stop on error, see https://bugs.ecmascript.org/show_bug.cgi?id=2996
        if (err) {
          err = addToError(err, 'Error evaluating ' + dep.name + '\n');
          return err;
        }
      }
    }

    if (module.failed)
      return new Error('Module failed execution.');

    if (module.evaluated)
      return;

    module.evaluated = true;
    err = doExecute(module);
    if (err) {
      module.failed = true;
    }
    else if (Object.preventExtensions) {
      // spec variation
      // we don't create a new module here because it was created and ammended
      // we just disable further extensions instead
      Object.preventExtensions(module.module);
    }

    module.execute = undefined;
    return err;
  }

  function addToError(error, msg) {
    var err = error;
    if (err instanceof Error)
      err.message = msg + err.message;
    else
      err = msg + err;
    return err;
  }

  // 26.3 Loader

  // 26.3.1.1
  function Loader(options) {
    if (typeof options != 'object')
      throw new TypeError('Options must be an object');

    if (options.normalize)
      this.normalize = options.normalize;
    if (options.locate)
      this.locate = options.locate;
    if (options.fetch)
      this.fetch = options.fetch;
    if (options.translate)
      this.translate = options.translate;
    if (options.instantiate)
      this.instantiate = options.instantiate;

    this._loader = {
      loaderObj: this,
      loads: [],
      modules: {},
      importPromises: {},
      moduleRecords: {}
    };

    // 26.3.3.6
    defineProperty(this, 'global', {
      get: function() {
        return __global;
      }
    });

    // 26.3.3.13 realm not implemented
  }

  function Module() {}

  // importPromises adds ability to import a module twice without error - https://bugs.ecmascript.org/show_bug.cgi?id=2601
  function createImportPromise(loader, name, promise) {
    var importPromises = loader._loader.importPromises;
    return importPromises[name] = promise.then(function(m) {
      importPromises[name] = undefined;
      return m;
    }, function(e) {
      importPromises[name] = undefined;
      throw e;
    });
  }

  Loader.prototype = {
    // 26.3.3.1
    constructor: Loader,
    // 26.3.3.2
    define: function(name, source, options) {
      // check if already defined
      if (this._loader.importPromises[name])
        throw new TypeError('Module is already loading.');
      return createImportPromise(this, name, new Promise(asyncStartLoadPartwayThrough({
        step: 'translate',
        loader: this._loader,
        moduleName: name,
        moduleMetadata: options && options.metadata || {},
        moduleSource: source,
        moduleAddress: options && options.address
      })));
    },
    // 26.3.3.3
    'delete': function(name) {
      var loader = this._loader;
      delete loader.importPromises[name];
      delete loader.moduleRecords[name];
      return loader.modules[name] ? delete loader.modules[name] : false;
    },
    // 26.3.3.4 entries not implemented
    // 26.3.3.5
    get: function(key) {
      if (!this._loader.modules[key])
        return;
      doEnsureEvaluated(this._loader.modules[key], [], this);
      return this._loader.modules[key].module;
    },
    // 26.3.3.7
    has: function(name) {
      return !!this._loader.modules[name];
    },
    // 26.3.3.8
    'import': function(name, options) {
      // run normalize first
      var loaderObj = this;

      // added, see https://bugs.ecmascript.org/show_bug.cgi?id=2659
      return Promise.resolve(loaderObj.normalize(name, options && options.name, options && options.address))
      .then(function(name) {
        var loader = loaderObj._loader;

        if (loader.modules[name]) {
          doEnsureEvaluated(loader.modules[name], [], loader._loader);
          return loader.modules[name].module;
        }

        return loader.importPromises[name] || createImportPromise(loaderObj, name,
          loadModule(loader, name, options || {})
          .then(function(load) {
            delete loader.importPromises[name];
            return evaluateLoadedModule(loader, load);
          }, function(err){
            if(loaderObj.defined) {
              loaderObj.defined[name] = undefined;
            }
            return Promise.reject(err);
          }));
      });
    },
    // 26.3.3.9 keys not implemented
    // 26.3.3.10
    load: function(name, options) {
      if (this._loader.modules[name]) {
        doEnsureEvaluated(this._loader.modules[name], [], this._loader);
        return Promise.resolve(this._loader.modules[name].module);
      }
      return this._loader.importPromises[name] || createImportPromise(this, name, loadModule(this._loader, name, {}));
    },
    // 26.3.3.11
    module: function(source, options) {
      var load = createLoad();
      load.address = options && options.address;
      var linkSet = createLinkSet(this._loader, load);
      var sourcePromise = Promise.resolve(source);
      var loader = this._loader;
      var p = linkSet.done.then(function() {
        return evaluateLoadedModule(loader, load);
      });
      proceedToTranslate(loader, load, sourcePromise);
      return p;
    },
    // 26.3.3.12
    newModule: function (obj) {
      if (typeof obj != 'object')
        throw new TypeError('Expected object');

      // we do this to be able to tell if a module is a module privately in ES5
      // by doing m instanceof Module
      var m = new Module();

      var pNames;
      if (Object.getOwnPropertyNames && obj != null) {
        pNames = Object.getOwnPropertyNames(obj);
      }
      else {
        pNames = [];
        for (var key in obj)
          pNames.push(key);
      }

      for (var i = 0; i < pNames.length; i++) (function(key) {
        defineProperty(m, key, {
          configurable: false,
          enumerable: true,
          get: function () {
            return obj[key];
          }
        });
      })(pNames[i]);

      if (Object.preventExtensions)
        Object.preventExtensions(m);

      return m;
    },
    // 26.3.3.14
    set: function(name, module) {
      if (!(module instanceof Module))
        throw new TypeError('Loader.set(' + name + ', module) must be a module');
      this._loader.modules[name] = {
        module: module
      };
    },
    // 26.3.3.15 values not implemented
    // 26.3.3.16 @@iterator not implemented
    // 26.3.3.17 @@toStringTag not implemented

    // 26.3.3.18.1
    normalize: function(name, referrerName, referrerAddress) {
      return name;
    },
    // 26.3.3.18.2
    locate: function(load) {
      return load.name;
    },
    // 26.3.3.18.3
    fetch: function(load) {
      throw new TypeError('Fetch not implemented');
    },
    // 26.3.3.18.4
    translate: function(load) {
      return load.source;
    },
    // 26.3.3.18.5
    instantiate: function(load) {
    }
  };

  var _newModule = Loader.prototype.newModule;

  if (typeof exports === 'object')
    module.exports = Loader;

  __global.Reflect = __global.Reflect || {};
  __global.Reflect.Loader = __global.Reflect.Loader || Loader;
  __global.Reflect.global = __global.Reflect.global || __global;
  __global.LoaderPolyfill = Loader;

})();
/*
 * Traceur and Babel transpile hook for Loader
 */
(function(Loader) {
	var g = __global;

	var isNode = typeof self === "undefined" &&
		typeof process !== "undefined" &&
		{}.toString.call(process) === '[object process]';

	function getTranspilerModule(loader, globalName) {
		return loader.newModule({
			__useDefault: true,
			"default": g[globalName]
		});
	}

	function getTranspilerGlobalName(loadName) {
		return loadName === "babel" ? "Babel" : loadName;
	}

	// Use Babel by default
	Loader.prototype.transpiler = 'babel';

	Loader.prototype.transpile = function(load) {
		var self = this;

		// pick up Transpiler modules from existing globals on first run if set
		if (!self.transpilerHasRun) {
			if (g.traceur && !self.has('traceur')) {
				self.set('traceur', getTranspilerModule(self, 'traceur'));
			}
			if (g.Babel && !self.has("babel")) {
				self.set("babel", getTranspilerModule(self, "Babel"));
			}
			self.transpilerHasRun = true;
		}

		return self['import'](self.transpiler)
			.then(function(transpilerMod) {
				var transpiler = transpilerMod;
				if (transpiler.__useDefault) {
					transpiler = transpiler['default'];
				}

				return (transpiler.Compiler ? traceurTranspile : babelTranspile)
					.call(self, load, transpiler);
			})
			.then(function(code) {
				return 'var __moduleAddress = "' + load.address + '";' + code;
			});
	};

	Loader.prototype.instantiate = function(load) {
		var self = this;
		return Promise.resolve(self.normalize(self.transpiler))
			.then(function(transpilerNormalized) {
				// load transpiler as a global (avoiding System clobbering)
				if (load.name === transpilerNormalized) {
					return {
						deps: [],
						execute: function() {
							var curSystem = g.System;
							var curLoader = g.Reflect.Loader;
							// ensure not detected as CommonJS
							__eval('(function(require,exports,module){' + load.source + '})();', g, load);
							g.System = curSystem;
							g.Reflect.Loader = curLoader;
							return getTranspilerModule(self, getTranspilerGlobalName(load.name));
						}
					};
				}
			});
	};

	function traceurTranspile(load, traceur) {
		var options = this.traceurOptions || {};
		options.modules = 'instantiate';
		options.script = false;
		options.sourceMaps = 'inline';
		options.filename = load.address;
		options.inputSourceMap = load.metadata.sourceMap;
		options.moduleName = false;

		var compiler = new traceur.Compiler(options);
		var source = doTraceurCompile(load.source, compiler, options.filename);

		// add "!eval" to end of Traceur sourceURL
		// I believe this does something?
		source += '!eval';

		return source;
	}
	function doTraceurCompile(source, compiler, filename) {
		try {
			return compiler.compile(source, filename);
		}
		catch(e) {
			// traceur throws an error array
			throw e[0];
		}
	}

	/**
	 * Gets the babel environment name
	 * return {string} The babel environment name
	 */
	function getBabelEnv() {
		var loader = this;
		var defaultEnv = "development";
		var loaderEnv = typeof loader.getEnv === "function" && loader.getEnv();

		if (isNode) {
			return process.env.BABEL_ENV ||
				process.env.NODE_ENV ||
				loaderEnv ||
				defaultEnv;
		}
		else {
			return loaderEnv || defaultEnv;
		}
	}

	/**
	 * Gets the babel preset or plugin name
	 * @param {BabelPreset|BabelPlugin} presetOrPlugin A babel plugin or preset
	 * @return {?string} The preset/plugin name
	 */
	function getPresetOrPluginName(presetOrPlugin) {
		if (includesPresetOrPluginName(presetOrPlugin)) {
			return typeof presetOrPlugin === "string" ? presetOrPlugin : presetOrPlugin[0];
		}
		else {
			return null;
		}
	}

	/**
	 * Whether the babel plugin/preset name was provided
	 *
	 * @param {BabelPreset|BabelPlugin} presetOrPlugin
	 * @return {boolean}
	 */
	function includesPresetOrPluginName(presetOrPlugin) {
		return typeof presetOrPlugin === "string" ||
			presetOrPlugin.length && typeof presetOrPlugin[0] === "string";
	}

	/**
	 * A Babel plugins as defined in `babelOptions.plugins`
	 * @typedef {string|Function|<string, Object>[]|<Function, Object>[]} BabelPlugin
	 */

	var processBabelPlugins = (function() {
		/**
		 * Returns a list of babel plugins to be used during transpilation
		 *
		 * Collects the babel plugins defined in `babelOptions.plugins` plus
		 * the environment dependant plugins.
		 *
		 * @param {Object} babel The babel object exported by babel-standalone
		 * @param {babelOptions} babelOptions The babel configuration object
		 * @return {Promise.<BabelPlugin[]>} Promise that resolves to a list of babel plugins
		 */
		return function processBabelPlugins(babel, babelOptions) {
			var babelEnv = getBabelEnv.call(this);
			var babelEnvConfig = babelOptions.env || {};

			var pluginsPromises = [
				doProcessPlugins.call(this, babel, babelOptions.plugins)
			];

			for (var envName in babelEnvConfig) {
				// do not process plugins if the current environment does not match
				// the environment in which the plugins are set to be used
				if (babelEnv === envName) {
					var plugins = babelEnvConfig[envName].plugins || [];
					pluginsPromises.push(doProcessPlugins.call(this, babel, plugins));
				}
			}

			return Promise.all(pluginsPromises)
				.then(function(results) {
					var plugins = [];

					// results is an array of arrays, flatten it out!
					results.forEach(function(processedPlugins) {
						plugins = plugins.concat(processedPlugins);
					});

					return plugins;
				});
		}

		/**
		 * Collects builtin plugin names and non builtins functions
		 *
		 * @param {Object} babel The babel object exported by babel-standalone
		 * @param {BabelPlugin[]} babelPlugins A list of babel plugins
		 * @return {Promise.<BabelPlugin[]>} A promise that resolves to a list
		 *		of babel-standalone builtin plugin names and non-builtin plugin
		 *		functions
		 */
		function doProcessPlugins(babel, babelPlugins) {
			var promises = [];

			var plugins = babelPlugins || [];

			plugins.forEach(function(plugin) {
				var name = getPresetOrPluginName(plugin);

				if (!includesPresetOrPluginName(plugin) || isBuiltinPlugin(babel, name)) {
					promises.push(plugin);
				}
				else if (!isBuiltinPlugin(babel, name)) {
					var parent = this.configMain || "package.json!npm";
					var npmPluginNameOrPath = getNpmPluginNameOrPath(name);

					// import the plugin!
					promises.push(this["import"](npmPluginNameOrPath, { name: parent })
						.then(function(mod) {
							var exported = mod.__esModule ? mod["default"] : mod;

							if (typeof plugin === "string") {
								return exported;
							}
							// assume the array form was provided
							else {
								// [ pluginFunction, pluginOptions ]
								return [exported, plugin[1]];
							}
						}));
				}
			}, this);

			return Promise.all(promises);
		}

		/**
		 * Whether the plugin is built in babel-standalone
		 *
		 * @param {Object} babel The babel object exported by babel-standalone
		 * @param {string} pluginName The plugin name to be checked
		 * @return {boolean}
		 */
		function isBuiltinPlugin(babel, pluginName) {
			var isNpmPluginName = /^(?:babel-plugin-)/;
			var availablePlugins = babel.availablePlugins || {};

			// babel-standalone registers its bundled plugins using the shorthand name
			var shorthand = isNpmPluginName.test(pluginName) ?
				pluginName.replace("babel-plugin-", "") :
				pluginName;

			return !!availablePlugins[shorthand];
		}

		/**
		 * Returns babel full plugin name if shorthand was used or the path provided
		 *
		 * @param {string} name The entry in the plugin array
		 * @return {string} Relative/absolute path to plugin or babel npm plugin name
		 *
		 * If a babel plugin is on npm, it can be set in the `plugins` array using
		 * one of the following forms:
		 *
		 * 1) full plugin name, e.g `"plugins": ["babel-plugin-myPlugin"]`
		 * 2) relative/absolute path, e.g: `"plugins": ["./node_modules/asdf/plugin"]`
		 * 3) using a shorthand, e.g: `"plugins": ["myPlugin"]`
		 *
		 * Since plugins are loaded through steal, we need to make sure the full
		 * plugin name is passed to `steal.import` so the npm extension can locate
		 * the babel plugin. Relative/absolute paths should be loaded as any other
		 * module.
		 */
		function getNpmPluginNameOrPath(name) {
			var isPath = /\//;
			var isBabelPluginName = /^(?:babel-plugin-)/;

			return isPath.test(name) || isBabelPluginName.test(name) ?
				name : "babel-plugin-" + name;
		}
	}());

	function getBabelPlugins(current) {
		var plugins = current || [];
		var required = "transform-es2015-modules-systemjs";

		if (plugins.indexOf(required) === -1) {
			plugins.unshift(required);
		}

		return plugins;
	}

	function getBabelPresets(current) {
		var presets = current || [];
		var required = ["es2015-no-commonjs"];

		if (presets.length) {
			for (var i = required.length - 1; i >=0; i -= 1) {
				var preset = required[i];

				if (presets.indexOf(preset) === -1) {
					presets.unshift(preset);
				}
			}
		}
		else {
			presets = ["es2015-no-commonjs", "react", "stage-0"];
		}

		return presets;
	}

	/**
	 * Returns the babel version
	 * @param {Object} babel The babel object
	 * @return {number} The babel version
	 */
	function getBabelVersion(babel) {
		var babelVersion = babel.version ? +babel.version.split(".")[0] : 6;

		return babelVersion || 6;
	}

	function getBabelOptions(load, babel) {
		var options = this.babelOptions || {};

		options.sourceMap = 'inline';
		options.filename = load.address;
		options.code = true;
		options.ast = false;

		if (getBabelVersion(babel) >= 6) {
			// delete the old babel options if they are present in config
			delete options.optional;
			delete options.whitelist;
			delete options.blacklist;

			// make sure presents and plugins needed for Steal to work
			// correctly are set
			options.presets = getBabelPresets(options.presets);
			options.plugins = getBabelPlugins(options.plugins);
		}
		else {
			options.modules = 'system';

			if (!options.blacklist) {
				options.blacklist = ['react'];
			}
		}

		return options;
	}

	/**presets
	 * A Babel preset as defined in `babelOptions.presets`
	 * @typedef {string|Function|Object|<string, Object>[]|<Function, Object>[]|<Object, Object>} BabelPreset
	 */

	var processBabelPresets = (function() {
		/**
		 * Returns a list of babel presets to be used during transpilation
		 *
		 * Collects the babel presets defined in `babelOptions.presets` plus
		 * the environment dependant presets.
		 *
		 * @param {Object} babel The babel object exported by babel-standalone
		 * @param {babelOptions} babelOptions The babel configuration object
		 * @return {Promise.<BabelPreset[]>} Promise that resolves to a list of babel presets
		 */
		return function processBabelPresets(babel, babelOptions) {
			var babelEnv = getBabelEnv.call(this);
			var babelEnvConfig = babelOptions.env || {};

			var presetsPromises = [
				doProcessPresets.call(this, babel, babelOptions.presets)
			];

			for (var envName in babelEnvConfig) {
				// do not process presets if the current environment does not match
				// the environment in which the presets are set to be used
				if (babelEnv === envName) {
					var presets = babelEnvConfig[envName].presets || [];
					presetsPromises.push(doProcessPresets.call(this, babel, presets));
				}
			}

			return Promise.all(presetsPromises)
				.then(function(results) {
					var presets = [];

					// results is an array of arrays, flatten it out!
					results.forEach(function(processedPresets) {
						presets = presets.concat(processedPresets);
					});

					return presets;
				});
		};

		/**
		 * Collects builtin presets names and non builtins objects/functions
		 *
		 * @param {Object} babel The babel object exported by babel-standalone
		 * @param {BabelPreset[]} babelPresets A list of babel presets
		 * @return {Promise.<BabelPreset[]>} A promise that resolves to a list
		 *		of babel-standalone builtin preset names and non-builtin preset
		 *		definitions (object or function).
		 */
		function doProcessPresets(babel, babelPresets) {
			var promises = [];
			var presets = babelPresets || [];

			presets.forEach(function(preset) {
				var name = getPresetOrPluginName(preset);

				if (!includesPresetOrPluginName(preset) || isBuiltinPreset(babel, name)) {
					promises.push(preset);
				}
				else if (!isBuiltinPreset(babel, name)) {
					var parent = this.configMain || "package.json!npm";
					var npmPresetNameOrPath = getNpmPresetNameOrPath(name);

					// import the preset!
					promises.push(this["import"](npmPresetNameOrPath, { name: parent })
						.then(function(mod) {
							var exported = mod.__esModule ? mod["default"] : mod;

							if (typeof preset === "string") {
								return exported;
							}
							// assume the array form was provided
							else {
								// [ presetDefinition, presetOptions ]
								return [exported, preset[1]];
							}
						}));
				}
			}, this);

			return Promise.all(promises);
		}

		/**
		 * Whether the preset is built in babel-standalone
		 * @param {Object} babel The babel object exported by babel-standalone
		 * @param {string} pluginName The plugin name to be checked
		 * @return {boolean}
		 */
		function isBuiltinPreset(babel, presetName) {
			var isNpmPresetName = /^(?:babel-preset-)/;
			var availablePresets = babel.availablePresets || {};

			// babel-standalone registers its builtin presets using the shorthand name
			var shorthand = isNpmPresetName.test(presetName) ?
				presetName.replace("babel-preset-", "") :
				presetName;

			return !!availablePresets[shorthand];
		}

		function getNpmPresetNameOrPath(name) {
			var isPath = /\//;
			var isNpmPresetName = /^(?:babel-preset-)/;

			if (!isPath.test(name) && !isNpmPresetName.test(name)) {
				return "babel-preset-" + name;
			}

			return name;
		}
	}());

	/**
	 * Babel plugin that sets `__esModule` to true
	 *
	 * This flag is needed to interop the SystemJS format used by steal on the
	 * browser in development with the CJS format used for built modules.
	 *
	 * With dev bundles is possible to load a part of the app already built while
	 * other modules are being transpiled on the fly, with this flag, transpiled
	 * amd modules will be able to load the modules transpiled on the browser.
	 */
	function addESModuleFlagPlugin(babel) {
		var t = babel.types;

		return {
			visitor: {
				Program: function(path, state) {
					path.unshiftContainer("body", [
						t.exportNamedDeclaration(null, [
							t.exportSpecifier(t.identifier("true"),
								t.identifier("__esModule"))
						])
					]);
				}
			}
		};
	}

	function babelTranspile(load, babelMod) {
		var babel = babelMod.Babel || babelMod.babel || babelMod;

		var babelVersion = getBabelVersion(babel);
		var options = getBabelOptions.call(this, load, babel);

		return Promise.all([
			processBabelPlugins.call(this, babel, options),
			processBabelPresets.call(this, babel, options)
		])
		.then(function(results) {
			// might be running on an old babel that throws if there is a
			// plugins array in the options object
			if (babelVersion >= 6) {
				options.plugins = [addESModuleFlagPlugin].concat(results[0]);
				options.presets = results[1];
			}

			var source = babel.transform(load.source, options).code;

			// add "!eval" to end of Babel sourceURL
			// I believe this does something?
			return source + '\n//# sourceURL=' + load.address + '!eval';
		});
	}

})(__global.LoaderPolyfill);
/*
*********************************************************************************************

  System Loader Implementation

    - Implemented to https://github.com/jorendorff/js-loaders/blob/master/browser-loader.js

*********************************************************************************************
*/



(function() {
  var isWorker = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope;
  var isBrowser = typeof window != 'undefined' && !isWorker;
  var isWindows = typeof process != 'undefined' && !!process.platform.match(/^win/);
  var Promise = __global.Promise || require('when/es6-shim/Promise');

  // Helpers
  // Absolute URL parsing, from https://gist.github.com/Yaffle/1088850
  function parseURI(url) {
    var m = String(url).replace(/^\s+|\s+$/g, '').match(/^([^:\/?#]+:)?(\/\/(?:[^:@\/?#]*(?::[^:@\/?#]*)?@)?(([^:\/?#]*)(?::(\d*))?))?([^?#]*)(\?[^#]*)?(#[\s\S]*)?/);
    // authority = '//' + user + ':' + pass '@' + hostname + ':' port
    return (m ? {
      href     : m[0] || '',
      protocol : m[1] || '',
      authority: m[2] || '',
      host     : m[3] || '',
      hostname : m[4] || '',
      port     : m[5] || '',
      pathname : m[6] || '',
      search   : m[7] || '',
      hash     : m[8] || ''
    } : null);
  }

  function removeDotSegments(input) {
    var output = [];
    input.replace(/^(\.\.?(\/|$))+/, '')
      .replace(/\/(\.(\/|$))+/g, '/')
      .replace(/\/\.\.$/, '/../')
      .replace(/\/?[^\/]*/g, function (p) {
        if (p === '/..')
          output.pop();
        else
          output.push(p);
    });
    return output.join('').replace(/^\//, input.charAt(0) === '/' ? '/' : '');
  }

  function toAbsoluteURL(inBase, inHref) {
    var href = inHref;
    var base = inBase

    if (isWindows)
      href = href.replace(/\\/g, '/');

    href = parseURI(href || '');
    base = parseURI(base || '');

    return !href || !base ? null : (href.protocol || base.protocol) +
      (href.protocol || href.authority ? href.authority : base.authority) +
      removeDotSegments(href.protocol || href.authority || href.pathname.charAt(0) === '/' ? href.pathname : (href.pathname ? ((base.authority && !base.pathname ? '/' : '') + base.pathname.slice(0, base.pathname.lastIndexOf('/') + 1) + href.pathname) : base.pathname)) +
      (href.protocol || href.authority || href.pathname ? href.search : (href.search || base.search)) +
      href.hash;
  }

  var fetchTextFromURL;

  if (typeof XMLHttpRequest != 'undefined') {
    fetchTextFromURL = function(url, fulfill, reject) {
      var xhr = new XMLHttpRequest();
      var sameDomain = true;
      var doTimeout = false;
      if (!('withCredentials' in xhr)) {
        // check if same domain
        var domainCheck = /^(\w+:)?\/\/([^\/]+)/.exec(url);
        if (domainCheck) {
          sameDomain = domainCheck[2] === window.location.host;
          if (domainCheck[1])
            sameDomain &= domainCheck[1] === window.location.protocol;
        }
      }
      if (!sameDomain && typeof XDomainRequest != 'undefined') {
        xhr = new XDomainRequest();
        xhr.onload = load;
        xhr.onerror = error;
        xhr.ontimeout = error;
        xhr.onprogress = function() {};
        xhr.timeout = 0;
        doTimeout = true;
      }
      function load() {
        fulfill(xhr.responseText);
      }
      function error() {
        var msg = xhr.statusText + ': ' + url || 'XHR error';
        var err = new Error(msg);
        err.statusCode = xhr.status;
        reject(err);
      }

      xhr.onreadystatechange = function () {
        if (xhr.readyState === 4) {
          if (xhr.status === 200 || (xhr.status == 0 && xhr.responseText)) {
            load();
          } else {
            error();
          }
        }
      };
      xhr.open("GET", url, true);

      if (doTimeout)
        setTimeout(function() {
          xhr.send();
        }, 0);

      xhr.send(null);
    }
  }
  else if (typeof require != 'undefined') {
    var fs, fourOhFourFS = /ENOENT/;
    fetchTextFromURL = function(rawUrl, fulfill, reject) {
      if (rawUrl.substr(0, 5) != 'file:')
        throw 'Only file URLs of the form file: allowed running in Node.';
      fs = fs || require('fs');
      var url = rawUrl.substr(5);
      if (isWindows)
        url = url.replace(/\//g, '\\');
      return fs.readFile(url, function(err, data) {
        if (err) {
          // Mark this error as a 404, so that the npm extension
          // will know to retry.
          if(fourOhFourFS.test(err.message)) {
            err.statusCode = 404;
          }

          return reject(err);
        } else {
          fulfill(data + '');
        }
      });
    }
  }
  else if(typeof fetch === 'function') {
    fetchTextFromURL = function(url, fulfill, reject) {
      fetch(url).then(function(resp){
        return resp.text();
      }).then(function(text){
        fulfill(text);
      }).then(null, function(err){
        reject(err);
      });
    }
  }
  else {
    throw new TypeError('No environment fetch API available.');
  }

  var SystemLoader = function($__super) {
    function SystemLoader(options) {
      $__super.call(this, options || {});

      // Set default baseURL and paths
      if (typeof location != 'undefined' && location.href) {
        var href = __global.location.href.split('#')[0].split('?')[0];
        this.baseURL = href.substring(0, href.lastIndexOf('/') + 1);
      }
      else if (typeof process != 'undefined' && process.cwd) {
        this.baseURL = 'file:' + process.cwd() + '/';
        if (isWindows)
          this.baseURL = this.baseURL.replace(/\\/g, '/');
      }
      else {
        throw new TypeError('No environment baseURL');
      }
      this.paths = { '*': '*.js' };
    }

    SystemLoader.__proto__ = ($__super !== null ? $__super : Function.prototype);
    SystemLoader.prototype = $__Object$create(($__super !== null ? $__super.prototype : null));

    $__Object$defineProperty(SystemLoader.prototype, "constructor", {
      value: SystemLoader
    });

    $__Object$defineProperty(SystemLoader.prototype, "global", {
      get: function() {
        return isBrowser ? window : (isWorker ? self : __global);
      },

      enumerable: false
    });

    $__Object$defineProperty(SystemLoader.prototype, "strict", {
      get: function() { return true; },
      enumerable: false
    });

    $__Object$defineProperty(SystemLoader.prototype, "normalize", {
      value: function(name, parentName, parentAddress) {
        if (typeof name != 'string')
          throw new TypeError('Module name must be a string');

        var segments = name.split('/');

        if (segments.length == 0)
          throw new TypeError('No module name provided');

        // current segment
        var i = 0;
        // is the module name relative
        var rel = false;
        // number of backtracking segments
        var dotdots = 0;
        if (segments[0] == '.') {
          i++;
          if (i == segments.length)
            throw new TypeError('Illegal module name "' + name + '"');
          rel = true;
        }
        else {
          while (segments[i] == '..') {
            i++;
            if (i == segments.length)
              throw new TypeError('Illegal module name "' + name + '"');
          }
          if (i)
            rel = true;
          dotdots = i;
        }

        for (var j = i; j < segments.length; j++) {
          var segment = segments[j];
          if (segment == '' || segment == '.' || segment == '..')
            throw new TypeError('Illegal module name "' + name + '"');
        }

        if (!rel)
          return name;

        // build the full module name
        var normalizedParts = [];
        var parentParts = (parentName || '').split('/');
        var normalizedLen = parentParts.length - 1 - dotdots;

        normalizedParts = normalizedParts.concat(parentParts.splice(0, parentParts.length - 1 - dotdots));
        normalizedParts = normalizedParts.concat(segments.splice(i, segments.length - i));

        return normalizedParts.join('/');
      },

      enumerable: false,
      writable: true
    });

    $__Object$defineProperty(SystemLoader.prototype, "locate", {
      value: function(load) {
        var name = load.name;

        // NB no specification provided for System.paths, used ideas discussed in https://github.com/jorendorff/js-loaders/issues/25

        // most specific (longest) match wins
        var pathMatch = '', wildcard;

        // check to see if we have a paths entry
        for (var p in this.paths) {
          var pathParts = p.split('*');
          if (pathParts.length > 2)
            throw new TypeError('Only one wildcard in a path is permitted');

          // exact path match
          if (pathParts.length == 1) {
            if (name == p && p.length > pathMatch.length) {
              pathMatch = p;
              break;
            }
          }

          // wildcard path match
          else {
            if (name.substr(0, pathParts[0].length) == pathParts[0] && name.substr(name.length - pathParts[1].length) == pathParts[1]) {
              pathMatch = p;
              wildcard = name.substr(pathParts[0].length, name.length - pathParts[1].length - pathParts[0].length);
            }
          }
        }

        var outPath = this.paths[pathMatch];
        if (wildcard)
          outPath = outPath.replace('*', wildcard);

        // percent encode just '#' in module names
        // according to https://github.com/jorendorff/js-loaders/blob/master/browser-loader.js#L238
        // we should encode everything, but it breaks for servers that don't expect it
        // like in (https://github.com/systemjs/systemjs/issues/168)
        if (isBrowser)
          outPath = outPath.replace(/#/g, '%23');

        return toAbsoluteURL(this.baseURL, outPath);
      },

      enumerable: false,
      writable: true
    });

    $__Object$defineProperty(SystemLoader.prototype, "fetch", {
      value: function(load) {
        var self = this;
        return new Promise(function(resolve, reject) {
          fetchTextFromURL(toAbsoluteURL(self.baseURL, load.address), function(source) {
            resolve(source);
          }, reject);
        });
      },

      enumerable: false,
      writable: true
    });

    return SystemLoader;
  }(__global.LoaderPolyfill);

  var System = new SystemLoader();

  // note we have to export before runing "init" below
  if (typeof exports === 'object')
    module.exports = System;

  __global.System = System;
})();


// Define our eval outside of the scope of any other reference defined in this
// file to avoid adding those references to the evaluation scope.
function __eval(__source, __global, __load) {
  try {
    eval('(function() { var __moduleName = "' + (__load.name || '').replace('"', '\"') + '"; ' + __source + ' \n }).call(__global);');
  }
  catch(e) {
    if (e.name == 'SyntaxError' || e.name == 'TypeError')
      e.message = 'Evaluating ' + (__load.name || load.address) + '\n\t' + e.message;
    throw e;
  }
}

})(typeof window != 'undefined' ? window : (typeof WorkerGlobalScope != 'undefined' ?
                                           self : global));

/*
 * StealJS base extension
 *
 * **src/base/base.js** is an autogenerated file; any change should be
 * made to the source files in **src/base/lib/*.js**
 */


(function($__global) {

$__global.upgradeSystemLoader = function() {
  $__global.upgradeSystemLoader = undefined;

  // indexOf polyfill for IE
  var indexOf = Array.prototype.indexOf || function(item) {
    for (var i = 0, l = this.length; i < l; i++)
      if (this[i] === item)
        return i;
    return -1;
  }

  var isWindows = typeof process != 'undefined' && !!process.platform.match(/^win/);

  // Absolute URL parsing, from https://gist.github.com/Yaffle/1088850
  function parseURI(url) {
    var m = String(url).replace(/^\s+|\s+$/g, '').match(/^([^:\/?#]+:)?(\/\/(?:[^:@\/?#]*(?::[^:@\/?#]*)?@)?(([^:\/?#]*)(?::(\d*))?))?([^?#]*)(\?[^#]*)?(#[\s\S]*)?/);
    // authority = '//' + user + ':' + pass '@' + hostname + ':' port
    return (m ? {
      href     : m[0] || '',
      protocol : m[1] || '',
      authority: m[2] || '',
      host     : m[3] || '',
      hostname : m[4] || '',
      port     : m[5] || '',
      pathname : m[6] || '',
      search   : m[7] || '',
      hash     : m[8] || ''
    } : null);
  }
  function toAbsoluteURL(inBase, inHref) {
	var base = inBase;
	var href = inHref;
    function removeDotSegments(input) {
      var output = [];
      input.replace(/^(\.\.?(\/|$))+/, '')
        .replace(/\/(\.(\/|$))+/g, '/')
        .replace(/\/\.\.$/, '/../')
        .replace(/\/?[^\/]*/g, function (p) {
          if (p === '/..')
            output.pop();
          else
            output.push(p);
      });
      return output.join('').replace(/^\//, input.charAt(0) === '/' ? '/' : '');
    }

    if (isWindows)
      href = href.replace(/\\/g, '/');

    href = parseURI(href || '');
    base = parseURI(base || '');

    return !href || !base ? null : (href.protocol || base.protocol) +
      (href.protocol || href.authority ? href.authority : base.authority) +
      removeDotSegments(href.protocol || href.authority || href.pathname.charAt(0) === '/' ? href.pathname : (href.pathname ? ((base.authority && !base.pathname ? '/' : '') + base.pathname.slice(0, base.pathname.lastIndexOf('/') + 1) + href.pathname) : base.pathname)) +
      (href.protocol || href.authority || href.pathname ? href.search : (href.search || base.search)) +
      href.hash;
  }

  // clone the original System loader
  var System;
  (function() {
    var originalSystem = $__global.System;
    System = $__global.System = new LoaderPolyfill(originalSystem);
    System.baseURL = originalSystem.baseURL;
    System.paths = { '*': '*.js' };
    System.originalSystem = originalSystem;
  })();

  System.noConflict = function() {
    $__global.SystemJS = System;
    $__global.System = System.originalSystem;
  }

var getOwnPropertyDescriptor = true;
try {
  Object.getOwnPropertyDescriptor({ a: 0 }, 'a');
}
catch(e) {
  getOwnPropertyDescriptor = false;
}

var defineProperty;
(function () {
  try {
    if (!!Object.defineProperty({}, 'a', {}))
      defineProperty = Object.defineProperty;
  }
  catch (e) {
    defineProperty = function(obj, prop, opt) {
      try {
        obj[prop] = opt.value || opt.get.call(obj);
      }
      catch(e) {}
    }
  }
})();

// converts any module.exports object into an object ready for SystemJS.newModule
function getESModule(exports) {
  var esModule = {};
  // don't trigger getters/setters in environments that support them
  if ((typeof exports == 'object' || typeof exports == 'function') && exports !== $__global) {
      if (getOwnPropertyDescriptor) {
        for (var p in exports) {
          // The default property is copied to esModule later on
          if (p === 'default')
            continue;
          defineOrCopyProperty(esModule, exports, p);
        }
      }
      else {
        extend(esModule, exports);
      }
  }
  esModule['default'] = exports;
  defineProperty(esModule, '__useDefault', {
    value: true
  });
  return esModule;
}

function defineOrCopyProperty(targetObj, sourceObj, propName) {
  try {
    var d;
    if (d = Object.getOwnPropertyDescriptor(sourceObj, propName))
      defineProperty(targetObj, propName, d);
  }
  catch (ex) {
    // Object.getOwnPropertyDescriptor threw an exception, fall back to normal set property
    // we dont need hasOwnProperty here because getOwnPropertyDescriptor would have returned undefined above
    targetObj[propName] = sourceObj[propName];
    return false;
  }
}

function extend(a, b, prepend) {
  var hasOwnProperty = b && b.hasOwnProperty;
  for (var p in b) {
    if (hasOwnProperty && !b.hasOwnProperty(p))
      continue;
    if (!prepend || !(p in a))
      a[p] = b[p];
  }
  return a;
}

/*
 * SystemJS Core
 * Code should be vaguely readable
 * 
 */
var originalSystem = $__global.System.originalSystem;
function core(loader) {
  /*
    __useDefault
    
    When a module object looks like:
    newModule(
      __useDefault: true,
      default: 'some-module'
    })

    Then importing that module provides the 'some-module'
    result directly instead of the full module.

    Useful for eg module.exports = function() {}
  */
  var loaderImport = loader['import'];
  loader['import'] = function(name, options) {
    return loaderImport.call(this, name, options).then(function(module) {
      return module.__useDefault ? module['default'] : module;
    });
  };

  // support the empty module, as a concept
  loader.set('@empty', loader.newModule({}));

  // include the node require since we're overriding it
  if (typeof require != 'undefined')
    loader._nodeRequire = require;

  /*
    Config
    Extends config merging one deep only

    loader.config({
      some: 'random',
      config: 'here',
      deep: {
        config: { too: 'too' }
      }
    });

    <=>

    loader.some = 'random';
    loader.config = 'here'
    loader.deep = loader.deep || {};
    loader.deep.config = { too: 'too' };
  */
  loader.config = function(cfg) {
    for (var c in cfg) {
      var v = cfg[c];
      if (typeof v == 'object' && !(v instanceof Array)) {
        this[c] = this[c] || {};
        for (var p in v)
          this[c][p] = v[p];
      }
      else
        this[c] = v;
    }
  };

  // override locate to allow baseURL to be document-relative
  var baseURI;
  if (typeof window == 'undefined' &&
      typeof WorkerGlobalScope == 'undefined') {
    baseURI = 'file:' + process.cwd() + '/';
    if (isWindows)
      baseURI = baseURI.replace(/\\/g, '/');
  }
  // Inside of a Web Worker
  else if(typeof window == 'undefined') {
    baseURI = loader.global.location.href;
  }
  else {
    baseURI = document.baseURI;
    if (!baseURI) {
      var bases = document.getElementsByTagName('base');
      baseURI = bases[0] && bases[0].href || window.location.href;
    }
  }

  var loaderLocate = loader.locate;
  var normalizedBaseURL;
  loader.locate = function(load) {
    if (this.baseURL != normalizedBaseURL) {
      normalizedBaseURL = toAbsoluteURL(baseURI, this.baseURL);

      if (normalizedBaseURL.substr(normalizedBaseURL.length - 1, 1) != '/')
        normalizedBaseURL += '/';
      this.baseURL = normalizedBaseURL;
    }

    return Promise.resolve(loaderLocate.call(this, load));
  };

  function applyExtensions(extensions, loader) {
    loader._extensions = [];
    for(var i = 0, len = extensions.length; i < len; i++) {
      extensions[i](loader);
    }
  }

  loader._extensions = loader._extensions || [];
  loader._extensions.push(core);

  loader.clone = function() {
    var originalLoader = this;
    var loader = new LoaderPolyfill(originalSystem);
    loader.baseURL = originalLoader.baseURL;
    loader.paths = { '*': '*.js' };
    applyExtensions(originalLoader._extensions, loader);
    return loader;
  };
}

/*
 * Meta Extension
 *
 * Sets default metadata on a load record (load.metadata) from
 * loader.meta[moduleName].
 * Also provides an inline meta syntax for module meta in source.
 *
 * Eg:
 *
 * loader.meta['my/module'] = { some: 'meta' };
 *
 * load.metadata.some = 'meta' will now be set on the load record.
 *
 * The same meta could be set with a my/module.js file containing:
 * 
 * my/module.js
 *   "some meta"; 
 *   "another meta";
 *   console.log('this is my/module');
 *
 * The benefit of inline meta is that coniguration doesn't need
 * to be known in advance, which is useful for modularising
 * configuration and avoiding the need for configuration injection.
 *
 *
 * Example
 * -------
 *
 * The simplest meta example is setting the module format:
 *
 * System.meta['my/module'] = { format: 'amd' };
 *
 * or inside 'my/module.js':
 *
 * "format amd";
 * define(...);
 * 
 */

function meta(loader) {
  var metaRegEx = /^(\s*\/\*.*\*\/|\s*\/\/[^\n]*|\s*"[^"]+"\s*;?|\s*'[^']+'\s*;?)+/;
  var metaPartRegEx = /\/\*.*\*\/|\/\/[^\n]*|"[^"]+"\s*;?|'[^']+'\s*;?/g;

  loader.meta = {};
  loader._extensions = loader._extensions || [];
  loader._extensions.push(meta);

  function setConfigMeta(loader, load) {
    var meta = loader.meta && loader.meta[load.name];
    if (meta) {
      for (var p in meta)
        load.metadata[p] = load.metadata[p] || meta[p];
    }
  }

  var loaderLocate = loader.locate;
  loader.locate = function(load) {
    setConfigMeta(this, load);
    return loaderLocate.call(this, load);
  }

  var loaderTranslate = loader.translate;
  loader.translate = function(load) {
    // detect any meta header syntax
    var meta = load.source.match(metaRegEx);
    if (meta) {
      var metaParts = meta[0].match(metaPartRegEx);
      for (var i = 0; i < metaParts.length; i++) {
        var len = metaParts[i].length;

        var firstChar = metaParts[i].substr(0, 1);
        if (metaParts[i].substr(len - 1, 1) == ';')
          len--;
      
        if (firstChar != '"' && firstChar != "'")
          continue;

        var metaString = metaParts[i].substr(1, metaParts[i].length - 3);

        var metaName = metaString.substr(0, metaString.indexOf(' '));
        if (metaName) {
          var metaValue = metaString.substr(metaName.length + 1, metaString.length - metaName.length - 1);

          if (load.metadata[metaName] instanceof Array)
            load.metadata[metaName].push(metaValue);
          else if (!load.metadata[metaName])
            load.metadata[metaName] = metaValue;
        }
      }
    }
    // config meta overrides
    setConfigMeta(this, load);
    
    return loaderTranslate.call(this, load);
  }
}

/*
 * Instantiate registry extension
 *
 * Supports Traceur System.register 'instantiate' output for loading ES6 as ES5.
 *
 * - Creates the loader.register function
 * - Also supports metadata.format = 'register' in instantiate for anonymous register modules
 * - Also supports metadata.deps, metadata.execute and metadata.executingRequire
 *     for handling dynamic modules alongside register-transformed ES6 modules
 *
 * Works as a standalone extension, but benefits from having a more
 * advanced __eval defined like in SystemJS polyfill-wrapper-end.js
 *
 * The code here replicates the ES6 linking groups algorithm to ensure that
 * circular ES6 compiled into System.register can work alongside circular AMD
 * and CommonJS, identically to the actual ES6 loader.
 *
 */
function register(loader) {
  if (typeof indexOf == 'undefined')
    indexOf = Array.prototype.indexOf;
  if (typeof __eval == 'undefined' || typeof document != 'undefined' && !document.addEventListener)
    __eval = 0 || eval; // uglify breaks without the 0 ||

  loader._extensions = loader._extensions || [];
  loader._extensions.push(register);

  // define exec for easy evaluation of a load record (load.name, load.source, load.address)
  // main feature is source maps support handling
  var curSystem;
  function exec(load, execContext) {
    var loader = this;
    var context = execContext;
    // support sourceMappingURL (efficiently)
    var sourceMappingURL;
    var lastLineIndex = load.source.lastIndexOf('\n');
    if (lastLineIndex != -1) {
      if (load.source.substr(lastLineIndex + 1, 21) == '//# sourceMappingURL=') {
        sourceMappingURL = load.source.substr(lastLineIndex + 22, load.source.length - lastLineIndex - 22);
        if (typeof toAbsoluteURL != 'undefined')
          sourceMappingURL = toAbsoluteURL(load.address, sourceMappingURL);
      }
    }

    var evalType = load.metadata && load.metadata.eval;
    context = context || loader.global;
    __eval(load.source, load.address, context, sourceMappingURL, evalType);
  }
  loader.__exec = exec;

  function dedupe(deps) {
    var newDeps = [];
    for (var i = 0, l = deps.length; i < l; i++)
      if (indexOf.call(newDeps, deps[i]) == -1)
        newDeps.push(deps[i])
    return newDeps;
  }

  /*
   * There are two variations of System.register:
   * 1. System.register for ES6 conversion (2-3 params) - System.register([name, ]deps, declare)
   *    see https://github.com/ModuleLoader/es6-module-loader/wiki/System.register-Explained
   *
   * 2. System.register for dynamic modules (3-4 params) - System.register([name, ]deps, executingRequire, execute)
   * the true or false statement
   *
   * this extension implements the linking algorithm for the two variations identical to the spec
   * allowing compiled ES6 circular references to work alongside AMD and CJS circular references.
   *
   */
  // loader.register sets loader.defined for declarative modules
  var anonRegister;
  var calledRegister;
  function registerModule(regName, regDeps, regDeclare, regExecute) {
    var name = regName;
    var deps = regDeps;
    var declare = regDeclare;
    var execute = regExecute;
    if (typeof name != 'string') {
      execute = declare;
      declare = deps;
      deps = name;
      name = null;
    }

    calledRegister = true;

    var register;

    // dynamic
    if (typeof declare == 'boolean') {
      register = {
        declarative: false,
        deps: deps,
        execute: execute,
        executingRequire: declare
      };
    }
    else {
      // ES6 declarative
      register = {
        declarative: true,
        deps: deps,
        declare: declare
      };
    }

    // named register
    if (name) {
      register.name = name;
      // we never overwrite an existing define
      if (!(name in loader.defined))
        loader.defined[name] = register;
    }
    // anonymous register
    else if (register.declarative) {
      if (anonRegister)
        throw new TypeError('Multiple anonymous System.register calls in the same module file.');
      anonRegister = register;
    }
  }
  /*
   * Registry side table - loader.defined
   * Registry Entry Contains:
   *    - name
   *    - deps
   *    - declare for declarative modules
   *    - execute for dynamic modules, different to declarative execute on module
   *    - executingRequire indicates require drives execution for circularity of dynamic modules
   *    - declarative optional boolean indicating which of the above
   *
   * Can preload modules directly on System.defined['my/module'] = { deps, execute, executingRequire }
   *
   * Then the entry gets populated with derived information during processing:
   *    - normalizedDeps derived from deps, created in instantiate
   *    - groupIndex used by group linking algorithm
   *    - evaluated indicating whether evaluation has happend
   *    - module the module record object, containing:
   *      - exports actual module exports
   *
   *    Then for declarative only we track dynamic bindings with the records:
   *      - name
   *      - setters declarative setter functions
   *      - exports actual module values
   *      - dependencies, module records of dependencies
   *      - importers, module records of dependents
   *
   * After linked and evaluated, entries are removed, declarative module records remain in separate
   * module binding table
   *
   */

  function defineRegister(loader) {
    if (loader.register)
      return;

    loader.register = registerModule;

    if (!loader.defined)
      loader.defined = {};

    // script injection mode calls this function synchronously on load
    var onScriptLoad = loader.onScriptLoad;
    loader.onScriptLoad = function(load) {
      onScriptLoad(load);
      // anonymous define
      if (anonRegister)
        load.metadata.entry = anonRegister;

      if (calledRegister) {
        load.metadata.format = load.metadata.format || 'register';
        load.metadata.registered = true;
      }
    }
  }

  defineRegister(loader);

  function buildGroups(entry, loader, groups) {
    groups[entry.groupIndex] = groups[entry.groupIndex] || [];

    if (indexOf.call(groups[entry.groupIndex], entry) != -1)
      return;

    groups[entry.groupIndex].push(entry);

    for (var i = 0, l = entry.normalizedDeps.length; i < l; i++) {
      var depName = entry.normalizedDeps[i];
      var depEntry = loader.defined[depName];

      // not in the registry means already linked / ES6
      if (!depEntry || depEntry.evaluated)
        continue;

      // now we know the entry is in our unlinked linkage group
      var depGroupIndex = entry.groupIndex + (depEntry.declarative != entry.declarative);

      // the group index of an entry is always the maximum
      if (depEntry.groupIndex === undefined || depEntry.groupIndex < depGroupIndex) {

        // if already in a group, remove from the old group
        if (depEntry.groupIndex !== undefined) {
          groups[depEntry.groupIndex].splice(indexOf.call(groups[depEntry.groupIndex], depEntry), 1);

          // if the old group is empty, then we have a mixed depndency cycle
          if (groups[depEntry.groupIndex].length == 0)
            throw new TypeError("Mixed dependency cycle detected");
        }

        depEntry.groupIndex = depGroupIndex;
      }

      buildGroups(depEntry, loader, groups);
    }
  }

  function link(name, loader) {
    var startEntry = loader.defined[name];

    // skip if already linked
    if (startEntry.module)
      return;

    startEntry.groupIndex = 0;

    var groups = [];

    buildGroups(startEntry, loader, groups);

    var curGroupDeclarative = !!startEntry.declarative == groups.length % 2;
    for (var i = groups.length - 1; i >= 0; i--) {
      var group = groups[i];
      for (var j = 0; j < group.length; j++) {
        var entry = group[j];

        // link each group
        if (curGroupDeclarative)
          linkDeclarativeModule(entry, loader);
        else
          linkDynamicModule(entry, loader);
      }
      curGroupDeclarative = !curGroupDeclarative;
    }
  }

  // module binding records
  var moduleRecords = {};
  function getOrCreateModuleRecord(name) {
    return moduleRecords[name] || (moduleRecords[name] = {
      name: name,
      dependencies: [],
      exports: {}, // start from an empty module and extend
      importers: []
    })
  }

  function linkDeclarativeModule(entry, loader) {
    // only link if already not already started linking (stops at circular)
    if (entry.module)
      return;

    var module = entry.module = getOrCreateModuleRecord(entry.name);
    var exports = entry.module.exports;

    var declaration = entry.declare.call(loader.global, function(name, value) {
      module.locked = true;
      exports[name] = value;

      for (var i = 0, l = module.importers.length; i < l; i++) {
        var importerModule = module.importers[i];
        if (!importerModule.locked) {
          var importerIndex = indexOf.call(importerModule.dependencies, module);
          importerModule.setters[importerIndex](exports);
        }
      }

      module.locked = false;
      return value;
    });

    module.setters = declaration.setters;
    module.execute = declaration.execute;

    if (!module.setters || !module.execute) {
      throw new TypeError('Invalid System.register form for ' + entry.name);
    }

    // now link all the module dependencies
    for (var i = 0, l = entry.normalizedDeps.length; i < l; i++) {
      var depName = entry.normalizedDeps[i];
      var depEntry = loader.defined[depName];
      var depModule = moduleRecords[depName];

      // work out how to set depExports based on scenarios...
      var depExports;

      if (depModule) {
        depExports = depModule.exports;
      }
      // dynamic, already linked in our registry
      else if (depEntry && !depEntry.declarative) {
        if (depEntry.module.exports && depEntry.module.exports.__esModule)
          depExports = depEntry.module.exports;
        else
          depExports = depEntry.esModule;
          //depExports = { 'default': depEntry.module.exports, '__useDefault': true };
      }
      // in the loader registry
      else if (!depEntry) {
        depExports = loader.get(depName);
      }
      // we have an entry -> link
      else {
        linkDeclarativeModule(depEntry, loader);
        depModule = depEntry.module;
        depExports = depModule.exports;
      }

      // only declarative modules have dynamic bindings
      if (depModule && depModule.importers) {
        depModule.importers.push(module);
        module.dependencies.push(depModule);
      }
      else {
        module.dependencies.push(null);
      }

      // run the setter for this dependency
      if (module.setters[i])
        module.setters[i](depExports);
    }
  }

  // An analog to loader.get covering execution of all three layers (real declarative, simulated declarative, simulated dynamic)
  function getModule(name, loader) {
    var exports;
    var entry = loader.defined[name];

    if (!entry) {
      exports = loader.get(name);
      if (!exports)
        throw new Error('Unable to load dependency ' + name + '.');
    }

    else {
      if (entry.declarative)
        ensureEvaluated(name, [], loader);

      else if (!entry.evaluated)
        linkDynamicModule(entry, loader);

      exports = entry.module.exports;
    }

    if ((!entry || entry.declarative) && exports && exports.__useDefault)
      return exports['default'];

    return exports;
  }

  function linkDynamicModule(entry, loader) {
    if (entry.module)
      return;

    var exports = {};

    var module = entry.module = { exports: exports, id: entry.name };

    // AMD requires execute the tree first
    if (!entry.executingRequire) {
      for (var i = 0, l = entry.normalizedDeps.length; i < l; i++) {
        var depName = entry.normalizedDeps[i];
        var depEntry = loader.defined[depName];
        if (depEntry)
          linkDynamicModule(depEntry, loader);
      }
    }

    // now execute
    entry.evaluated = true;
    var output = entry.execute.call(loader.global, function(name) {
      for (var i = 0, l = entry.deps.length; i < l; i++) {
        if (entry.deps[i] != name)
          continue;
        return getModule(entry.normalizedDeps[i], loader);
      }
      throw new TypeError('Module ' + name + ' not declared as a dependency.');
    }, exports, module);

    if (output)
      module.exports = output;

    // create the esModule object, which allows ES6 named imports of dynamics
    exports = module.exports;

    // __esModule flag treats as already-named
    if (exports && (exports.__esModule || exports instanceof Module))
      entry.esModule = exports;
    // set module as 'default' export, then fake named exports by iterating properties
    else if (entry.esmExports && exports !== loader.global)
      entry.esModule = getESModule(exports);
    // just use the 'default' export
    else
      entry.esModule = { 'default': exports };
  }

  /*
   * Given a module, and the list of modules for this current branch,
   *  ensure that each of the dependencies of this module is evaluated
   *  (unless one is a circular dependency already in the list of seen
   *  modules, in which case we execute it)
   *
   * Then we evaluate the module itself depth-first left to right
   * execution to match ES6 modules
   */
  function ensureEvaluated(moduleName, seen, loader) {
    var entry = loader.defined[moduleName];

    // if already seen, that means it's an already-evaluated non circular dependency
    if (!entry || entry.evaluated || !entry.declarative)
      return;

    // this only applies to declarative modules which late-execute

    seen.push(moduleName);

    for (var i = 0, l = entry.normalizedDeps.length; i < l; i++) {
      var depName = entry.normalizedDeps[i];
      if (indexOf.call(seen, depName) == -1) {
        if (!loader.defined[depName])
          loader.get(depName);
        else
          ensureEvaluated(depName, seen, loader);
      }
    }

    if (entry.evaluated)
      return;

    entry.evaluated = true;
    entry.module.execute.call(loader.global);
  }

  var Module = loader.newModule({}).constructor;

  var registerRegEx = /System\.register/;

  var loaderFetch = loader.fetch;
  loader.fetch = function(load) {
    var loader = this;
    defineRegister(loader);
    if (loader.defined[load.name]) {
      load.metadata.format = 'defined';
      return '';
    }
    anonRegister = null;
    calledRegister = false;
    // the above get picked up by onScriptLoad
    return loaderFetch.call(loader, load);
  }

  var loaderTranslate = loader.translate;
  loader.translate = function(load) {
    this.register = registerModule;

    this.__exec = exec;

    load.metadata.deps = load.metadata.deps || [];

    // we run the meta detection here (register is after meta)
    return Promise.resolve(loaderTranslate.call(this, load)).then(function(source) {

      // dont run format detection for globals shimmed
      // ideally this should be in the global extension, but there is
      // currently no neat way to separate it
      if (load.metadata.init || load.metadata.exports)
        load.metadata.format = load.metadata.format || 'global';

      // run detection for register format
      if (load.metadata.format == 'register' || !load.metadata.format && load.source.match(registerRegEx))
        load.metadata.format = 'register';
      return source;
    });
  }


  var loaderInstantiate = loader.instantiate;
  loader.instantiate = function(load) {
    var loader = this;

    var entry;

    // first we check if this module has already been defined in the registry
    if (loader.defined[load.name]) {
      entry = loader.defined[load.name];
      entry.deps = entry.deps.concat(load.metadata.deps);
    }

    // picked up already by a script injection
    else if (load.metadata.entry)
      entry = load.metadata.entry;

    // otherwise check if it is dynamic
    else if (load.metadata.execute) {
      entry = {
        declarative: false,
        deps: load.metadata.deps || [],
        esModule: null,
        execute: load.metadata.execute,
        executingRequire: load.metadata.executingRequire // NodeJS-style requires or not
      };
    }

    // Contains System.register calls
    else if (load.metadata.format == 'register') {
      anonRegister = null;
      calledRegister = false;

      var curSystem = loader.global.System;

      loader.global.System = loader;

      loader.__exec(load);

      loader.global.System = curSystem;

      if (anonRegister)
        entry = anonRegister;

      if (!entry && System.defined[load.name])
        entry = System.defined[load.name];

      if (!calledRegister && !load.metadata.registered)
        throw new TypeError(load.name + ' detected as System.register but didn\'t execute.');
    }

    // named bundles are just an empty module
    if (!entry && load.metadata.format != 'es6')
      return {
        deps: load.metadata.deps,
        execute: function() {
          return loader.newModule({});
        }
      };

    // place this module onto defined for circular references
    if (entry)
      loader.defined[load.name] = entry;

    // no entry -> treat as ES6
    else
      return loaderInstantiate.call(this, load);

    entry.deps = dedupe(entry.deps);
    entry.name = load.name;
    entry.esmExports = load.metadata.esmExports !== false;

    // first, normalize all dependencies
    var normalizePromises = [];
    for (var i = 0, l = entry.deps.length; i < l; i++)
      normalizePromises.push(Promise.resolve(loader.normalize(entry.deps[i], load.name)));

    return Promise.all(normalizePromises).then(function(normalizedDeps) {

      entry.normalizedDeps = normalizedDeps;

      return {
        deps: entry.deps,
        execute: function() {
          // recursively ensure that the module and all its
          // dependencies are linked (with dependency group handling)
          link(load.name, loader);

          // now handle dependency execution in correct order
          ensureEvaluated(load.name, [], loader);

          // remove from the registry
          loader.defined[load.name] = undefined;

          var module = entry.module.exports;

          if(!entry.declarative)
            module = entry.esModule;

          // return the defined module object
          return loader.newModule(module);
        }
      };
    });
  }
}

/*
 * Extension to detect ES6 and auto-load Traceur or Babel for processing
 */
function es6(loader) {
  loader._extensions.push(es6);

  // good enough ES6 detection regex - format detections not designed to be accurate, but to handle the 99% use case
  var es6RegEx = /(^\s*|[}\);\n]\s*)(import\s+(['"]|(\*\s+as\s+)?[^"'\(\)\n;]+\s+from\s+['"]|\{)|export\s+\*\s+from\s+["']|export\s+(\{|default|function|class|var|const|let|async\s+function))/;

  var traceurRuntimeRegEx = /\$traceurRuntime\s*\./;
  var babelHelpersRegEx = /babelHelpers\s*\./;

  var transpilerNormalized, transpilerRuntimeNormalized;

  var firstLoad = true;

  var nodeResolver = typeof process != 'undefined' && typeof require != 'undefined' && require.resolve;

  function setConfig(loader, module, nodeModule) {
    loader.meta[module] = {format: 'global'};
    if (nodeResolver && !loader.paths[module]) {
      try {
        loader.paths[module] = require.resolve(nodeModule || module);
      }
      catch(e) {}
    }
  }

  var loaderLocate = loader.locate;
  loader.locate = function(load) {
    var self = this;
    if (firstLoad) {
      if (self.transpiler == 'traceur') {
        setConfig(self, 'traceur', 'traceur/bin/traceur.js');
        self.meta['traceur'].exports = 'traceur';
        setConfig(self, 'traceur-runtime', 'traceur/bin/traceur-runtime.js');
      }
      else if (self.transpiler == 'babel') {
        setConfig(self, 'babel', 'babel-standalone/babel.js');
      }
      firstLoad = false;
    }
    return loaderLocate.call(self, load);
  };

  var loaderTranslate = loader.translate;
  loader.translate = function(load) {
    var loader = this;

    return loaderTranslate.call(loader, load)
    .then(function(source) {

      // detect ES6
      if (load.metadata.format == 'es6' || !load.metadata.format && source.match(es6RegEx)) {
        load.metadata.format = 'es6';
        return source;
      }

      if (load.metadata.format == 'register') {
        if (!loader.global.$traceurRuntime && load.source.match(traceurRuntimeRegEx)) {
          return loader['import']('traceur-runtime').then(function() {
            return source;
          });
        }
        if (!loader.global.babelHelpers && load.source.match(babelHelpersRegEx)) {
          return loader['import']('babel/external-helpers').then(function() {
            return source;
          });
        }
      }

      // ensure Traceur doesn't clobber the System global
      if (loader.transpiler == 'traceur')
        return Promise.all([
          transpilerNormalized || (transpilerNormalized = loader.normalize(loader.transpiler)),
          transpilerRuntimeNormalized || (transpilerRuntimeNormalized = loader.normalize(loader.transpiler + '-runtime'))
        ])
        .then(function(normalized) {
          if (load.name == normalized[0] || load.name == normalized[1])
            return '(function() { var curSystem = System; ' + source + '\nSystem = curSystem; })();';

          return source;
        });

      return source;
    });

  };

}

/*
  SystemJS Global Format

  Supports
    metadata.deps
    metadata.init
    metadata.exports

  Also detects writes to the global object avoiding global collisions.
  See the SystemJS readme global support section for further information.
*/
function global(loader) {

  loader._extensions.push(global);

  function readGlobalProperty(p, propValue) {
    var pParts = p.split('.');
    var value = propValue;
    while (pParts.length)
      value = value[pParts.shift()];
    return value;
  }

  function createHelpers(loader) {
    if (loader.has('@@global-helpers'))
      return;

    var hasOwnProperty = loader.global.hasOwnProperty;
    var moduleGlobals = {};

    var curGlobalObj;
    var ignoredGlobalProps;

    function makeLookupObject(arr) {
      var out = {};
      for(var i = 0, len = arr.length; i < len; i++) {
        out[arr[i]] = true;
      }
      return out;
    }

    loader.set('@@global-helpers', loader.newModule({
      prepareGlobal: function(globalModuleName, globalDeps, globalExportName) {
        var globals;
        var require;
        var moduleName = globalModuleName;
        var deps = globalDeps;
        var exportName = globalExportName;

        // handle function signature when an object is passed instead of
        // individual arguments
        if (typeof moduleName === "object") {
          var options = moduleName;

          deps = options.deps;
          globals = options.globals;
          exportName = options.exportName;
          moduleName = options.moduleName;
          require = options.require;
        }

        // first, we add all the dependency modules to the global
        if (deps) {
          for (var i = 0; i < deps.length; i++) {
            var moduleGlobal = moduleGlobals[deps[i]];
            if (moduleGlobal)
              for (var m in moduleGlobal)
                loader.global[m] = moduleGlobal[m];
          }
        }

        if (globals && require) {
          for (var j in globals) {
            loader.global[j] = require(globals[j]);
          }
        }

        // If an exportName is defined there is no need to perform the next
        // expensive operation.
        if(exportName || exportName === false || loader.inferGlobals === false) {
          return;
        }

        // now store a complete copy of the global object
        // in order to detect changes
        curGlobalObj = {};
        ignoredGlobalProps = makeLookupObject(['indexedDB', 'sessionStorage', 'localStorage',
          'clipboardData', 'frames', 'webkitStorageInfo', 'toolbar', 'statusbar',
          'scrollbars', 'personalbar', 'menubar', 'locationbar', 'webkitIndexedDB',
          'screenTop', 'screenLeft'
        ]);
        for (var g in loader.global) {
          if (ignoredGlobalProps[g]) { continue; }
          if (!hasOwnProperty || loader.global.hasOwnProperty(g)) {
            try {
              curGlobalObj[g] = loader.global[g];
            } catch (e) {
              ignoredGlobalProps[g] = true;
            }
          }
        }
      },
      retrieveGlobal: function(moduleName, exportName, init) {
        var singleGlobal;
        var multipleExports;
        var exports = {};

        // run init
        if (init)
          singleGlobal = init.call(loader.global);

        // check for global changes, creating the globalObject for the module
        // if many globals, then a module object for those is created
        // if one global, then that is the module directly
        else if (exportName) {
          var firstPart = exportName.split('.')[0];
          singleGlobal = readGlobalProperty(exportName, loader.global);
          exports[firstPart] = loader.global[firstPart];
        }

        else if(exportName !== false && loader.inferGlobals !== false) {
          for (var g in loader.global) {
            if (ignoredGlobalProps[g])
              continue;
            if ((!hasOwnProperty || loader.global.hasOwnProperty(g)) && g != loader.global && curGlobalObj[g] != loader.global[g]) {
              exports[g] = loader.global[g];
              if (singleGlobal) {
                if (singleGlobal !== loader.global[g])
                  multipleExports = true;
              }
              else if (singleGlobal === undefined) {
                singleGlobal = loader.global[g];
              }
            }
          }
        }

        moduleGlobals[moduleName] = exports;

        return multipleExports ? exports : singleGlobal;
      }
    }));
  }

  createHelpers(loader);

  var loaderInstantiate = loader.instantiate;
  loader.instantiate = function(load) {
    var loader = this;

    createHelpers(loader);

    var exportName = load.metadata.exports;

    if (!load.metadata.format)
      load.metadata.format = 'global';

    // add globals as dependencies
    if (load.metadata.globals) {
      for (var g in load.metadata.globals) {
        load.metadata.deps.push(load.metadata.globals[g]);
      }
    }

    // global is a fallback module format
    if (load.metadata.format == 'global') {
      load.metadata.execute = function(require, exports, module) {
        loader.get('@@global-helpers').prepareGlobal({
          require: require,
          moduleName: module.id,
          exportName: exportName,
          deps: load.metadata.deps,
          globals: load.metadata.globals
        });

        if (exportName)
          load.source += '\nthis["' + exportName + '"] = ' + exportName + ';';

        // disable module detection
        var define = loader.global.define;
        var require = loader.global.require;

        loader.global.define = undefined;
        loader.global.module = undefined;
        loader.global.exports = undefined;

        loader.__exec(load, loader.global);

        loader.global.require = require;
        loader.global.define = define;

        return loader.get('@@global-helpers').retrieveGlobal(module.id, exportName, load.metadata.init);
      }
    }
    return loaderInstantiate.call(loader, load);
  }
}

/*
  SystemJS CommonJS Format
*/
function cjs(loader) {
  loader._extensions.push(cjs);

  // CJS Module Format
  // require('...') || exports[''] = ... || exports.asd = ... || module.exports = ... || Object.defineProperty(module, "exports" ...
  var cjsExportsRegEx = /(?:^\uFEFF?|[^$_a-zA-Z\xA0-\uFFFF.])(exports\s*(\[['"]|\.)|module(\.exports|\['exports'\]|\["exports"\])\s*(\[['"]|[=,\.])|Object.defineProperty\(\s*module\s*,\s*(?:'|")exports(?:'|"))/;
  // RegEx adjusted from https://github.com/jbrantly/yabble/blob/master/lib/yabble.js#L339
  var cjsRequireRegEx = /(?:^\uFEFF?|[^$_a-zA-Z\xA0-\uFFFF."'])require\s*\(\s*("[^"\\]*(?:\\.[^"\\]*)*"|'[^'\\]*(?:\\.[^'\\]*)*')\s*\)/g;
  var commentRegEx = /(^|[^\\])(\/\*([\s\S]*?)\*\/|([^:]|^)\/\/(.*)$)/mg;

  var stringRegEx = /("[^"\\\n\r]*(\\.[^"\\\n\r]*)*"|'[^'\\\n\r]*(\\.[^'\\\n\r]*)*')/g;

  function getCJSDeps(source) {
    cjsRequireRegEx.lastIndex = commentRegEx.lastIndex = stringRegEx.lastIndex = 0;

    var deps = [];

    var match;

    // track string and comment locations for unminified source
    var stringLocations = [], commentLocations = [];

    function inLocation(locations, match) {
      for (var i = 0; i < locations.length; i++)
        if (locations[i][0] < match.index && locations[i][1] > match.index)
          return true;
      return false;
    }

    if (source.length / source.split('\n').length < 200) {
      while (match = stringRegEx.exec(source))
        stringLocations.push([match.index, match.index + match[0].length]);

      while (match = commentRegEx.exec(source)) {
        // only track comments not starting in strings
        if (!inLocation(stringLocations, match))
          commentLocations.push([match.index, match.index + match[0].length]);
      }
    }

    while (match = cjsRequireRegEx.exec(source)) {
      // ensure we're not within a string or comment location
      if (!inLocation(stringLocations, match) && !inLocation(commentLocations, match)) {
        var dep = match[1].substr(1, match[1].length - 2);
        // skip cases like require('" + file + "')
        if (dep.match(/"|'/))
          continue;
        deps.push(dep);
      }
    }

    return deps;
  }

  var loaderInstantiate = loader.instantiate;
  loader.instantiate = function(load) {

    if (!load.metadata.format) {
      cjsExportsRegEx.lastIndex = 0;
      cjsRequireRegEx.lastIndex = 0;
      if (cjsRequireRegEx.exec(load.source) || cjsExportsRegEx.exec(load.source))
        load.metadata.format = 'cjs';
    }

    if (load.metadata.format == 'cjs') {
      load.metadata.deps = load.metadata.deps ? load.metadata.deps.concat(getCJSDeps(load.source)) : getCJSDeps(load.source);

      load.metadata.executingRequire = true;

      load.metadata.execute = function(require, exports, module) {
        var dirname = (load.address || '').split('/');
        dirname.pop();
        dirname = dirname.join('/');

        // if on the server, remove the "file:" part from the dirname
        if (System._nodeRequire)
          dirname = dirname.substr(5);

        var globals = loader.global._g = {
          global: loader.global,
          exports: exports,
          module: module,
          require: require,
          __filename: System._nodeRequire ? load.address.substr(5) : load.address,
          __dirname: dirname
        };


        // disable AMD detection
        var define = loader.global.define;
        loader.global.define = undefined;

        var execLoad = {
          name: load.name,
          source: '(function() {\n(function(global, exports, module, require, __filename, __dirname){\n' + load.source +
                                  '\n}).call(_g.exports, _g.global, _g.exports, _g.module, _g.require, _g.__filename, _g.__dirname);})();',
          address: load.address
        };
        loader.__exec(execLoad);

        loader.global.define = define;

        loader.global._g = undefined;
      }
    }

    return loaderInstantiate.call(this, load);
  };
}

/*
  SystemJS AMD Format
  Provides the AMD module format definition at System.format.amd
  as well as a RequireJS-style require on System.require
*/
function amd(loader) {
  // by default we only enforce AMD noConflict mode in Node
  var isNode = typeof module != 'undefined' && module.exports;

  loader._extensions.push(amd);

  // AMD Module Format Detection RegEx
  // define([.., .., ..], ...)
  // define(varName); || define(function(require, exports) {}); || define({})
  var amdRegEx = /(?:^\uFEFF?|[^$_a-zA-Z\xA0-\uFFFF.])define\s*\(\s*("[^"]+"\s*,\s*|'[^']+'\s*,\s*)?\s*(\[(\s*(("[^"]+"|'[^']+')\s*,|\/\/.*\r?\n|\/\*(.|\s)*?\*\/))*(\s*("[^"]+"|'[^']+')\s*,?)?(\s*(\/\/.*\r?\n|\/\*(.|\s)*?\*\/))*\s*\]|function\s*|{|[_$a-zA-Z\xA0-\uFFFF][_$a-zA-Z0-9\xA0-\uFFFF]*\))/;

  var strictCommentRegEx = /\/\*[\s\S]*?\*\/|([^:]|^)\/\/.*$/gm
  var beforeRegEx = /(function|var|let|const|return|export|\"|\'|\(|\=)$/i

  var fnBracketRegEx = /\(([^\)]*)\)/;
  var wsRegEx = /^\s+|\s+$/g;

  var requireRegExs = {};
  var chunkEndCounterpart = {
    "/*": /[\s\S]*?\*\//g,
    "//": /[^\r\n]+(?:\r?\n|$)/g,
    '"': /(?:\\[\s\S]|[^\\])*?"/g,
    "'": /(?:\\[\s\S]|[^\\])*?'/g,
    "`": /(?:\\[\s\S]|[^\\])*?`/g,
    "require": /\s*\(\s*(['"`])((?:\\[\s\S]|(?!\1)[^\\])*?)\1\s*\)/g,
    "/regexp/": /\/(?:(?:\\.|[^\/\r\n])+?)\//g
  };

  /*
    Find CJS Deps in valid javascript
    Loops through the source once by progressivly identifying "chunks"
    Chunks are:
    multi-line comments, single line comments, strings using ", ', or `, regular expressions, and the special case of the requireAlias
    When the start of a chunk is potentially identified, we grab the corresponding 'endRx' and execute it on source at the same spot
    If the endRx matches correctly at that location, we advance the chunk start regex's lastIndex to the end of the chunk and continue.
    If it's the requireAlias that successfully matched, then we pull the string ('./path') out of the match and push as a dep before continuing.
  */
  function getCJSDeps (source, requireIndex) {
    var deps = [];
    // determine the require alias
    var params = source.match(fnBracketRegEx);
    var requireAlias = (params[1].split(',')[requireIndex] || 'require').replace(wsRegEx, '');

    // Create a cache of the chunk start regex based on the require alias
    var chunkStartRegex = requireRegExs[requireAlias] || (requireRegExs[requireAlias] = new RegExp("/\\*|//|\"|'|`|(?:^|\\breturn\\b|[([=,;:?><&|^*%~+-])\\s*(?=\/)|\\b" + requireAlias + "(?=\\s*\\()", "g"));
    // Look for potential chunks from the start of source
    chunkStartRegex.lastIndex = 0;
    // Make sure chunkEndCounterpart object has a key of requireAlias that points to the common 'require' ending rx for later
    chunkEndCounterpart[requireAlias] = chunkEndCounterpart.require;

    var startExec, chunkStartKey, endRx, endExec;
    // Execute our starting regex search on source to identify where chunks start
    while (startExec = chunkStartRegex.exec(source)) {
      // assume the match is a key for our chunkEndCounterpart object
      // This will be strings like "//", "'", "require", etc
      chunkStartKey = startExec[0];
      // and grab that chunk's ending regular expression
      endRx = chunkEndCounterpart[chunkStartKey];

      if (!endRx) {
        // If what we grabbed doesn't have an entry on chunkEndCounterpart, that means we're identified where a regex might be.
        // So just change our key to a common one used when identifying regular expressions in the js source
        chunkStartKey = "/regexp/";
        // and grab the regex-type chunk's ending regular expression
        endRx = chunkEndCounterpart[chunkStartKey];
      }
      // Set the endRx to start looking exactly where our chunkStartRegex loop ended the match
      endRx.lastIndex = chunkStartRegex.lastIndex;
      // and execute it on source
      endExec = endRx.exec(source);

      // if the endRx matched and it matched starting exactly where we told it to start
      if (endExec && endExec.index === chunkStartRegex.lastIndex) {
        // Then we have identified a chunk correctly and we advance our loop of chunkStartRegex to continue after this chunk
        chunkStartRegex.lastIndex = endRx.lastIndex;
        // if we are specifically identifying the requireAlias-type chunk at this point,
        if (endRx === chunkEndCounterpart.require) {
          // then the second capture group of the endRx is what's inside the string, inside the ()'s, after requireAlias,
          // which is the path of a dep that we want to return.
		  if(endExec[2]) {
			  deps.push(endExec[2]);
		  }

        }
      }
    }
    return deps;
  }

  /*
    AMD-compatible require
    To copy RequireJS, set window.require = window.requirejs = loader.amdRequire
  */
  function require(names, callback, errback, referer) {
    // 'this' is bound to the loader
    var loader = this;

    // in amd, first arg can be a config object... we just ignore
    if (typeof names == 'object' && !(names instanceof Array))
      return require.apply(null, Array.prototype.splice.call(arguments, 1, arguments.length - 1));

    // amd require
    if (names instanceof Array)
      Promise.all(names.map(function(name) {
        return loader['import'](name, referer);
      })).then(function(modules) {
        if(callback) {
          callback.apply(null, modules);
        }
      }, errback);

    // commonjs require
    else if (typeof names == 'string') {
      var module = loader.get(names);
      return module.__useDefault ? module['default'] : module;
    }

    else
      throw new TypeError('Invalid require');
  };
  loader.amdRequire = function() {
    return require.apply(this, arguments);
  };

  function makeRequire(parentName, staticRequire, loader) {
    return function(names, callback, errback) {
      if (typeof names == 'string')
        return staticRequire(names);
      return require.call(loader, names, callback, errback, { name: parentName });
    }
  }

  // run once per loader
  function generateDefine(loader) {
    // script injection mode calls this function synchronously on load
    var onScriptLoad = loader.onScriptLoad;
    loader.onScriptLoad = function(load) {
      onScriptLoad(load);
      if (anonDefine || defineBundle) {
        load.metadata.format = 'defined';
        load.metadata.registered = true;
      }

      if (anonDefine) {
        load.metadata.deps = load.metadata.deps ? load.metadata.deps.concat(anonDefine.deps) : anonDefine.deps;
        load.metadata.execute = anonDefine.execute;
      }
    }

    function define(modName, modDeps, modFactory) {
      var name = modName;
      var deps = modDeps;
      var factory = modFactory;
      if (typeof name != 'string') {
        factory = deps;
        deps = name;
        name = null;
      }
      if (!(deps instanceof Array)) {
        factory = deps;
        deps = ['require', 'exports', 'module'];
      }

      if (typeof factory != 'function')
        factory = (function(factory) {
          return function() { return factory; }
        })(factory);

      // in IE8, a trailing comma becomes a trailing undefined entry
      if (deps[deps.length - 1] === undefined)
        deps.pop();

      // remove system dependencies
      var requireIndex, exportsIndex, moduleIndex;

      if ((requireIndex = indexOf.call(deps, 'require')) != -1) {

        deps.splice(requireIndex, 1);

        var factoryText = factory.toString();

        deps = deps.concat(getCJSDeps(factoryText, requireIndex));
      }


      if ((exportsIndex = indexOf.call(deps, 'exports')) != -1)
        deps.splice(exportsIndex, 1);

      if ((moduleIndex = indexOf.call(deps, 'module')) != -1)
        deps.splice(moduleIndex, 1);

      var define = {
        deps: deps,
        execute: function(require, exports, module) {

          var depValues = [];
          for (var i = 0; i < deps.length; i++)
            depValues.push(require(deps[i]));

          module.uri = loader.baseURL + module.id;

          module.config = function() {};

          // add back in system dependencies
          if (moduleIndex != -1)
            depValues.splice(moduleIndex, 0, module);

          if (exportsIndex != -1)
            depValues.splice(exportsIndex, 0, exports);

          if (requireIndex != -1)
            depValues.splice(requireIndex, 0, makeRequire(module.id, require, loader));

          var output = factory.apply(global, depValues);

          if (typeof output == 'undefined' && module)
            output = module.exports;

          if (typeof output != 'undefined')
            return output;
        }
      };

      // anonymous define
      if (!name) {
        // already defined anonymously -> throw
        if (anonDefine)
          throw new TypeError('Multiple defines for anonymous module');
        anonDefine = define;
      }
      // named define
      else {
		var parsedModuleName =
		  currentLoad && currentLoad.metadata && currentLoad.metadata.parsedModuleName;

		// register the full npm name otherwise named modules won't load
		// when the npm extension is used
		if (
		  parsedModuleName &&
		  parsedModuleName.version &&              // verify it is an npm name
		  (parsedModuleName.modulePath === name || // local module
			parsedModuleName.packageName === name) // from a dependency
		) {
		  loader.register(
			parsedModuleName.moduleName,
			define.deps,
			false,
			define.execute
		  );
		}

        // if it has no dependencies and we don't have any other
        // defines, then let this be an anonymous define
        if (deps.length == 0 && !anonDefine && !defineBundle)
          anonDefine = define;

        // otherwise its a bundle only
        else
          anonDefine = null;

        // the above is just to support single modules of the form:
        // define('jquery')
        // still loading anonymously
        // because it is done widely enough to be useful

        // note this is now a bundle
        defineBundle = true;

        // define the module through the register registry
        loader.register(name, define.deps, false, define.execute);
      }
    };
    define.amd = {};
    loader.amdDefine = define;
  }

  var anonDefine;
  // set to true if the current module turns out to be a named define bundle
  var defineBundle;

  // set on the "instantiate" hook (by "createDefine") so it's available in
  // the scope of the "define" function, it's set back to "undefined" after eval
  var currentLoad;

  var oldModule, oldExports, oldDefine;

  // adds define as a global (potentially just temporarily)
  function createDefine(loader, load) {
    if (!loader.amdDefine)
      generateDefine(loader);

    anonDefine = null;
    defineBundle = null;
	currentLoad = load;

    // ensure no NodeJS environment detection
    var global = loader.global;

    oldModule = global.module;
    oldExports = global.exports;
    oldDefine = global.define;

    global.module = undefined;
    global.exports = undefined;

    if (global.define && global.define === loader.amdDefine)
      return;

    global.define = loader.amdDefine;
  }

  function removeDefine(loader) {
    var global = loader.global;
    global.define = oldDefine;
    global.module = oldModule;
    global.exports = oldExports;
	currentLoad = undefined;
  }

  generateDefine(loader);

  if (loader.scriptLoader) {
    var loaderFetch = loader.fetch;
    loader.fetch = function(load) {
      createDefine(this, load);
      return loaderFetch.call(this, load);
    }
  }

  var loaderInstantiate = loader.instantiate;
  loader.instantiate = function(load) {
    var loader = this,
      sourceWithoutComments = load.source.replace(strictCommentRegEx, '$1'),
      match = sourceWithoutComments.match(amdRegEx);

    if (load.metadata.format == 'amd' || !load.metadata.format && match) {

      // make sure that this is really a AMD module
      // get the content from beginning till the matched define block
      var sourceBeforeDefine = sourceWithoutComments.substring(0, sourceWithoutComments.indexOf(match[0])),
        trimmed = sourceBeforeDefine.replace(wsRegEx, "")

      // check if that there is no commen javscript keywork before
      if (!beforeRegEx.test(trimmed)) {
        load.metadata.format = 'amd';

        if (loader.execute !== false) {
          createDefine(loader, load);

          loader.__exec(load);

          removeDefine(loader);

          if (!anonDefine && !defineBundle && !isNode)
            throw new TypeError('AMD module ' + load.name + ' did not define');
        }

        if (anonDefine) {
          load.metadata.deps = load.metadata.deps ? load.metadata.deps.concat(anonDefine.deps) : anonDefine.deps;
          load.metadata.execute = anonDefine.execute;
        }
      }
    }

    return loaderInstantiate.call(loader, load);
  }
}

/*
  SystemJS map support

  Provides map configuration through
    System.map['jquery'] = 'some/module/map'

  As well as contextual map config through
    System.map['bootstrap'] = {
      jquery: 'some/module/map2'
    }

  Note that this applies for subpaths, just like RequireJS

  jquery      -> 'some/module/map'
  jquery/path -> 'some/module/map/path'
  bootstrap   -> 'bootstrap'

  Inside any module name of the form 'bootstrap' or 'bootstrap/*'
    jquery    -> 'some/module/map2'
    jquery/p  -> 'some/module/map2/p'

  Maps are carefully applied from most specific contextual map, to least specific global map
*/
function map(loader) {
  loader.map = loader.map || {};

  loader._extensions.push(map);

  // return if prefix parts (separated by '/') match the name
  // eg prefixMatch('jquery/some/thing', 'jquery') -> true
  //    prefixMatch('jqueryhere/', 'jquery') -> false
  function prefixMatch(name, prefix) {
    if (name.length < prefix.length)
      return false;
    if (name.substr(0, prefix.length) != prefix)
      return false;
    if (name[prefix.length] && name[prefix.length] != '/')
      return false;
    return true;
  }

  // get the depth of a given path
  // eg pathLen('some/name') -> 2
  function pathLen(name) {
    var len = 1;
    for (var i = 0, l = name.length; i < l; i++)
      if (name[i] === '/')
        len++;
    return len;
  }

  function doMap(name, matchLen, map) {
    return map + name.substr(matchLen);
  }

  // given a relative-resolved module name and normalized parent name,
  // apply the map configuration
  function applyMap(name, parentName, loader) {
    var curMatch, curMatchLength = 0;
    var curParent, curParentMatchLength = 0;
    var tmpParentLength, tmpPrefixLength;
    var subPath;
    var nameParts;

    // first find most specific contextual match
    if (parentName) {
      for (var p in loader.map) {
        var curMap = loader.map[p];
        if (typeof curMap != 'object')
          continue;

        // most specific parent match wins first
        if (!prefixMatch(parentName, p))
          continue;

        tmpParentLength = pathLen(p);
        if (tmpParentLength <= curParentMatchLength)
          continue;

        for (var q in curMap) {
          // most specific name match wins
          if (!prefixMatch(name, q))
            continue;
          tmpPrefixLength = pathLen(q);
          if (tmpPrefixLength <= curMatchLength)
            continue;

          curMatch = q;
          curMatchLength = tmpPrefixLength;
          curParent = p;
          curParentMatchLength = tmpParentLength;
        }
      }
    }

    // if we found a contextual match, apply it now
    if (curMatch)
      return doMap(name, curMatch.length, loader.map[curParent][curMatch]);

    // now do the global map
    for (var p in loader.map) {
      var curMap = loader.map[p];
      if (typeof curMap != 'string')
        continue;

      if (!prefixMatch(name, p))
        continue;

      var tmpPrefixLength = pathLen(p);

      if (tmpPrefixLength <= curMatchLength)
        continue;

      curMatch = p;
      curMatchLength = tmpPrefixLength;
    }

    if (curMatch)
      return doMap(name, curMatch.length, loader.map[curMatch]);

    return name;
  }

  var loaderNormalize = loader.normalize;
  loader.normalize = function(identifier, parentName, parentAddress) {
    var loader = this;
    var name = identifier;
    if (!loader.map)
      loader.map = {};

    var isPackage = false;
    if (name.substr(name.length - 1, 1) == '/') {
      isPackage = true;
      name += '#';
    }

    return Promise.resolve(loaderNormalize.call(loader, name, parentName, parentAddress))
    .then(function(normalizedName) {
      var name = applyMap(normalizedName, parentName, loader);

      // Normalize "module/" into "module/module"
      // Convenient for packages
      if (isPackage) {
        var nameParts = name.split('/');
        nameParts.pop();
        var pkgName = nameParts.pop();
        nameParts.push(pkgName);
        nameParts.push(pkgName);
        name = nameParts.join('/');
      }

      return name;
    });
  }
}

/*
  SystemJS Plugin Support

  Supports plugin syntax with "!"

  The plugin name is loaded as a module itself, and can override standard loader hooks
  for the plugin resource. See the plugin section of the systemjs readme.
*/
function plugins(loader) {
  if (typeof indexOf == 'undefined')
    indexOf = Array.prototype.indexOf;

  loader._extensions.push(plugins);

  var loaderNormalize = loader.normalize;
  loader.normalize = function(name, parentModuleName, parentAddress) {
    var loader = this;
    var parentName = parentModuleName;
    // if parent is a plugin, normalize against the parent plugin argument only
    var parentPluginIndex;
    if (parentName && (parentPluginIndex = parentName.indexOf('!')) != -1)
      parentName = parentName.substr(0, parentPluginIndex);

    return Promise.resolve(loaderNormalize.call(loader, name, parentName, parentAddress))
    .then(function(name) {
      // if this is a plugin, normalize the plugin name and the argument
      var pluginIndex = name.lastIndexOf('!');
      if (pluginIndex != -1) {
        var argumentName = name.substr(0, pluginIndex);

        // plugin name is part after "!" or the extension itself
        var pluginName = name.substr(pluginIndex + 1) || argumentName.substr(argumentName.lastIndexOf('.') + 1);

        // normalize the plugin name relative to the same parent
        return new Promise(function(resolve) {
          resolve(loader.normalize(pluginName, parentName, parentAddress));
        })
        // normalize the plugin argument
        .then(function(_pluginName) {
          pluginName = _pluginName;
          return loader.normalize(argumentName, parentName, parentAddress, true);
        })
        .then(function(argumentName) {
          return argumentName + '!' + pluginName;
        });
      }

      // standard normalization
      return name;
    });
  };

  var loaderLocate = loader.locate;
  loader.locate = function(load) {
    var loader = this;

    var name = load.name;

    // only fetch the plugin itself if this name isn't defined
    if (this.defined && this.defined[name])
      return loaderLocate.call(this, load);

    // plugin
    var pluginIndex = name.lastIndexOf('!');
    if (pluginIndex != -1) {
      var pluginName = name.substr(pluginIndex + 1);

      // the name to locate is the plugin argument only
      load.name = name.substr(0, pluginIndex);

      var pluginLoader = loader.pluginLoader || loader;

      // load the plugin module
      // NB ideally should use pluginLoader.load for normalized,
      //    but not currently working for some reason
      return pluginLoader['import'](pluginName, {
        metadata: { importingModuleName: name }
      })
      .then(function() {
        var plugin = pluginLoader.get(pluginName);
        plugin = plugin['default'] || plugin;

        // allow plugins to opt-out of build
        if (plugin.build === false && loader.pluginLoader)
          load.metadata.build = false;

        // store the plugin module itself on the metadata
        load.metadata.plugin = plugin;
        load.metadata.pluginName = pluginName;
        load.metadata.pluginArgument = load.name;
        load.metadata.buildType = plugin.buildType || "js";

        // run plugin locate if given
        if (plugin.locate)
          return plugin.locate.call(loader, load);

        // otherwise use standard locate without '.js' extension adding
        else
          return Promise.resolve(loader.locate(load))
          .then(function(address) {
            return address.replace(/\.js$/, '');
          });
      });
    }

    return loaderLocate.call(this, load);
  };

  var loaderFetch = loader.fetch;
  loader.fetch = function(load) {
    var loader = this;
    // ignore fetching build = false unless in a plugin loader
    if (load.metadata.build === false && loader.pluginLoader)
      return '';
    else if (load.metadata.plugin && load.metadata.plugin.fetch && !load.metadata.pluginFetchCalled) {
      load.metadata.pluginFetchCalled = true;
      return load.metadata.plugin.fetch.call(loader, load, loaderFetch);
    }
    else
      return loaderFetch.call(loader, load);
  };

  var loaderTranslate = loader.translate;
  loader.translate = function(load) {
    var loader = this;
    if (load.metadata.plugin && load.metadata.plugin.translate)
      return Promise.resolve(load.metadata.plugin.translate.call(loader, load)).then(function(result) {
        if (typeof result == 'string')
          load.source = result;
        return loaderTranslate.call(loader, load);
      });
    else
      return loaderTranslate.call(loader, load);
  };

  var loaderInstantiate = loader.instantiate;
  loader.instantiate = function(load) {
    var loader = this;
    if (load.metadata.plugin && load.metadata.plugin.instantiate)
       return Promise.resolve(load.metadata.plugin.instantiate.call(loader, load)).then(function(result) {
        if (result) {
          // load.metadata.format = 'defined';
          // load.metadata.execute = function() {
          //   return result;
          // };
          return result;
        }
        return loaderInstantiate.call(loader, load);
      });
    else if (load.metadata.plugin && load.metadata.plugin.build === false) {
      load.metadata.format = 'defined';
      load.metadata.deps.push(load.metadata.pluginName);
      load.metadata.execute = function() {
        return loader.newModule({});
      };
      return loaderInstantiate.call(loader, load);
    }
    else
      return loaderInstantiate.call(loader, load);
  }

}

/*
  System bundles

  Allows a bundle module to be specified which will be dynamically 
  loaded before trying to load a given module.

  For example:
  System.bundles['mybundle'] = ['jquery', 'bootstrap/js/bootstrap']

  Will result in a load to "mybundle" whenever a load to "jquery"
  or "bootstrap/js/bootstrap" is made.

  In this way, the bundle becomes the request that provides the module
*/

function bundles(loader) {
  if (typeof indexOf == 'undefined')
    indexOf = Array.prototype.indexOf;

  loader._extensions.push(bundles);

  // bundles support (just like RequireJS)
  // bundle name is module name of bundle itself
  // bundle is array of modules defined by the bundle
  // when a module in the bundle is requested, the bundle is loaded instead
  // of the form System.bundles['mybundle'] = ['jquery', 'bootstrap/js/bootstrap']
  loader.bundles = loader.bundles || {};

  var loaderFetch = loader.fetch;
  loader.fetch = function(load) {
    var loader = this;
    if (loader.trace)
      return loaderFetch.call(this, load);
    if (!loader.bundles)
      loader.bundles = {};

    // if this module is in a bundle, load the bundle first then
    for (var b in loader.bundles) {
      if (indexOf.call(loader.bundles[b], load.name) == -1)
        continue;
      // we do manual normalization in case the bundle is mapped
      // this is so we can still know the normalized name is a bundle
      return Promise.resolve(loader.normalize(b))
      .then(function(normalized) {
        loader.bundles[normalized] = loader.bundles[normalized] || loader.bundles[b];

        // note this module is a bundle in the meta
        loader.meta = loader.meta || {};
        loader.meta[normalized] = loader.meta[normalized] || {};
        loader.meta[normalized].bundle = true;

        return loader.load(normalized);
      })
      .then(function() {
        return '';
      });
    }
    return loaderFetch.call(this, load);
  }
}

/*
 * Dependency Tree Cache
 * 
 * Allows a build to pre-populate a dependency trace tree on the loader of 
 * the expected dependency tree, to be loaded upfront when requesting the
 * module, avoinding the n round trips latency of module loading, where 
 * n is the dependency tree depth.
 *
 * eg:
 * System.depCache = {
 *  'app': ['normalized', 'deps'],
 *  'normalized': ['another'],
 *  'deps': ['tree']
 * };
 * 
 * System.import('app') 
 * // simultaneously starts loading all of:
 * // 'normalized', 'deps', 'another', 'tree'
 * // before "app" source is even loaded
 */

function depCache(loader) {
  loader.depCache = loader.depCache || {};

  loader._extensions.push(depCache);

  var loaderLocate = loader.locate;
  loader.locate = function(load) {
    var loader = this;

    if (!loader.depCache)
      loader.depCache = {};

    // load direct deps, in turn will pick up their trace trees
    var deps = loader.depCache[load.name];
    if (deps)
      for (var i = 0; i < deps.length; i++)
        loader.load(deps[i]);

    return loaderLocate.call(loader, load);
  }
}
  

core(System);
meta(System);
register(System);
es6(System);
global(System);
cjs(System);
amd(System);
map(System);
plugins(System);
bundles(System);
depCache(System);

};

var $__curScript, __eval;

(function() {

  var doEval;
  var isWorker = typeof window == 'undefined' && typeof self != 'undefined' && typeof importScripts != 'undefined';
  var isBrowser = typeof window != 'undefined' && typeof document != 'undefined';
  var isNode = typeof process === 'object' && {}.toString.call(process) === '[object process]';
  var isNW = !!(isNode && global.nw && global.nw.process);
  var isChromeExtension = isBrowser && !isNW && window.chrome && window.chrome.extension;
  var isWindows = typeof process != 'undefined' && !!process.platform.match(/^win/);
  var scriptEval;

  doEval = function(source, address, context) {
    try {
      new Function(source).call(context);
    }
    catch(e) {
      throw addToError(e, 'Evaluating ' + address);
    }
  };

  if(isWorker) {
    $__global.upgradeSystemLoader();
  } else if ((isBrowser || isNW) && !isChromeExtension) {
    var head;

    var scripts = document.getElementsByTagName('script');
    $__curScript = scripts[scripts.length - 1];

    // globally scoped eval for the browser
    scriptEval = function(source) {
      if (!head)
        head = document.head || document.body || document.documentElement;

      var script = document.createElement('script');
      script.text = source;
      var onerror = window.onerror;
      var e;
      window.onerror = function(_e) {
        e = _e;
      }
      head.appendChild(script);
      head.removeChild(script);
      window.onerror = onerror;
      if (e)
        throw e;
    };

    $__global.upgradeSystemLoader();
  }
  else if(isNode) {
    var es6ModuleLoader = require('./src/loader');
    $__global.System = es6ModuleLoader.System;
    $__global.Loader = es6ModuleLoader.Loader;
    $__global.upgradeSystemLoader();
    module.exports = $__global.System;

    // global scoped eval for node
    var vm = require('vm');
    doEval = function(source) {
      vm.runInThisContext(source);
    }
  }

  var errArgs = new Error(0, '_').fileName == '_';

  function addToError(err, msg) {
    // parse the stack removing loader code lines for simplification
    if (!err.originalErr) {
      var stack = (err.stack || err.message || err).toString().split('\n');
      var newStack = [];
      for (var i = 0; i < stack.length; i++) {
        if (typeof $__curScript == 'undefined' || stack[i].indexOf($__curScript.src) == -1)
          newStack.push(stack[i]);
      }
    }

    var newMsg = (newStack ? newStack.join('\n\t') : err.message) + '\n\t' + msg;

    // Convert file:/// URLs to paths in Node
    if (!isBrowser)
      newMsg = newMsg.replace(isWindows ? /file:\/\/\//g : /file:\/\//g, '');

    var newErr = errArgs ? new Error(newMsg, err.fileName, err.lineNumber) : new Error(newMsg);

    // Node needs stack adjustment for throw to show message
    if (!isBrowser)
      newErr.stack = newMsg;
    // Clearing the stack stops unnecessary loader lines showing
    else
      newErr.stack = null;

    // track the original error
    newErr.originalErr = err.originalErr || err;

    return newErr;
  }

  __eval = function(inSource, address, context, sourceMap, evalType) {
	var source = inSource;
    source += '\n//# sourceURL=' + address + (sourceMap ? '\n//# sourceMappingURL=' + sourceMap : '');


    var useScriptEval = evalType === 'script'
      && typeof scriptEval === 'function';
    if(useScriptEval) {
      scriptEval(source);
    } else {
      doEval(source, address, context);
    }
  };

})();

})(typeof window != 'undefined' ? window : (typeof WorkerGlobalScope != 'undefined' ? self : global));

(function(global){

	// helpers
	var camelize = function(str){
		return str.replace(/-+(.)?/g, function(match, chr){
			return chr ? chr.toUpperCase() : ''
		});
	},
		each = function( o, cb){
			var i, len;

			// weak array detection, but we only use this internally so don't
			// pass it weird stuff
			if ( typeof o.length == 'number' && (o.length - 1) in o) {
				for ( i = 0, len = o.length; i < len; i++ ) {
					cb.call(o[i], o[i], i, o);
				}
			} else {
				for ( i in o ) {
					if(o.hasOwnProperty(i)){
						cb.call(o[i], o[i], i, o);
					}
				}
			}
			return o;
		},
		map = function(o, cb) {
			var arr = [];
			each(o, function(item, i){
				arr[i] = cb(item, i);
			});
			return arr;
		},
		isString = function(o) {
			return typeof o == "string";
		},
		extend = function(d,s){
			each(s, function(v, p){
				d[p] = v;
			});
			return d;
		},
		dir = function(uri){
			var lastSlash = uri.lastIndexOf("/");
			//if no / slashes, check for \ slashes since it might be a windows path
			if(lastSlash === -1)
				lastSlash = uri.lastIndexOf("\\");
			if(lastSlash !== -1) {
				return uri.substr(0, lastSlash);
			} else {
				return uri;
			}
		},
		last = function(arr){
			return arr[arr.length - 1];
		},
		parseURI = function(url) {
			var m = String(url).replace(/^\s+|\s+$/g, '').match(/^([^:\/?#]+:)?(\/\/(?:[^:@\/]*(?::[^:@\/]*)?@)?(([^:\/?#]*)(?::(\d*))?))?([^?#]*)(\?[^#]*)?(#[\s\S]*)?/);
				// authority = '//' + user + ':' + pass '@' + hostname + ':' port
				return (m ? {
				href     : m[0] || '',
				protocol : m[1] || '',
				authority: m[2] || '',
				host     : m[3] || '',
				hostname : m[4] || '',
				port     : m[5] || '',
				pathname : m[6] || '',
				search   : m[7] || '',
				hash     : m[8] || ''
			} : null);
		},
		joinURIs = function(base, href) {
			function removeDotSegments(input) {
				var output = [];
				input.replace(/^(\.\.?(\/|$))+/, '')
					.replace(/\/(\.(\/|$))+/g, '/')
					.replace(/\/\.\.$/, '/../')
					.replace(/\/?[^\/]*/g, function (p) {
						if (p === '/..') {
							output.pop();
						} else {
							output.push(p);
						}
					});
				return output.join('').replace(/^\//, input.charAt(0) === '/' ? '/' : '');
			}

			href = parseURI(href || '');
			base = parseURI(base || '');

			return !href || !base ? null : (href.protocol || base.protocol) +
				(href.protocol || href.authority ? href.authority : base.authority) +
				removeDotSegments(href.protocol || href.authority || href.pathname.charAt(0) === '/' ? href.pathname : (href.pathname ? ((base.authority && !base.pathname ? '/' : '') + base.pathname.slice(0, base.pathname.lastIndexOf('/') + 1) + href.pathname) : base.pathname)) +
					(href.protocol || href.authority || href.pathname ? href.search : (href.search || base.search)) +
					href.hash;
		},
		relativeURI = function(base, path) {
			var uriParts = path.split("/"),
				baseParts = base.split("/"),
				result = [];
			while ( uriParts.length && baseParts.length && uriParts[0] == baseParts[0] ) {
				uriParts.shift();
				baseParts.shift();
			}
			for(var i = 0 ; i< baseParts.length-1; i++) {
				result.push("../");
			}
			return "./" + result.join("") + uriParts.join("/");
		},
		fBind = Function.prototype.bind,
		isFunction = function(obj) {
			return !!(obj && obj.constructor && obj.call && obj.apply);
		},
		isWebWorker = typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope,
		isNode = typeof process === "object" && {}.toString.call(process) === "[object process]",
		isBrowserWithWindow = !isNode && typeof window !== "undefined",
		isNW = isNode && (function(){
			try {
				return require("nw.gui") !== "undefined";
			} catch(e) {
				return false;
			}
		})(),
		isElectron = isNode && !!process.versions["electron"],
		isNode = isNode && !isNW && !isElectron,
		warn = typeof console === "object" ?
			fBind.call(console.warn, console) : function(){};

	var filename = function(uri){
		var lastSlash = uri.lastIndexOf("/");
		//if no / slashes, check for \ slashes since it might be a windows path
		if(lastSlash === -1)
			lastSlash = uri.lastIndexOf("\\");
		var matches = ( lastSlash == -1 ? uri : uri.substr(lastSlash+1) ).match(/^[\w-\s\.!]+/);
		return matches ? matches[0] : "";
	};

	var ext = function(uri){
		var fn = filename(uri);
		var dot = fn.lastIndexOf(".");
		if(dot !== -1) {
			return fn.substr(dot+1);
		} else {
			return "";
		}
	};

	var pluginCache = {};

	var normalize = function(unnormalizedName, loader){
		var name = unnormalizedName;

		// Detech if this name contains a plugin part like: app.less!steal/less
		// and catch the plugin name so that when it is normalized we do not perform
		// Steal's normalization against it.
		var pluginIndex = name.lastIndexOf('!');
		var pluginPart = "";
		if (pluginIndex != -1) {
			// argumentName is the part before the !
			var argumentName = name.substr(0, pluginIndex);
			var pluginName = name.substr(pluginIndex + 1);
			pluginPart = "!" + pluginName;

			// Set the name to the argument name so that we can normalize it alone.
			name = argumentName;
		}

		var last = filename(name),
			extension = ext(name);
		// if the name ends with /
		if(	name[name.length -1] === "/" ) {
			return name+filename( name.substr(0, name.length-1) ) + pluginPart;
		} else if(	!/^(\w+(?:s)?:\/\/|\.|file|\/)/.test(name) &&
			// and doesn't end with a dot
			 last.indexOf(".") === -1
			) {
			return name+"/"+last + pluginPart;
		} else {
			if(extension === "js") {
				return name.substr(0, name.lastIndexOf(".")) + pluginPart;
			} else {
				return name + pluginPart;
			}
		}
	};

var cloneSteal = function(System){
	var loader = System || this.System;
	var steal = makeSteal(loader.clone());
	steal.loader.set("@steal", steal.loader.newModule({
		"default": steal,
		__useDefault: true
	}));
	steal.clone = cloneSteal;
	return steal;
};

var makeSteal = function(System){
	var addStealExtension = function (extensionFn) {
		if (typeof System !== "undefined" && isFunction(extensionFn)) {
			if (System._extensions) {
				System._extensions.push(extensionFn);
			}
			extensionFn(System);
		}
	};

	System.set('@loader', System.newModule({
		'default': System,
		__useDefault: true
	}));


	System.set("less", System.newModule({
		__useDefault: true,
		default: {
			fetch: function() {
				throw new Error(
					[
						"steal-less plugin must be installed and configured properly",
						"See https://stealjs.com/docs/steal-less.html"
					].join("\n")
				);
			}
		}
	}));

	System.config({
		map: {
			"@loader/@loader": "@loader",
			"@steal/@steal": "@steal"
		}
	});

	var configPromise,
		devPromise,
		appPromise;

	var steal = function(){
		var args = arguments;
		var afterConfig = function(){
			var imports = [];
			var factory;
			each(args, function(arg){
				if(isString(arg)) {
					imports.push( steal.System['import']( normalize(arg) ) );
				} else if(typeof arg === "function") {
					factory = arg;
				}
			});

			var modules = Promise.all(imports);
			if(factory) {
				return modules.then(function(modules) {
			        return factory && factory.apply(null, modules);
			   });
			} else {
				return modules;
			}
		};
		if(System.isEnv("production")) {
			return afterConfig();
		} else {
			// wait until the config has loaded
			return configPromise.then(afterConfig,afterConfig);
		}

	};

	System.set("@steal", System.newModule({
		"default": steal,
		__useDefault:true
	}));

	var loaderClone = System.clone;
	System.clone = function(){
		var loader = loaderClone.apply(this, arguments);
		loader.set("@loader", loader.newModule({
			"default": loader,
			__useDefault: true
		}));
		loader.set("@steal", loader.newModule({
			"default": steal,
			__useDefault: true
		}));
		return loader;
	};

	// steal.System remains for backwards compat only
	steal.System = steal.loader = System;
	steal.parseURI = parseURI;
	steal.joinURIs = joinURIs;
	steal.normalize = normalize;
	steal.relativeURI = relativeURI;
	steal.addExtension = addStealExtension;

// System-Ext
// This normalize-hook does 2 things.
// 1. with specify a extension in your config
// 		you can use the "!" (bang) operator to load
// 		that file with the extension
// 		System.ext = {bar: "path/to/bar"}
// 		foo.bar! -> foo.bar!path/to/bar
// 2. if you load a javascript file e.g. require("./foo.js")
// 		normalize will remove the ".js" to load the module
addStealExtension(function (loader) {
  loader.ext = {};

  var normalize = loader.normalize,
    endingExtension = /\.(\w+)!?$/;

  loader.normalize = function (name, parentName, parentAddress, pluginNormalize) {
    if (pluginNormalize) {
      return normalize.apply(this, arguments);
    }

    var matches = name.match(endingExtension);
	var outName = name;

    if (matches) {
      var hasBang = name[name.length - 1] === "!",
        ext = matches[1];
      // load js-files nodd-like
      if (parentName && loader.configMain !== name && matches[0] === '.js') {
        outName = name.substr(0, name.lastIndexOf("."));
        // matches ext mapping
      } else if (loader.ext[ext]) {
        outName = name + (hasBang ? "" : "!") + loader.ext[ext];
      }
    }
    return normalize.call(this, outName, parentName, parentAddress);
  };
});

// Steal Locate Extension
// normalize a given path e.g.
// "path/to/folder/" -> "path/to/folder/folder"
addStealExtension(function (loader) {
  var normalize = loader.normalize;
  var npmLike = /@.+#.+/;

  loader.normalize = function (name, parentName, parentAddress, pluginNormalize) {
    var lastPos = name.length - 1,
      secondToLast,
      folderName,
	  newName = name;

    if (name[lastPos] === "/") {
      secondToLast = name.substring(0, lastPos).lastIndexOf("/");
      folderName = name.substring(secondToLast + 1, lastPos);
      if (npmLike.test(folderName)) {
        folderName = folderName.substr(folderName.lastIndexOf("#") + 1);
      }

      newName += folderName;
    }
    return normalize.call(this, newName, parentName, parentAddress, pluginNormalize);
  };
});

// override loader.translate to rewrite 'locate://' & 'pkg://' path schemes found
// in resources loaded by supporting plugins
addStealExtension(function (loader) {
  /**
   * @hide
   * @function normalizeAndLocate
   * @description Run a module identifier through Normalize and Locate hooks.
   * @param {String} moduleName The module to run through normalize and locate.
   * @return {Promise} A promise to resolve when the address is found.
   */
  var normalizeAndLocate = function(moduleName, parentName){
    var loader = this;
    return Promise.resolve(loader.normalize(moduleName, parentName))
      .then(function(name){
        return loader.locate({name: name, metadata: {}});
      }).then(function(address){
		var outAddress = address;
        if(address.substr(address.length - 3) === ".js") {
          outAddress = address.substr(0, address.length - 3);
        }
        return outAddress;
      });
  };

  var relative = function(base, path){
    var uriParts = path.split("/"),
      baseParts = base.split("/"),
      result = [];

    while ( uriParts.length && baseParts.length && uriParts[0] == baseParts[0] ) {
      uriParts.shift();
      baseParts.shift();
    }

    for(var i = 0 ; i< baseParts.length-1; i++) {
      result.push("../");
    }

    return result.join("") + uriParts.join("/");
  };

  var schemePattern = /(locate):\/\/([a-z0-9/._@-]*)/ig,
    parsePathSchemes = function(source, parent) {
      var locations = [];
      source.replace(schemePattern, function(whole, scheme, path, index){
        locations.push({
          start: index,
          end: index+whole.length,
          name: path,
          postLocate: function(address){
            return relative(parent, address);
          }
        });
      });
      return locations;
    };

  var _translate = loader.translate;
  loader.translate = function(load){
    var loader = this;

    // This only applies to plugin resources.
    if(!load.metadata.plugin) {
      return _translate.call(this, load);
    }

    // Use the translator if this file path scheme is supported by the plugin
    var locateSupport = load.metadata.plugin.locateScheme;
    if(!locateSupport) {
      return _translate.call(this, load);
    }

    // Parse array of module names
    var locations = parsePathSchemes(load.source, load.address);

    // no locations found
    if(!locations.length) {
      return _translate.call(this, load);
    }

    // normalize and locate all of the modules found and then replace those instances in the source.
    var promises = [];
    for(var i = 0, len = locations.length; i < len; i++) {
      promises.push(
        normalizeAndLocate.call(this, locations[i].name, load.name)
      );
    }
    return Promise.all(promises).then(function(addresses){
      for(var i = locations.length - 1; i >= 0; i--) {
        load.source = load.source.substr(0, locations[i].start)
          + locations[i].postLocate(addresses[i])
          + load.source.substr(locations[i].end, load.source.length);
      }
      return _translate.call(loader, load);
    });
  };
});

addStealExtension(function (loader) {
  loader._contextualModules = {};

  loader.setContextual = function(moduleName, definer){
    this._contextualModules[moduleName] = definer;
  };

  var normalize = loader.normalize;
  loader.normalize = function(name, parentName){
    var loader = this;
	var pluginLoader = loader.pluginLoader || loader;

    if (parentName) {
      var definer = this._contextualModules[name];

      // See if `name` is a contextual module
      if (definer) {
        var localName = name + '/' + parentName;

        if(!loader.has(localName)) {
          // `definer` could be a function or could be a moduleName
          if (typeof definer === 'string') {
            definer = pluginLoader['import'](definer);
          }

          return Promise.resolve(definer)
            .then(function(modDefiner) {
				var definer = modDefiner;
              if (definer['default']) {
                definer = definer['default'];
              }
              var definePromise = Promise.resolve(
                definer.call(loader, parentName)
              );
              return definePromise;
            })
            .then(function(moduleDef){
              loader.set(localName, loader.newModule(moduleDef));
              return localName;
            });
        }
        return Promise.resolve(localName);
      }
    }

    return normalize.apply(this, arguments);
  };
});

/**
 * Steal Script-Module Extension
 *
 * Add a steal-module script to the page and it will run after Steal has been
 * configured, e.g:
 *
 * <script type="text/steal-module">...</script>
 * <script type="steal-module">...</script>
 */
addStealExtension(function(loader) {
	// taken from https://github.com/ModuleLoader/es6-module-loader/blob/master/src/module-tag.js
	function completed() {
		document.removeEventListener("DOMContentLoaded", completed, false);
		window.removeEventListener("load", completed, false);
		ready();
	}

	function ready() {
		var scripts = document.getElementsByTagName("script");
		for (var i = 0; i < scripts.length; i++) {
			var script = scripts[i];
			if (script.type == "steal-module" || script.type == "text/steal-module") {
				var source = script.innerHTML;
				if (/\S/.test(source)) {
					loader.module(source)["catch"](function(err) {
						setTimeout(function() {
							throw err;
						});
					});
				}
			}
		}
	}

	loader.loadScriptModules = function() {
		if (isBrowserWithWindow) {
			if (document.readyState === "complete") {
				setTimeout(ready);
			} else if (document.addEventListener) {
				document.addEventListener("DOMContentLoaded", completed, false);
				window.addEventListener("load", completed, false);
			}
		}
	};
});

// SystemJS Steal Format
// Provides the Steal module format definition.
addStealExtension(function (loader) {
  // Steal Module Format Detection RegEx
  // steal(module, ...)
  var stealRegEx = /(?:^\s*|[}{\(\);,\n\?\&]\s*)steal\s*\(\s*((?:"[^"]+"\s*,|'[^']+'\s*,\s*)*)/;

  // What we stole.
  var stealInstantiateResult;

  function createSteal(loader) {
    stealInstantiateResult = null;

    // ensure no NodeJS environment detection
    loader.global.module = undefined;
    loader.global.exports = undefined;

    function steal() {
      var deps = [];
      var factory;

      for( var i = 0; i < arguments.length; i++ ) {
        if (typeof arguments[i] === 'string') {
          deps.push( normalize(arguments[i]) );
        } else {
          factory = arguments[i];
        }
      }

      if (typeof factory !== 'function') {
        factory = (function(factory) {
          return function() { return factory; };
        })(factory);
      }

      stealInstantiateResult = {
        deps: deps,
        execute: function(require, exports, moduleName) {

          var depValues = [];
          for (var i = 0; i < deps.length; i++) {
            depValues.push(require(deps[i]));
          }

          var output = factory.apply(loader.global, depValues);

          if (typeof output !== 'undefined') {
            return output;
          }
        }
      };
    }

    loader.global.steal = steal;
  }

  var loaderInstantiate = loader.instantiate;
  loader.instantiate = function(load) {
    var loader = this;

    if (load.metadata.format === 'steal' || !load.metadata.format && load.source.match(stealRegEx)) {
      load.metadata.format = 'steal';

      var oldSteal = loader.global.steal;

      createSteal(loader);

      loader.__exec(load);

      loader.global.steal = oldSteal;

      if (!stealInstantiateResult) {
        throw "Steal module " + load.name + " did not call steal";
      }

      if (stealInstantiateResult) {
        load.metadata.deps = load.metadata.deps ? load.metadata.deps.concat(stealInstantiateResult.deps) : stealInstantiateResult.deps;
        load.metadata.execute = stealInstantiateResult.execute;
      }
    }
    return loaderInstantiate.call(loader, load);
  };
});
/**
 * Extension to warn users when a module is instantiated twice
 *
 * Multiple module instantiation might cause unexpected side effects
 */
addStealExtension(function(loader) {
	var superInstantiate = loader.instantiate;

	var warn = typeof console === "object" ?
		Function.prototype.bind.call(console.warn, console) :
		null;

	if(!loader._instantiatedModules) {
		Object.defineProperty(loader, '_instantiatedModules', {
			value: Object.create(null),
			writable: false
		});
	}

	loader.instantiate = function(load) {
		var loader = this;
		var instantiated = loader._instantiatedModules;

		if (warn && instantiated[load.address]) {
			var loads = (loader._traceData && loader._traceData.loads) || {};
			var map = (loader._traceData && loader._traceData.parentMap) || {};

			var parentMods = instantiated[load.address].concat(load.name);
			var parents = parentMods
				.map(function(moduleName){
					return "\t" + moduleName + "\n" +

					(map[moduleName] ? Object.keys(map[moduleName]) : [])
					.map(function(parent) {
						// module names might confuse people
						return "\t\t - " + loads[parent].address;
					})
					.join("\n");
				})
				.join("\n\n");

			warn([
				"The module with address " + load.address +
					" is being instantiated twice.",
				"This happens when module identifiers normalize to different module names.\n",
				"Modules:\n" + (parents || "") + "\n",
				"HINT: Import the module using the ~/[modulePath] identifier.\n" +
				"Learn more at https://stealjs.com/docs/moduleName.html and " +
					"https://stealjs.com/docs/tilde.html"
			].join("\n"));
		} else {
			instantiated[load.address] = [load.name];
		}

		return superInstantiate.apply(loader, arguments);
	};
});

addStealExtension(function applyTraceExtension(loader) {
	if(loader._extensions) {
		loader._extensions.push(applyTraceExtension);
	}

	loader._traceData = {
		loads: {},
		parentMap: {}
	};

	loader.getDependencies = function(moduleName){
		var load = this.getModuleLoad(moduleName);
		return load ? load.metadata.dependencies : undefined;
	};
	loader.getDependants = function(moduleName){
		var deps = [];
		var pars = this._traceData.parentMap[moduleName] || {};
		eachOf(pars, function(name) { deps.push(name); });
		return deps;
	};
	loader.getModuleLoad = function(moduleName){
		return this._traceData.loads[moduleName];
	};
	loader.getBundles = function(moduleName, argVisited){
		var visited = argVisited || {};
		visited[moduleName] = true;
		var loader = this;
		var parentMap = loader._traceData.parentMap;
		var parents = parentMap[moduleName];
		if(!parents) return [moduleName];

		var bundles = [];
		eachOf(parents, function(parentName, value){
			if(!visited[parentName])
				bundles = bundles.concat(loader.getBundles(parentName, visited));
		});
		return bundles;
	};
	loader._allowModuleExecution = {};
	loader.allowModuleExecution = function(name){
		var loader = this;
		return loader.normalize(name).then(function(name){
			loader._allowModuleExecution[name] = true;
		});
	};

	function eachOf(obj, callback){
		var name, val;
		for(name in obj) {
			callback(name, obj[name]);
		}
	}

	var normalize = loader.normalize;
	loader.normalize = function(name, parentName){
		var normalizePromise = normalize.apply(this, arguments);

		if(parentName) {
			var parentMap = this._traceData.parentMap;
			return normalizePromise.then(function(name){
				if(!parentMap[name]) {
					parentMap[name] = {};
				}
				parentMap[name][parentName] = true;
				return name;
			});
		}

		return normalizePromise;
	};

	var emptyExecute = function(){
		return loader.newModule({});
	};

	var passThroughModules = {
		traceur: true,
		babel: true
	};
	var isAllowedToExecute = function(load){
		return passThroughModules[load.name] || this._allowModuleExecution[load.name];
	};

	var map = [].map || function(callback){
		var res = [];
		for(var i = 0, len = this.length; i < len; i++) {
			res.push(callback(this[i]));
		}
		return res;
	};

	var esImportDepsExp = /import [\s\S]*?["'](.+)["']/g;
	var esExportDepsExp = /export .+ from ["'](.+)["']/g;
	var commentRegEx = /(?:(?:^|\s)\/\/(.+?)$)|(?:\/\*([\S\s]*?)\*\/)/gm;
	var stringRegEx = /(?:("|')[^\1\\\n\r]*(?:\\.[^\1\\\n\r]*)*\1|`[^`]*`)/g;

	function getESDeps(source) {
		var cleanSource = source.replace(commentRegEx, "");

		esImportDepsExp.lastIndex = commentRegEx.lastIndex =
			esExportDepsExp.lastIndex = stringRegEx.lastIndex = 0;

		var match;
		var deps = [];
		var stringLocations = []; // track string for unminified source

		function inLocation(locations, match) {
		  for (var i = 0; i < locations.length; i++)
			if (locations[i][0] < match.index && locations[i][1] > match.index)
			  return true;
		  return false;
		}

		function addDeps(exp) {
			while (match = exp.exec(cleanSource)) {
			  // ensure we're not within a string location
			  if (!inLocation(stringLocations, match)) {
				var dep = match[1];
				deps.push(dep);
			  }
			}
		}

		if (source.length / source.split('\n').length < 200) {
		  while (match = stringRegEx.exec(cleanSource))
			stringLocations.push([match.index, match.index + match[0].length]);
		}

		addDeps(esImportDepsExp);
		addDeps(esExportDepsExp);

		return deps;
	}

	var instantiate = loader.instantiate;
	loader.instantiate = function(load){
		this._traceData.loads[load.name] = load;
		var loader = this;
		var instantiatePromise = Promise.resolve(instantiate.apply(this, arguments));

		function finalizeResult(result){
			var preventExecution = loader.preventModuleExecution &&
				!isAllowedToExecute.call(loader, load);

			// deps either comes from the instantiate result, or if an
			// es6 module it was found in the transpile hook.
			var deps = result ? result.deps : load.metadata.deps;

			return Promise.all(map.call(deps, function(depName){
				return loader.normalize(depName, load.name);
			})).then(function(dependencies){
				load.metadata.deps = deps;
				load.metadata.dependencies = dependencies;

				if(preventExecution) {
					return {
						deps: deps,
						execute: emptyExecute
					};
				}

				return result;

			});
		}

		return instantiatePromise.then(function(result){
			// This must be es6
			if(!result) {
				var deps = getESDeps(load.source);
				load.metadata.deps = deps;
			}
			return finalizeResult(result);
		});
	};

	var transpile = loader.transpile;
	// Allow transpile to be memoized, but only once
	loader.transpile = function(load){
		var transpiled = load.metadata.transpiledSource;
		if(transpiled) {
			delete load.metadata.transpiledSource;
			return Promise.resolve(transpiled);
		}
		return transpile.apply(this, arguments);
	};

	loader.eachModule = function(cb){
		for (var moduleName in this._loader.modules) {
			cb.call(this, moduleName, this.get(moduleName));
		}
	};
});

// Steal JSON Format
// Provides the JSON module format definition.
addStealExtension(function (loader) {
  var jsonExt = /\.json$/i;
  var jsExt = /\.js$/i;

  // taken from prototypejs
  // https://github.com/sstephenson/prototype/blob/master/src/prototype/lang/string.js#L682-L706
  function isJSON(json) {
	var str = json;
    if (!str) return false;

    str = str.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@');
    str = str.replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']');
    str = str.replace(/(?:^|:|,)(?:\s*\[)+/g, '');
    return (/^[\],:{}\s]*$/).test(str);
  }

  // if someone has a moduleName that is .json, make sure it loads a json file
  // no matter what paths might do
  var loaderLocate = loader.locate;
  loader.locate = function(load){
    return loaderLocate.apply(this, arguments).then(function(address){
      if(jsonExt.test(load.name)) {
        return address.replace(jsExt, "");
      }

      return address;
    });
  };

  var transform = function(loader, load, data){
    var fn = loader.jsonOptions && loader.jsonOptions.transform;
    if(!fn) return data;
    return fn.call(loader, load, data);
  };

  // If we are in a build we should convert to CommonJS instead.
  if(isNode) {
    var loaderTranslate = loader.translate;
    loader.translate = function(load){
      var address = load.metadata.address || load.address;
      if(jsonExt.test(address) && load.name.indexOf('!') === -1) {
        var parsed = parse(load);
        if(parsed) {
          parsed = transform(this, load, parsed);
          return "def" + "ine([], function(){\n" +
            "\treturn " + JSON.stringify(parsed) + "\n});";
        }
      }

      return loaderTranslate.call(this, load);
    };
    return;
  }

  var loaderInstantiate = loader.instantiate;
  loader.instantiate = function(load) {
    var loader = this,
      parsed;

    parsed = parse(load);
    if(parsed) {
      parsed = transform(loader, load, parsed);
      load.metadata.format = 'json';

      load.metadata.execute = function(){
        return parsed;
      };
    }

    return loaderInstantiate.call(loader, load);
  };

  return loader;

  // Attempt to parse a load as json.
  function parse(load){
    if ((load.metadata.format === 'json' || !load.metadata.format) && isJSON(load.source)) {
      try {
        return JSON.parse(load.source);
      } catch(e) {
        warn("Error parsing " + load.address + ":", e);
        return {};
      }
    }

  }
});

// Steal Cache-Bust Extension
// if enabled, Steal Cache-Bust will add a
// cacheKey and cacheVersion to the required file address
addStealExtension(function (loader) {
	var fetch = loader.fetch;

	loader.fetch = function(load) {
		var loader = this;

		if(loader.isEnv("production") && loader.cacheVersion) {
			var cacheVersion = loader.cacheVersion,
				cacheKey = loader.cacheKey || "version",
				cacheKeyVersion = cacheKey + "=" + cacheVersion;

			load.address = load.address + (load.address.indexOf('?') === -1 ? '?' : '&') + cacheKeyVersion;
		}
		return fetch.call(this, load);
	};
});
	// Overwrites System.config with setter hooks
	var setterConfig = function(loader, configOrder, configSpecial){
		var oldConfig = loader.config;

		loader.config =  function(cfg){

			var data = extend({},cfg);
			// check each special
			each(configOrder, function(name){
				var special = configSpecial[name];
				// if there is a setter and a value
				if(special.set && data[name]){
					// call the setter
					var res = special.set.call(loader,data[name], cfg);
					// if the setter returns a value
					if(res !== undefined) {
						// set that on the loader
						loader[name] = res;
					}
					// delete the property b/c setting is done
					delete data[name];
				}
			});
			oldConfig.call(this, data);
		};
	};

	var setIfNotPresent = function(obj, prop, value){
		if(!obj[prop]) {
			obj[prop] = value;
		}
	};

	// steal.js's default configuration values
	System.configMain = "@config";
	System.devBundle = "@empty";
	System.depsBundle = "@empty";
	System.paths[System.configMain] = "stealconfig.js";
	System.env = (isWebWorker ? "worker" : "window") + "-development";
	System.ext = Object.create(null);
	System.logLevel = 0;
	var cssBundlesNameGlob = "bundles/*.css",
		jsBundlesNameGlob = "bundles/*";
	setIfNotPresent(System.paths,cssBundlesNameGlob, "dist/bundles/*css");
	setIfNotPresent(System.paths,jsBundlesNameGlob, "dist/bundles/*.js");

	var configSetter = function(order){
		return {
			order: order,
			set: function(val){
				var name = filename(val),
					root = dir(val);

				if(!isNode) {
					System.configPath = joinURIs( location.href, val);
				}
				System.configMain = name;
				System.paths[name] = name;
				this.config({ baseURL: (root === val ? "." : root) + "/" });
			}
		}
	},
		valueSetter = function(prop, order) {
			return {
				order: order,
				set: function(val) {
					this[prop] = val;
				}
			}
		},
		booleanSetter = function(prop, order) {
			return {
				order: order,
				set: function(val) {
					this[prop] = !!val;
				}
			}
		},
		fileSetter = function(prop, order) {
			return {
				order: order,
				set: function(val) {
					this[prop] = envPath(val);
				}
			};
		};

	// checks if we're running in node, then prepends the "file:" protocol if we are
	var envPath = function(pathVal) {
		var val = pathVal;
		if(isNode && !/^file:/.test(val)) {
			// If relative join with the current working directory
			if(val[0] === "." && (val[1] === "/" ||
								 (val[1] === "." && val[2] === "/"))) {
				val = require("path").join(process.cwd(), val);
			}
			if(!val) return val;

			return "file:" + val;
		}
		return val;
	};

	var setToSystem = function(prop){
		return {
			set: function(val){
				if(typeof val === "object" && typeof steal.System[prop] === "object") {
					this[prop] = extend(this[prop] || {},val || {});
				} else {
					this[prop] = val;
				}
			}
		};
	};

	var pluginPart = function(name) {
		var bang = name.lastIndexOf("!");
		if(bang !== -1) {
			return name.substr(bang+1);
		}
	};

	var pluginResource = function(name){
		var bang = name.lastIndexOf("!");
		if(bang !== -1) {
			return name.substr(0, bang);
		}
	};

	var addProductionBundles = function(){
		// we don't want add the main bundled module if steal is bundled inside!
		if(this.loadBundles && this.main && !this.stealBundled) {
			var main = this.main,
				bundlesDir = this.bundlesName || "bundles/",
				mainBundleName = bundlesDir+main;

			setIfNotPresent(this.meta, mainBundleName, {format:"amd"});

			// If the configMain has a plugin like package.json!npm,
			// plugin has to be defined prior to importing.
			var plugin = pluginPart(System.configMain);
			var bundle = [main, System.configMain];
			if(plugin){
				System.set(plugin, System.newModule({}));
			}
			plugin = pluginPart(main);
			if(plugin) {
				var resource = pluginResource(main);
				bundle.push(plugin);
				bundle.push(resource);

				mainBundleName = bundlesDir+resource.substr(0, resource.indexOf("."));
			}

			this.bundles[mainBundleName] = bundle;
		}
	};

	var setEnvsConfig = function(){
		if(this.envs) {
			var envConfig = this.envs[this.env];
			if(envConfig) {
				this.config(envConfig);
			}
		}
	};

	var setupLiveReload = function(){
		if(this.liveReloadInstalled) {
			var loader = this;
			this["import"]("live-reload", {
				name: "@@steal"
			}).then(function(reload){
				reload(loader.configMain, function(){
					setEnvsConfig.call(loader);
				});
			});
		}
	};

	var specialConfigOrder = [];
	var envsSpecial = { map: true, paths: true, meta: true };
	var specialConfig = {
		instantiated: {
			order: 1,
			set: function(val){
				var loader = this;

				each(val || {}, function(value, name){
					loader.set(name,  loader.newModule(value));
				});
			}
		},
		envs: {
			order: 2,
			set: function(val){
				// envs should be set, deep
				var envs = this.envs;
				if(!envs) envs = this.envs = {};
				each(val, function(cfg, name){
					var env = envs[name];
					if(!env) env = envs[name] = {};

					each(cfg, function(val, name){
						if(envsSpecial[name] && env[name]) {
							extend(env[name], val);
						} else {
							env[name] = val;
						}
					});
				});
			}
		},
		env: {
			order: 3,
			set: function(val){
				this.env = val;

				if(this.isEnv("production")) {
					this.loadBundles = true;
				}
			}
		},
		loadBundles: booleanSetter("loadBundles", 4),
		stealBundled: booleanSetter("stealBundled", 5),
		// System.config does not like being passed arrays.
		bundle: {
			order: 6,
			set: function(val){
				System.bundle = val;
			}
		},
		bundlesPath: {
			order: 7,
			set: function(val){
				this.paths[cssBundlesNameGlob] = val+"/*css";
				this.paths[jsBundlesNameGlob]  = val+"/*.js";
				return val;
			}
		},
		meta: {
			order: 8,
			set: function(cfg){
				var loader = this;
				each(cfg || {}, function(value, name){
					if(typeof value !== "object") {
						return;
					}
					var cur = loader.meta[name];
					if(cur && cur.format === value.format) {
						// Keep the deps, if we have any
						var deps = value.deps;
						extend(value, cur);
						if(deps) {
							value.deps = deps;
						}
					}
				});
				extend(this.meta, cfg);
			}
		},
		configMain: valueSetter("configMain", 9),
		config: configSetter(10),
		configPath: configSetter(11),
		baseURL: fileSetter("baseURL", 12),
		main: valueSetter("main", 13),
		// this gets called with the __dirname steal is in
		// directly called from steal-tools
		stealPath: {
			order: 14,
			set: function(identifier, cfg) {
				var dirname = envPath(identifier);
				var parts = dirname.split("/");

				// steal keeps this around to make things easy no matter how you are using it.
				setIfNotPresent(this.paths,"@dev", dirname+"/ext/dev.js");
				setIfNotPresent(this.paths,"npm", dirname+"/ext/npm.js");
				setIfNotPresent(this.paths,"npm-extension", dirname+"/ext/npm-extension.js");
				setIfNotPresent(this.paths,"npm-utils", dirname+"/ext/npm-utils.js");
				setIfNotPresent(this.paths,"npm-crawl", dirname+"/ext/npm-crawl.js");
				setIfNotPresent(this.paths,"npm-load", dirname+"/ext/npm-load.js");
				setIfNotPresent(this.paths,"npm-convert", dirname+"/ext/npm-convert.js");
				setIfNotPresent(this.paths,"semver", dirname+"/ext/semver.js");
				setIfNotPresent(this.paths,"bower", dirname+"/ext/bower.js");
				setIfNotPresent(this.paths,"live-reload", dirname+"/ext/live-reload.js");
				setIfNotPresent(this.paths,"steal-clone", dirname+"/ext/steal-clone.js");
				this.paths["traceur"] = dirname+"/ext/traceur.js";
				this.paths["traceur-runtime"] = dirname+"/ext/traceur-runtime.js";
				this.paths["babel"] = dirname+"/ext/babel.js";
				this.paths["babel-runtime"] = dirname+"/ext/babel-runtime.js";
				setIfNotPresent(this.meta,"traceur",{"exports":"traceur"});

				// steal-clone is contextual so it can override modules using relative paths
				this.setContextual('steal-clone', 'steal-clone');

				if(isNode) {
					if(this.configMain === "@config" && last(parts) === "steal") {
						parts.pop();
						if(last(parts) === "node_modules") {
							this.configMain = "package.json!npm";
							parts.pop();
						}
					}
					if(this.isEnv("production") || this.loadBundles) {
						addProductionBundles.call(this);
					}
				} else {
					// make sure we don't set baseURL if it already set
					if(!cfg.baseURL && !cfg.config && !cfg.configPath) {

						// if we loading steal.js and it is located in node_modules or bower_components
						// we rewrite the baseURL relative to steal.js (one directory up!)
						// we do this because, normaly our app is located as a sibling folder to
						// node_modules or bower_components
						if ( last(parts) === "steal" ) {
							parts.pop();
							var isFromPackage = false;
							if ( last(parts) === cfg.bowerPath || last(parts) === "bower_components" ) {
								System.configMain = "bower.json!bower";
								addProductionBundles.call(this);
								parts.pop();
								isFromPackage = true;
							}
							if (last(parts) === "node_modules") {
								System.configMain = "package.json!npm";
								addProductionBundles.call(this);
								parts.pop();
								isFromPackage = true;
							}
							if(!isFromPackage) {
								parts.push("steal");
							}
						}
						this.config({ baseURL: parts.join("/")+"/"});
					}
				}
				System.stealPath = dirname;
			}
		},
		stealURL: {
			order: 15,
			// http://domain.com/steal/steal.js?moduleName,env&
			set: function(url, cfg)	{
				var urlParts = url.split("?"),
					path = urlParts.shift(),
					paths = path.split("/"),
					lastPart = paths.pop(),
					stealPath = paths.join("/"),
					platform = this.getPlatform() || (isWebWorker ? "worker" : "window");

				System.stealURL = path;

				// if steal is bundled or we are loading steal.production
				// we always are in production environment
				if((this.stealBundled && this.stealBundled === true) ||
					((lastPart.indexOf("steal.production") > -1) ||
						(lastPart.indexOf("steal-sans-promises.production") > -1)
					 	&& !cfg.env)) {
					this.config({ env: platform+"-production" });
				}

				if(this.isEnv("production") || this.loadBundles) {
					addProductionBundles.call(this);
				}

				specialConfig.stealPath.set.call(this,stealPath, cfg);

			}
		},
		devBundle: {
			order: 16,

			set: function(dirname, cfg) {
				var path = (dirname === true) ? "dev-bundle" : dirname;

				if (path) {
					this.devBundle = path;
				}
			}
		},
		depsBundle: {
			order: 17,

			set: function(dirname, cfg) {
				var path = (dirname === true) ? "dev-bundle" : dirname;

				if (path) {
					this.depsBundle = path;
				}
			}
		}
	};

	/*
	 make a setter order
	 currently:

	 instantiated
	 envs
	 env
	 loadBundles
	 stealBundled
	 bundle
	 bundlesPath
	 meta
	 config
	 configPath
	 baseURL
	 main
	 stealPath
	 stealURL
	 */
	each(specialConfig, function(setter, name){
		if(!setter.order) {
			specialConfigOrder.push(name)
		}else{
			specialConfigOrder.splice(setter.order, 0, name);
		}
	});

	// special setter config
	setterConfig(System, specialConfigOrder, specialConfig);

	steal.config = function(cfg){
		if(typeof cfg === "string") {
			return this.loader[cfg];
		} else {
			this.loader.config(cfg);
		}
	};

// Steal Env Extension
// adds some special environment functions to the loader
addStealExtension(function (loader) {

	loader.getEnv = function(){
		var envParts = (this.env || "").split("-");
		// Fallback to this.env for legacy
		return envParts[1] || this.env;
	};

	loader.getPlatform = function(){
		var envParts = (this.env || "").split("-");
		return envParts.length === 2 ? envParts[0] : undefined;
	};

	loader.isEnv = function(name){
		return this.getEnv() === name;
	};

	loader.isPlatform = function(name){
		return this.getPlatform() === name;
	};
});
	// get config by the URL query
	// like ?main=foo&env=production
	// formally used for Webworkers
	var getQueryOptions = function(url) {
		var queryOptions = {},
			urlRegEx = /Url$/,
			urlParts = url.split("?"),
			path = urlParts.shift(),
			search = urlParts.join("?"),
			searchParts = search.split("&"),
			paths = path.split("/"),
			lastPart = paths.pop(),
			stealPath = paths.join("/");

		if(searchParts.length && searchParts[0].length) {
				var searchPart;
			for(var i =0; i < searchParts.length; i++) {
				searchPart = searchParts[i];
				var paramParts = searchPart.split("=");
				if(paramParts.length > 1) {
					var optionName = camelize(paramParts[0]);
					// make options uniform e.g. baseUrl => baseURL
					optionName = optionName.replace(urlRegEx, "URL")
					queryOptions[optionName] = paramParts.slice(1).join("=");
				}
			}
		}
		return queryOptions;
	};

	// extract the script tag options
	var getScriptOptions = function (script) {
		var scriptOptions = {},
			urlRegEx = /Url$/;

		scriptOptions.stealURL = script.src;

		each(script.attributes, function(attr){
			var nodeName = attr.nodeName || attr.name;
			// get option, remove "data" and camelize
			var optionName =
				camelize( nodeName.indexOf("data-") === 0 ?
					nodeName.replace("data-","") :
					nodeName );
			// make options uniform e.g. baseUrl => baseURL
			optionName = optionName.replace(urlRegEx, "URL")
			scriptOptions[optionName] = (attr.value === "") ? true : attr.value;
		});

		// main source within steals script is deprecated
		// and will be removed in future releases
		var source = script.innerHTML;
		if(/\S/.test(source)){
			scriptOptions.mainSource = source;
		}
		// script config ever wins!
		return extend(getQueryOptions(script.src), scriptOptions);
	};

	// get steal URL
	// if we are in a browser, we need to know which script is steal
	// to extract the script tag options => getScriptOptions()
	var getUrlOptions = function (){
		return new Promise(function(resolve, reject){

			// for Workers get options from steal query
			if (isWebWorker) {
				resolve(extend({
					stealURL: location.href
				}, getQueryOptions(location.href)));
				return;
			} else if(isBrowserWithWindow || isNW || isElectron) {
				// if the browser supports currentScript, use it!
				if (document.currentScript) {
					// get options from script tag and query
					resolve(getScriptOptions(document.currentScript));
					return;
				}
				// assume the last script on the page is the one loading steal.js
				else {
					var scripts = document.scripts;

					if (scripts.length) {
						resolve(getScriptOptions(scripts[scripts.length - 1]));
					}
				}
			} else {
				// or the only option is where steal is.
				resolve({
					stealPath: __dirname
				});
			}
		})
	};

	// configure and startup steal
	// load the main module(s) if everything is configured
	steal.startup = function(startupConfig){
		var steal = this;
		var loader = this.loader;
		var configResolve;
		var configReject;

		configPromise = new Promise(function(resolve, reject){
			configResolve = resolve;
			configReject = reject;
		});

		appPromise = getUrlOptions().then(function(urlOptions) {
			var config;

			if (typeof startupConfig === 'object') {
				// the url options are the source of truth
				config = extend(startupConfig, urlOptions);
			} else {
				config = urlOptions;
			}

			// set the config
			loader.config(config);

			setEnvsConfig.call(loader);

			// we only load things with force = true
			if (loader.loadBundles) {

				if (!loader.main && loader.isEnv("production") &&
					!loader.stealBundled) {
					// prevent this warning from being removed by Uglify
					warn("Attribute 'main' is required in production environment. Please add it to the script tag.");
				}

				loader["import"](loader.configMain)
				.then(configResolve, configReject);

				return configPromise.then(function (cfg) {
					setEnvsConfig.call(loader);
					return loader.main ? loader["import"](loader.main) : cfg;
				});

			} else {
				// devBundle includes the same modules as "depsBundle and it also
				// includes the @config graph, so it should be loaded before of
				// configMain
				loader["import"](loader.devBundle)
					.then(function() {
						return loader["import"](loader.configMain);
					})
					.then(function() {
						// depsBundle includes the dependencies in the node_modules
						// folder so it has to be loaded after configMain finished
						// loading
						return loader["import"](loader.depsBundle);
					})
					.then(configResolve, configReject);

				devPromise = configPromise.then(function () {
					setEnvsConfig.call(loader);
					setupLiveReload.call(loader);

					// If a configuration was passed to startup we'll use that to overwrite
					// what was loaded in stealconfig.js
					// This means we call it twice, but that's ok
					if (config) {
						loader.config(config);
					}

					return loader["import"]("@dev");
				});

				return devPromise.then(function () {
					// if there's a main, get it, otherwise, we are just loading
					// the config.
					if (!loader.main || loader.localLoader) {
						return configPromise;
					}
					var main = loader.main;
					if (typeof main === "string") {
						main = [main];
					}
					return Promise.all(map(main, function (main) {
						return loader["import"](main);
					}));
				});
			}
		}).then(function(main){
			if(loader.mainSource) {
				return loader.module(loader.mainSource);
			}

			// load script modules they are tagged as
			// text/steal-module
			loader.loadScriptModules();

			return main;
		});

		return appPromise;
	};
	steal.done = function(){
		return appPromise;
	};

	steal["import"] = function(){
		var names = arguments;
		var loader = this.System;

		function afterConfig(){
			var imports = [];
			each(names, function(name){
				imports.push(loader["import"](name));
			});
			if(imports.length > 1) {
				return Promise.all(imports);
			} else {
				return imports[0];
			}
		}

		if(!configPromise) {
			// In Node a main isn't required, but we still want
			// to call startup() to do autoconfiguration,
			// so setting to empty allows this to work.
			if(!loader.main) {
				loader.main = "@empty";
			}
			steal.startup();
		}

		return configPromise.then(afterConfig);
	};
	steal.setContextual = fBind.call(System.setContextual, System);
	steal.isEnv = fBind.call(System.isEnv, System);
	steal.isPlatform = fBind.call(System.isPlatform, System);
	return steal;

};
	if( isNode && !isNW && !isElectron ) {

		global.steal = makeSteal(System);
		global.steal.System = System;
		global.steal.dev = require("./ext/dev.js");
		steal.clone = cloneSteal;
		module.exports = global.steal;

	} else {
		var oldSteal = global.steal;
		global.steal = makeSteal(System);
		global.steal.startup(oldSteal && typeof oldSteal == 'object' && oldSteal)
			.then(null, function(error){
				if(typeof console !== "undefined") {
					// Hide from uglify
					var c = console;
					var type = c.error ? "error" : "log";
					c[type](error);
				}
			});
		global.steal.clone = cloneSteal;
	}

})(typeof window == "undefined" ? (typeof global === "undefined" ? this : global) : window);

/*[add-define]*/
((typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) ? self : window).define = System.amdDefine;
/*[system-bundles-config]*/
System.bundles = {};
/*npm-utils*/
define('npm-utils', function (require, exports, module) {
    (function (global, require, exports, module) {
        var slice = Array.prototype.slice;
        var npmModuleRegEx = /.+@.+\..+\..+#.+/;
        var conditionalModuleRegEx = /#\{[^\}]+\}|#\?.+$/;
        var gitUrlEx = /(git|http(s?)):\/\//;
        var supportsSet = typeof Set === 'function';
        var utils = {
            extend: function (d, s, deep, existingSet) {
                var val;
                var set = existingSet;
                if (deep) {
                    if (!set) {
                        if (supportsSet) {
                            set = new Set();
                        } else {
                            set = [];
                        }
                    }
                    if (supportsSet) {
                        if (set.has(s)) {
                            return s;
                        } else {
                            set.add(s);
                        }
                    } else {
                        if (set.indexOf(s) !== -1) {
                            return s;
                        } else {
                            set.push(s);
                        }
                    }
                }
                for (var prop in s) {
                    val = s[prop];
                    if (deep) {
                        if (utils.isArray(val)) {
                            d[prop] = slice.call(val);
                        } else if (utils.isPlainObject(val)) {
                            d[prop] = utils.extend({}, val, deep, set);
                        } else {
                            d[prop] = s[prop];
                        }
                    } else {
                        d[prop] = s[prop];
                    }
                }
                return d;
            },
            map: function (arr, fn) {
                var i = 0, len = arr.length, out = [];
                for (; i < len; i++) {
                    out.push(fn.call(arr, arr[i]));
                }
                return out;
            },
            filter: function (arr, fn) {
                var i = 0, len = arr.length, out = [], res;
                for (; i < len; i++) {
                    res = fn.call(arr, arr[i]);
                    if (res) {
                        out.push(arr[i]);
                    }
                }
                return out;
            },
            forEach: function (arr, fn) {
                var i = 0, len = arr.length;
                for (; i < len; i++) {
                    fn.call(arr, arr[i], i);
                }
            },
            isObject: function (obj) {
                return typeof obj === 'object';
            },
            isPlainObject: function (obj) {
                return utils.isObject(obj) && (!obj || obj.__proto__ === Object.prototype);
            },
            isArray: Array.isArray || function (arr) {
                return Object.prototype.toString.call(arr) === '[object Array]';
            },
            isEnv: function (name) {
                return this.isEnv ? this.isEnv(name) : this.env === name;
            },
            isGitUrl: function (str) {
                return gitUrlEx.test(str);
            },
            warnOnce: function (msg) {
                var w = this._warnings = this._warnings || {};
                if (w[msg])
                    return;
                w[msg] = true;
                this.warn(msg);
            },
            warn: function (msg) {
                if (typeof steal !== 'undefined' && typeof console !== 'undefined' && console.warn) {
                    steal.done().then(function () {
                        if (steal.dev && steal.dev.warn) {
                        } else if (console.warn) {
                            console.warn('steal.js WARNING: ' + msg);
                        } else {
                            console.log(msg);
                        }
                    });
                }
            },
            relativeURI: function (baseURL, url) {
                return typeof steal !== 'undefined' ? steal.relativeURI(baseURL, url) : url;
            },
            moduleName: {
                create: function (descriptor, standard) {
                    if (standard) {
                        return descriptor.moduleName;
                    } else {
                        if (descriptor === '@empty') {
                            return descriptor;
                        }
                        var modulePath;
                        if (descriptor.modulePath) {
                            modulePath = descriptor.modulePath.substr(0, 2) === './' ? descriptor.modulePath.substr(2) : descriptor.modulePath;
                        }
                        return descriptor.packageName + (descriptor.version ? '@' + descriptor.version : '') + (modulePath ? '#' + modulePath : '') + (descriptor.plugin ? descriptor.plugin : '');
                    }
                },
                isNpm: function (moduleName) {
                    return npmModuleRegEx.test(moduleName);
                },
                isConditional: function (moduleName) {
                    return conditionalModuleRegEx.test(moduleName);
                },
                isFullyConvertedNpm: function (parsedModuleName) {
                    return !!(parsedModuleName.packageName && parsedModuleName.version && parsedModuleName.modulePath);
                },
                isScoped: function (moduleName) {
                    return moduleName[0] === '@';
                },
                parse: function (moduleName, currentPackageName, global, context) {
                    var pluginParts = moduleName.split('!');
                    var modulePathParts = pluginParts[0].split('#');
                    var versionParts = modulePathParts[0].split('@');
                    if (!modulePathParts[1] && !versionParts[0]) {
                        versionParts = ['@' + versionParts[1]];
                    }
                    if (versionParts.length === 3 && utils.moduleName.isScoped(moduleName)) {
                        versionParts.splice(0, 1);
                        versionParts[0] = '@' + versionParts[0];
                    }
                    var packageName, modulePath;
                    if (currentPackageName && utils.path.isRelative(moduleName)) {
                        packageName = currentPackageName;
                        modulePath = versionParts[0];
                    } else if (currentPackageName && utils.path.isInHomeDir(moduleName, context)) {
                        packageName = currentPackageName;
                        modulePath = versionParts[0].split('/').slice(1).join('/');
                    } else {
                        if (modulePathParts[1]) {
                            packageName = versionParts[0];
                            modulePath = modulePathParts[1];
                        } else {
                            var folderParts = versionParts[0].split('/');
                            if (folderParts.length && folderParts[0][0] === '@') {
                                packageName = folderParts.splice(0, 2).join('/');
                            } else {
                                packageName = folderParts.shift();
                            }
                            modulePath = folderParts.join('/');
                        }
                    }
                    modulePath = utils.path.removeJS(modulePath);
                    return {
                        plugin: pluginParts.length === 2 ? '!' + pluginParts[1] : undefined,
                        version: versionParts[1],
                        modulePath: modulePath,
                        packageName: packageName,
                        moduleName: moduleName,
                        isGlobal: global
                    };
                },
                parseFromPackage: function (loader, refPkg, name, parentName) {
                    var packageName = utils.pkg.name(refPkg), parsedModuleName = utils.moduleName.parse(name, packageName, undefined, { loader: loader }), isRelative = utils.path.isRelative(parsedModuleName.modulePath);
                    if (isRelative && !parentName) {
                        throw new Error('Cannot resolve a relative module identifier ' + 'with no parent module:', name);
                    }
                    if (isRelative) {
                        var parentParsed = utils.moduleName.parse(parentName, packageName);
                        if (parentParsed.packageName === parsedModuleName.packageName && parentParsed.modulePath) {
                            var makePathRelative = true;
                            if (name === '../' || name === './' || name === '..') {
                                var relativePath = utils.path.relativeTo(parentParsed.modulePath, name);
                                var isInRoot = utils.path.isPackageRootDir(relativePath);
                                if (isInRoot) {
                                    parsedModuleName.modulePath = utils.pkg.main(refPkg);
                                    makePathRelative = false;
                                } else {
                                    parsedModuleName.modulePath = name + (utils.path.endsWithSlash(name) ? '' : '/') + 'index';
                                }
                            }
                            if (makePathRelative) {
                                parsedModuleName.modulePath = utils.path.makeRelative(utils.path.joinURIs(parentParsed.modulePath, parsedModuleName.modulePath));
                            }
                        }
                    }
                    var mapName = utils.moduleName.create(parsedModuleName), refSteal = utils.pkg.config(refPkg), mappedName;
                    if (refPkg.browser && typeof refPkg.browser !== 'string' && mapName in refPkg.browser && (!refSteal || !refSteal.ignoreBrowser)) {
                        mappedName = refPkg.browser[mapName] === false ? '@empty' : refPkg.browser[mapName];
                    }
                    var global = loader && loader.globalBrowser && loader.globalBrowser[mapName];
                    if (global) {
                        mappedName = global.moduleName === false ? '@empty' : global.moduleName;
                    }
                    if (mappedName) {
                        return utils.moduleName.parse(mappedName, packageName, !!global);
                    } else {
                        return parsedModuleName;
                    }
                },
                nameAndVersion: function (parsedModuleName) {
                    return parsedModuleName.packageName + '@' + parsedModuleName.version;
                },
                isBareIdentifier: function (identifier) {
                    return identifier && identifier[0] !== '.' && identifier[0] !== '@';
                }
            },
            pkg: {
                name: function (pkg) {
                    var steal = utils.pkg.config(pkg);
                    return steal && steal.name || pkg.name;
                },
                main: function (pkg) {
                    var main;
                    var steal = utils.pkg.config(pkg);
                    if (steal && steal.main) {
                        main = steal.main;
                    } else if (typeof pkg.browser === 'string') {
                        if (utils.path.endsWithSlash(pkg.browser)) {
                            main = pkg.browser + 'index';
                        } else {
                            main = pkg.browser;
                        }
                    } else if (typeof pkg.jam === 'object' && pkg.jam.main) {
                        main = pkg.jam.main;
                    } else if (pkg.main) {
                        main = pkg.main;
                    } else {
                        main = 'index';
                    }
                    return utils.path.removeJS(utils.path.removeDotSlash(main));
                },
                rootDir: function (pkg, isRoot) {
                    var root = isRoot ? utils.path.removePackage(pkg.fileUrl) : utils.path.pkgDir(pkg.fileUrl);
                    var lib = utils.pkg.directoriesLib(pkg);
                    if (lib) {
                        root = utils.path.joinURIs(utils.path.addEndingSlash(root), lib);
                    }
                    return root;
                },
                isRoot: function (loader, pkg) {
                    var root = utils.pkg.getDefault(loader);
                    return pkg.name === root.name && pkg.version === root.version;
                },
                homeAlias: function (context) {
                    return context && context.loader && context.loader.homeAlias || '~';
                },
                getDefault: function (loader) {
                    return loader.npmPaths.__default;
                },
                findByModuleNameOrAddress: function (loader, moduleName, moduleAddress) {
                    if (loader.npm) {
                        if (moduleName) {
                            var parsed = utils.moduleName.parse(moduleName);
                            if (parsed.version && parsed.packageName) {
                                var name = parsed.packageName + '@' + parsed.version;
                                if (name in loader.npm) {
                                    return loader.npm[name];
                                }
                            }
                        }
                        if (moduleAddress) {
                            var startingAddress = utils.relativeURI(loader.baseURL, moduleAddress);
                            var packageFolder = utils.pkg.folderAddress(startingAddress);
                            return packageFolder ? loader.npmPaths[packageFolder] : utils.pkg.getDefault(loader);
                        } else {
                            return utils.pkg.getDefault(loader);
                        }
                    }
                },
                folderAddress: function (address) {
                    var nodeModules = '/node_modules/', nodeModulesIndex = address.lastIndexOf(nodeModules), nextSlash = address.indexOf('/', nodeModulesIndex + nodeModules.length);
                    if (nodeModulesIndex >= 0) {
                        return nextSlash >= 0 ? address.substr(0, nextSlash) : address;
                    }
                },
                findDep: function (loader, refPkg, name) {
                    if (loader.npm && refPkg && !utils.path.startsWithDotSlash(name)) {
                        var nameAndVersion = name + '@' + refPkg.resolutions[name];
                        var pkg = loader.npm[nameAndVersion];
                        return pkg;
                    }
                },
                findDepWalking: function (loader, refPackage, name) {
                    if (loader.npm && refPackage && !utils.path.startsWithDotSlash(name)) {
                        var curPackage = utils.path.depPackageDir(refPackage.fileUrl, name);
                        while (curPackage) {
                            var pkg = loader.npmPaths[curPackage];
                            if (pkg) {
                                return pkg;
                            }
                            var parentAddress = utils.path.parentNodeModuleAddress(curPackage);
                            if (!parentAddress) {
                                return;
                            }
                            curPackage = parentAddress + '/' + name;
                        }
                    }
                },
                findByName: function (loader, name) {
                    if (loader.npm && !utils.path.startsWithDotSlash(name)) {
                        return loader.npm[name];
                    }
                },
                findByNameAndVersion: function (loader, name, version) {
                    if (loader.npm && !utils.path.startsWithDotSlash(name)) {
                        var nameAndVersion = name + '@' + version;
                        return loader.npm[nameAndVersion];
                    }
                },
                findByUrl: function (loader, url) {
                    if (loader.npm) {
                        var fullUrl = utils.pkg.folderAddress(url);
                        return loader.npmPaths[fullUrl];
                    }
                },
                directoriesLib: function (pkg) {
                    var steal = utils.pkg.config(pkg);
                    var lib = steal && steal.directories && steal.directories.lib;
                    var ignores = [
                            '.',
                            '/'
                        ], ignore;
                    if (!lib)
                        return undefined;
                    while (!!(ignore = ignores.shift())) {
                        if (lib[0] === ignore) {
                            lib = lib.substr(1);
                        }
                    }
                    return lib;
                },
                hasDirectoriesLib: function (pkg) {
                    var steal = utils.pkg.config(pkg);
                    return steal && steal.directories && !!steal.directories.lib;
                },
                findPackageInfo: function (context, pkg) {
                    var pkgInfo = context.pkgInfo;
                    if (pkgInfo) {
                        var out;
                        utils.forEach(pkgInfo, function (p) {
                            if (pkg.name === p.name && pkg.version === p.version) {
                                out = p;
                            }
                        });
                        return out;
                    }
                },
                saveResolution: function (context, refPkg, pkg) {
                    var npmPkg = utils.pkg.findPackageInfo(context, refPkg);
                    npmPkg.resolutions[pkg.name] = refPkg.resolutions[pkg.name] = pkg.version;
                },
                config: function (pkg) {
                    return pkg.steal || pkg.system;
                }
            },
            path: {
                makeRelative: function (path) {
                    if (utils.path.isRelative(path) && path.substr(0, 1) !== '/') {
                        return path;
                    } else {
                        return './' + path;
                    }
                },
                removeJS: function (path) {
                    return path.replace(/\.js(!|$)/, function (whole, part) {
                        return part;
                    });
                },
                removePackage: function (path) {
                    return path.replace(/\/package\.json.*/, '');
                },
                addJS: function (path) {
                    if (/\.js(on)?$/.test(path)) {
                        return path;
                    } else {
                        return path + '.js';
                    }
                },
                isRelative: function (path) {
                    return path.substr(0, 1) === '.';
                },
                isInHomeDir: function (path, context) {
                    return path.substr(0, 2) === utils.pkg.homeAlias(context) + '/';
                },
                joinURIs: function (baseUri, rel) {
                    function removeDotSegments(input) {
                        var output = [];
                        input.replace(/^(\.\.?(\/|$))+/, '').replace(/\/(\.(\/|$))+/g, '/').replace(/\/\.\.$/, '/../').replace(/\/?[^\/]*/g, function (p) {
                            if (p === '/..') {
                                output.pop();
                            } else {
                                output.push(p);
                            }
                        });
                        return output.join('').replace(/^\//, input.charAt(0) === '/' ? '/' : '');
                    }
                    var href = parseURI(rel || '');
                    var base = parseURI(baseUri || '');
                    return !href || !base ? null : (href.protocol || base.protocol) + (href.protocol || href.authority ? href.authority : base.authority) + removeDotSegments(href.protocol || href.authority || href.pathname.charAt(0) === '/' ? href.pathname : href.pathname ? (base.authority && !base.pathname ? '/' : '') + base.pathname.slice(0, base.pathname.lastIndexOf('/') + 1) + href.pathname : base.pathname) + (href.protocol || href.authority || href.pathname ? href.search : href.search || base.search) + href.hash;
                },
                startsWithDotSlash: function (path) {
                    return path.substr(0, 2) === './';
                },
                removeDotSlash: function (path) {
                    return utils.path.startsWithDotSlash(path) ? path.substr(2) : path;
                },
                endsWithSlash: function (path) {
                    return path[path.length - 1] === '/';
                },
                addEndingSlash: function (path) {
                    return utils.path.endsWithSlash(path) ? path : path + '/';
                },
                depPackage: function (parentPackageAddress, childName) {
                    var packageFolderName = parentPackageAddress.replace(/\/package\.json.*/, '');
                    return (packageFolderName ? packageFolderName + '/' : '') + 'node_modules/' + childName + '/package.json';
                },
                peerPackage: function (parentPackageAddress, childName) {
                    var packageFolderName = parentPackageAddress.replace(/\/package\.json.*/, '');
                    return packageFolderName.substr(0, packageFolderName.lastIndexOf('/')) + '/' + childName + '/package.json';
                },
                depPackageDir: function (parentPackageAddress, childName) {
                    return utils.path.depPackage(parentPackageAddress, childName).replace(/\/package\.json.*/, '');
                },
                peerNodeModuleAddress: function (address) {
                    var nodeModules = '/node_modules/', nodeModulesIndex = address.lastIndexOf(nodeModules);
                    if (nodeModulesIndex >= 0) {
                        return address.substr(0, nodeModulesIndex + nodeModules.length - 1);
                    }
                },
                parentNodeModuleAddress: function (address) {
                    var nodeModules = '/node_modules/', nodeModulesIndex = address.lastIndexOf(nodeModules), prevModulesIndex = address.lastIndexOf(nodeModules, nodeModulesIndex - 1);
                    if (prevModulesIndex >= 0) {
                        return address.substr(0, prevModulesIndex + nodeModules.length - 1);
                    }
                },
                pkgDir: function (address) {
                    var nodeModules = '/node_modules/', nodeModulesIndex = address.lastIndexOf(nodeModules), nextSlash = address.indexOf('/', nodeModulesIndex + nodeModules.length);
                    if (address[nodeModulesIndex + nodeModules.length] === '@') {
                        nextSlash = address.indexOf('/', nextSlash + 1);
                    }
                    if (nodeModulesIndex >= 0) {
                        return nextSlash >= 0 ? address.substr(0, nextSlash) : address;
                    }
                },
                basename: function (address) {
                    var parts = address.split('/');
                    return parts[parts.length - 1];
                },
                relativeTo: function (modulePath, rel) {
                    var parts = modulePath.split('/');
                    var idx = 1;
                    while (rel[idx] === '.') {
                        parts.pop();
                        idx++;
                    }
                    return parts.join('/');
                },
                isPackageRootDir: function (pth) {
                    return pth.indexOf('/') === -1;
                }
            },
            json: {
                transform: function (loader, load, data) {
                    data.steal = utils.pkg.config(data);
                    var fn = loader.jsonOptions && loader.jsonOptions.transform;
                    if (!fn)
                        return data;
                    return fn.call(loader, load, data);
                }
            },
            includeInBuild: true
        };
        function parseURI(url) {
            var m = String(url).replace(/^\s+|\s+$/g, '').match(/^([^:\/?#]+:)?(\/\/(?:[^:@\/]*(?::[^:@\/]*)?@)?(([^:\/?#]*)(?::(\d*))?))?([^?#]*)(\?[^#]*)?(#[\s\S]*)?/);
            return m ? {
                href: m[0] || '',
                protocol: m[1] || '',
                authority: m[2] || '',
                host: m[3] || '',
                hostname: m[4] || '',
                port: m[5] || '',
                pathname: m[6] || '',
                search: m[7] || '',
                hash: m[8] || ''
            } : null;
        }
        module.exports = utils;
    }(function () {
        return this;
    }(), require, exports, module));
});
/*npm-extension*/
define('npm-extension', [
    'require',
    'exports',
    'module',
    '@steal',
    './npm-utils'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'format cjs';
        var steal = require('@steal');
        var utils = require('./npm-utils');
        exports.includeInBuild = true;
        var isNode = typeof process === 'object' && {}.toString.call(process) === '[object process]';
        var isWorker = typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope;
        var isBrowser = typeof window !== 'undefined' && !isNode && !isWorker;
        exports.addExtension = function (System) {
            if (System._extensions) {
                System._extensions.push(exports.addExtension);
            }
            var oldNormalize = System.normalize;
            System.normalize = function (identifier, parentModuleName, parentAddress, pluginNormalize) {
                var name = identifier;
                var parentName = parentModuleName;
                if (parentName && this.npmParentMap && this.npmParentMap[parentName]) {
                    parentName = this.npmParentMap[parentName];
                }
                var hasNoParent = !parentName;
                var nameIsRelative = utils.path.isRelative(name);
                var parentIsNpmModule = utils.moduleName.isNpm(parentName);
                var identifierEndsWithSlash = utils.path.endsWithSlash(name);
                if (parentName && nameIsRelative && !parentIsNpmModule) {
                    return oldNormalize.call(this, name, parentName, parentAddress, pluginNormalize);
                }
                if (utils.moduleName.isConditional(name)) {
                    return oldNormalize.call(this, name, parentName, parentAddress, pluginNormalize);
                }
                var hasContextualMap = typeof this.map[parentName] === 'object' && this.map[parentName][name];
                if (hasContextualMap) {
                    return oldNormalize.call(this, name, parentName, parentAddress, pluginNormalize);
                }
                var refPkg = utils.pkg.findByModuleNameOrAddress(this, parentName, parentAddress);
                if (!refPkg) {
                    return oldNormalize.call(this, name, parentName, parentAddress, pluginNormalize);
                }
                var isPointingAtParentFolder = name === '../' || name === './';
                if (parentIsNpmModule && isPointingAtParentFolder) {
                    var parsedParentModuleName = utils.moduleName.parse(parentName);
                    var parentModulePath = parsedParentModuleName.modulePath || '';
                    var relativePath = utils.path.relativeTo(parentModulePath, name);
                    var isInRoot = utils.path.isPackageRootDir(relativePath);
                    if (isInRoot) {
                        name = refPkg.name + '#' + utils.path.removeJS(refPkg.main);
                    } else {
                        name = name + 'index';
                    }
                }
                var parsedModuleName = utils.moduleName.parseFromPackage(this, refPkg, name, parentName);
                var isRoot = utils.pkg.isRoot(this, refPkg);
                var parsedPackageNameIsReferringPackage = parsedModuleName.packageName === refPkg.name;
                var isRelativeToParentNpmModule = parentIsNpmModule && nameIsRelative && parsedPackageNameIsReferringPackage;
                var depPkg, wantedPkg;
                if (isRelativeToParentNpmModule) {
                    depPkg = refPkg;
                }
                var context = this.npmContext;
                var crawl = context && context.crawl;
                var isDev = !!crawl;
                if (!depPkg) {
                    if (crawl) {
                        var parentPkg = nameIsRelative ? null : crawl.matchedVersion(context, refPkg.name, refPkg.version);
                        if (parentPkg) {
                            var depMap = crawl.getFullDependencyMap(this, parentPkg, isRoot);
                            wantedPkg = depMap[parsedModuleName.packageName];
                            if (wantedPkg) {
                                var wantedVersion = refPkg.resolutions && refPkg.resolutions[wantedPkg.name] || wantedPkg.version;
                                var foundPkg = crawl.matchedVersion(this.npmContext, wantedPkg.name, wantedVersion);
                                if (foundPkg) {
                                    depPkg = utils.pkg.findByUrl(this, foundPkg.fileUrl);
                                }
                            }
                        }
                    } else {
                        if (isRoot) {
                            depPkg = utils.pkg.findDepWalking(this, refPkg, parsedModuleName.packageName);
                        } else {
                            depPkg = utils.pkg.findDep(this, refPkg, parsedModuleName.packageName);
                        }
                    }
                }
                if (parsedPackageNameIsReferringPackage) {
                    depPkg = utils.pkg.findByNameAndVersion(this, parsedModuleName.packageName, refPkg.version);
                }
                var lookupByName = parsedModuleName.isGlobal || hasNoParent;
                if (!depPkg) {
                    depPkg = utils.pkg.findByName(this, parsedModuleName.packageName);
                }
                var isThePackageWeWant = !isDev || !depPkg || (wantedPkg ? crawl.pkgSatisfies(depPkg, wantedPkg.version) : true);
                if (!isThePackageWeWant) {
                    depPkg = undefined;
                } else if (isDev && depPkg) {
                    utils.pkg.saveResolution(context, refPkg, depPkg);
                }
                if (!depPkg) {
                    var browserPackageName = this.globalBrowser[parsedModuleName.packageName];
                    if (browserPackageName) {
                        parsedModuleName.packageName = browserPackageName.moduleName;
                        depPkg = utils.pkg.findByName(this, parsedModuleName.packageName);
                    }
                }
                if (!depPkg && isRoot && name === refPkg.main && utils.pkg.hasDirectoriesLib(refPkg)) {
                    parsedModuleName.version = refPkg.version;
                    parsedModuleName.packageName = refPkg.name;
                    parsedModuleName.modulePath = utils.pkg.main(refPkg);
                    return oldNormalize.call(this, utils.moduleName.create(parsedModuleName), parentName, parentAddress, pluginNormalize);
                }
                var loader = this;
                if (!depPkg) {
                    if (crawl) {
                        var parentPkg = crawl.matchedVersion(this.npmContext, refPkg.name, refPkg.version);
                        if (parentPkg) {
                            var depMap = crawl.getFullDependencyMap(this, parentPkg, isRoot);
                            depPkg = depMap[parsedModuleName.packageName];
                            if (!depPkg) {
                                var parents = crawl.findPackageAndParents(this.npmContext, parsedModuleName.packageName);
                                if (parents) {
                                    depPkg = parents.package;
                                }
                            }
                        }
                    }
                    if (!depPkg) {
                        if (refPkg.browser && refPkg.browser[name]) {
                            return oldNormalize.call(this, refPkg.browser[name], parentName, parentAddress, pluginNormalize);
                        }
                        var steal = utils.pkg.config(refPkg);
                        if (steal && steal.map && typeof steal.map[name] === 'string') {
                            return loader.normalize(steal.map[name], parentName, parentAddress, pluginNormalize);
                        } else {
                            return oldNormalize.call(this, name, parentName, parentAddress, pluginNormalize);
                        }
                    }
                    return crawl.dep(this.npmContext, parentPkg, refPkg, depPkg, isRoot).then(createModuleNameAndNormalize);
                } else {
                    return createModuleNameAndNormalize(depPkg);
                }
                function createModuleNameAndNormalize(depPkg) {
                    parsedModuleName.version = depPkg.version;
                    if (!parsedModuleName.modulePath) {
                        parsedModuleName.modulePath = utils.pkg.main(depPkg);
                    }
                    var p = oldNormalize.call(loader, utils.moduleName.create(parsedModuleName), parentName, parentAddress, pluginNormalize);
                    if (identifierEndsWithSlash) {
                        p.then(function (name) {
                            if (context && context.forwardSlashMap) {
                                context.forwardSlashMap[name] = true;
                            }
                        });
                    }
                    return p;
                }
            };
            var oldLocate = System.locate;
            System.locate = function (load) {
                var parsedModuleName = utils.moduleName.parse(load.name), loader = this;
                load.metadata.parsedModuleName = parsedModuleName;
                if (parsedModuleName.version && this.npm && !loader.paths[load.name]) {
                    var pkg = this.npm[utils.moduleName.nameAndVersion(parsedModuleName)];
                    if (pkg) {
                        return oldLocate.call(this, load).then(function (locatedAddress) {
                            var address = locatedAddress;
                            var expectedAddress = utils.path.joinURIs(System.baseURL, load.name);
                            if (isBrowser) {
                                expectedAddress = expectedAddress.replace(/#/g, '%23');
                            }
                            if (address !== expectedAddress + '.js' && address !== expectedAddress) {
                                return address;
                            }
                            var root = utils.pkg.rootDir(pkg, utils.pkg.isRoot(loader, pkg));
                            if (parsedModuleName.modulePath) {
                                var npmAddress = utils.path.joinURIs(utils.path.addEndingSlash(root), parsedModuleName.plugin ? parsedModuleName.modulePath : utils.path.addJS(parsedModuleName.modulePath));
                                address = typeof steal !== 'undefined' ? utils.path.joinURIs(loader.baseURL, npmAddress) : npmAddress;
                            }
                            return address;
                        });
                    }
                }
                return oldLocate.call(this, load);
            };
            var oldFetch = System.fetch;
            System.fetch = function (load) {
                if (load.metadata.dryRun) {
                    return oldFetch.apply(this, arguments);
                }
                var loader = this;
                var context = loader.npmContext;
                var fetchPromise = Promise.resolve(oldFetch.apply(this, arguments));
                if (utils.moduleName.isNpm(load.name)) {
                    fetchPromise = fetchPromise.then(null, function (err) {
                        if (err.statusCode !== 404) {
                            return Promise.reject(err);
                        }
                        var types = [].slice.call(retryTypes);
                        return retryAll(types, err);
                        function retryAll(types, err) {
                            if (!types.length) {
                                throw err;
                            }
                            var type = types.shift();
                            if (!type.test(load)) {
                                throw err;
                            }
                            return Promise.resolve(retryFetch.call(loader, load, type)).then(null, function (err) {
                                return retryAll(types, err);
                            });
                        }
                    });
                }
                return fetchPromise.catch(function (error) {
                    if (error.statusCode === 404 && utils.moduleName.isBareIdentifier(load.name)) {
                        throw new Error([
                            'Could not load \'' + load.name + '\'',
                            'Is this an npm module not saved in your package.json?'
                        ].join('\n'));
                    } else {
                        throw error;
                    }
                });
            };
            var convertName = function (loader, name) {
                var pkg = utils.pkg.findByName(loader, name.split('/')[0]);
                if (pkg) {
                    var parsed = utils.moduleName.parse(name, pkg.name);
                    parsed.version = pkg.version;
                    if (!parsed.modulePath) {
                        parsed.modulePath = utils.pkg.main(pkg);
                    }
                    return utils.moduleName.create(parsed);
                }
                return name;
            };
            var configSpecial = {
                map: function (map) {
                    var newMap = {}, val;
                    for (var name in map) {
                        val = map[name];
                        newMap[convertName(this, name)] = typeof val === 'object' ? configSpecial.map(val) : convertName(this, val);
                    }
                    return newMap;
                },
                meta: function (map) {
                    var newMap = {};
                    for (var name in map) {
                        newMap[convertName(this, name)] = map[name];
                    }
                    return newMap;
                },
                paths: function (paths) {
                    var newPaths = {};
                    for (var name in paths) {
                        newPaths[convertName(this, name)] = paths[name];
                    }
                    return newPaths;
                }
            };
            var oldConfig = System.config;
            System.config = function (cfg) {
                var loader = this;
                if (loader.npmContext) {
                    var context = loader.npmContext;
                    var pkg = context.versions.__default;
                    context.convert.steal(context, pkg, cfg, true, false, false);
                    oldConfig.apply(loader, arguments);
                    return;
                }
                for (var name in cfg) {
                    if (configSpecial[name]) {
                        cfg[name] = configSpecial[name].call(loader, cfg[name]);
                    }
                }
                oldConfig.apply(loader, arguments);
            };
            steal.addNpmPackages = function (npmPackages) {
                var packages = npmPackages || [];
                var loader = this.loader;
                for (var i = 0; i < packages.length; i += 1) {
                    var pkg = packages[i];
                    var path = pkg && pkg.fileUrl;
                    if (path) {
                        loader.npmContext.paths[path] = pkg;
                    }
                }
            };
            steal.getNpmPackages = function () {
                var context = this.loader.npmContext;
                return context ? context.packages || [] : [];
            };
            function retryFetch(load, type) {
                var loader = this;
                var moduleName = typeof type.name === 'function' ? type.name(loader, load) : load.name + type.name;
                var local = utils.extend({}, load);
                local.name = moduleName;
                local.metadata = { dryRun: true };
                return Promise.resolve(loader.locate(local)).then(function (address) {
                    local.address = address;
                    return loader.fetch(local);
                }).then(function (source) {
                    load.metadata.address = local.address;
                    loader.npmParentMap[load.name] = local.name;
                    var npmLoad = loader.npmContext && loader.npmContext.npmLoad;
                    if (npmLoad) {
                        npmLoad.saveLoadIfNeeded(loader.npmContext);
                        if (!isNode) {
                            utils.warnOnce('Some 404s were encountered ' + 'while loading. Don\'t panic! ' + 'These will only happen in dev ' + 'and are harmless.');
                        }
                    }
                    return source;
                });
            }
            var retryTypes = [
                {
                    name: function (loader, load) {
                        var context = loader.npmContext;
                        if (context.forwardSlashMap[load.name]) {
                            var parts = load.name.split('/');
                            parts.pop();
                            return parts.concat(['index']).join('/');
                        }
                        return load.name + '/index';
                    },
                    test: function () {
                        return true;
                    }
                },
                {
                    name: '.json',
                    test: function (load) {
                        return utils.moduleName.isNpm(load.name) && utils.path.basename(load.address) === 'package.js';
                    }
                }
            ];
        };
    }(function () {
        return this;
    }(), require, exports, module));
});
/*npm-load*/
define('npm-load', [], function(){ return {}; });
/*semver*/
define('semver', [], function(){ return {}; });
/*npm-crawl*/
define('npm-crawl', [], function(){ return {}; });
/*npm-convert*/
define('npm-convert', [], function(){ return {}; });
/*npm*/
define('npm', [], function(){ return {}; });
/*package.json!npm*/
define('package.json!npm', [
    '@loader',
    'npm-extension',
    'module'
], function (loader, npmExtension, module) {
    npmExtension.addExtension(loader);
    if (!loader.main) {
        loader.main = 'steal-styled-components-bug@1.0.0#public/index';
    }
    loader._npmExtensions = [].slice.call(arguments, 2);
    (function (loader, packages, options) {
        var g = loader.global;
        if (!g.process) {
            g.process = {
                argv: [],
                cwd: function () {
                    var baseURL = loader.baseURL;
                    return baseURL;
                },
                browser: true,
                env: { NODE_ENV: loader.env },
                version: '',
                platform: navigator && navigator.userAgent && /Windows/.test(navigator.userAgent) ? 'win' : ''
            };
        }
        if (!loader.npm) {
            loader.npm = {};
            loader.npmPaths = {};
            loader.globalBrowser = {};
        }
        if (!loader.npmParentMap) {
            loader.npmParentMap = options.npmParentMap || {};
        }
        var rootPkg = loader.npmPaths.__default = packages[0];
        var rootConfig = rootPkg.steal || rootPkg.system;
        var lib = rootConfig && rootConfig.directories && rootConfig.directories.lib;
        var setGlobalBrowser = function (globals, pkg) {
            for (var name in globals) {
                loader.globalBrowser[name] = {
                    pkg: pkg,
                    moduleName: globals[name]
                };
            }
        };
        var setInNpm = function (name, pkg) {
            if (!loader.npm[name]) {
                loader.npm[name] = pkg;
            }
            loader.npm[name + '@' + pkg.version] = pkg;
        };
        var forEach = function (arr, fn) {
            var i = 0, len = arr.length;
            for (; i < len; i++) {
                res = fn.call(arr, arr[i], i);
                if (res === false)
                    break;
            }
        };
        var setupLiveReload = function () {
            if (loader.liveReloadInstalled) {
                loader['import']('live-reload', { name: module.id }).then(function (reload) {
                    reload.dispose(function () {
                        var pkgInfo = loader.npmContext.pkgInfo;
                        delete pkgInfo[rootPkg.name + '@' + rootPkg.version];
                        var idx = -1;
                        forEach(pkgInfo, function (pkg, i) {
                            if (pkg.name === rootPkg.name && pkg.version === rootPkg.version) {
                                idx = i;
                                return false;
                            }
                        });
                        pkgInfo.splice(idx, 1);
                    });
                });
            }
        };
        var ignoredConfig = [
            'bundle',
            'configDependencies',
            'transpiler'
        ];
        packages.reverse();
        forEach(packages, function (pkg) {
            var steal = pkg.steal || pkg.system;
            if (steal) {
                var main = steal.main;
                delete steal.main;
                var configDeps = steal.configDependencies;
                if (pkg !== rootPkg) {
                    forEach(ignoredConfig, function (name) {
                        delete steal[name];
                    });
                }
                loader.config(steal);
                if (pkg === rootPkg) {
                    steal.configDependencies = configDeps;
                }
                steal.main = main;
            }
            if (pkg.globalBrowser) {
                var doNotApplyGlobalBrowser = pkg.name === 'steal' && rootConfig.builtins === false;
                if (!doNotApplyGlobalBrowser) {
                    setGlobalBrowser(pkg.globalBrowser, pkg);
                }
            }
            var systemName = steal && steal.name;
            if (systemName) {
                setInNpm(systemName, pkg);
            } else {
                setInNpm(pkg.name, pkg);
            }
            if (!loader.npm[pkg.name]) {
                loader.npm[pkg.name] = pkg;
            }
            loader.npm[pkg.name + '@' + pkg.version] = pkg;
            var pkgAddress = pkg.fileUrl.replace(/\/package\.json.*/, '');
            loader.npmPaths[pkgAddress] = pkg;
        });
        setupLiveReload();
        forEach(loader._npmExtensions || [], function (ext) {
            if (ext.systemConfig) {
                loader.config(ext.systemConfig);
            }
        });
    }(loader, [
        {
            'name': 'steal-styled-components-bug',
            'version': '1.0.0',
            'fileUrl': './package.json',
            'main': 'public/index.js',
            'steal': { 'npmAlgorithm': 'flat' },
            'resolutions': {
                'steal-styled-components-bug': '1.0.0',
                'react-dom': '16.0.0',
                'styled-components': '2.2.3',
                'react': '16.0.0'
            }
        },
        {
            'name': 'react-dom',
            'version': '16.0.0',
            'fileUrl': './node_modules/react-dom/package.json',
            'main': 'index.js',
            'browser': { 'react-dom#server': 'react-dom#server.browser' },
            'resolutions': {
                'react-dom': '16.0.0',
                'react': '16.0.0',
                'fbjs': '0.8.16',
                'object-assign': '4.1.1',
                'prop-types': '15.6.0'
            }
        },
        {
            'name': 'styled-components',
            'version': '2.2.3',
            'fileUrl': './node_modules/styled-components/package.json',
            'main': 'lib/index.js',
            'resolutions': {
                'styled-components': '2.2.3',
                'react': '16.0.0',
                'prop-types': '15.6.0',
                'fbjs': '0.8.16',
                'stylis': '3.4.0',
                'hoist-non-react-statics': '1.2.0',
                'is-plain-object': '2.0.4',
                'is-function': '1.0.1'
            }
        },
        {
            'name': 'react',
            'version': '16.0.0',
            'fileUrl': './node_modules/react/package.json',
            'main': 'index.js',
            'browser': { 'transform': ['loose-envify'] },
            'resolutions': {
                'react': '16.0.0',
                'object-assign': '4.1.1',
                'prop-types': '15.6.0',
                'fbjs': '0.8.16'
            }
        },
        {
            'name': 'object-assign',
            'version': '4.1.1',
            'fileUrl': './node_modules/object-assign/package.json',
            'resolutions': {}
        },
        {
            'name': 'prop-types',
            'version': '15.6.0',
            'fileUrl': './node_modules/prop-types/package.json',
            'main': 'index.js',
            'browser': { 'transform': ['loose-envify'] },
            'resolutions': {
                'prop-types': '15.6.0',
                'fbjs': '0.8.16',
                'object-assign': '4.1.1'
            }
        },
        {
            'name': 'fbjs',
            'version': '0.8.16',
            'fileUrl': './node_modules/fbjs/package.json',
            'main': 'index.js',
            'browser': { 'transform': ['loose-envify'] },
            'resolutions': { 'fbjs': '0.8.16' }
        },
        {
            'name': 'stylis',
            'version': '3.4.0',
            'fileUrl': './node_modules/stylis/package.json',
            'main': 'stylis.js',
            'resolutions': {}
        },
        {
            'name': 'hoist-non-react-statics',
            'version': '1.2.0',
            'fileUrl': './node_modules/hoist-non-react-statics/package.json',
            'main': 'index.js',
            'resolutions': {}
        },
        {
            'name': 'is-plain-object',
            'version': '2.0.4',
            'fileUrl': './node_modules/is-plain-object/package.json',
            'main': 'index.js',
            'resolutions': { 'isobject': '3.0.1' }
        },
        {
            'name': 'is-function',
            'version': '1.0.1',
            'fileUrl': './node_modules/is-function/package.json',
            'main': 'index.js',
            'resolutions': {}
        },
        {
            'name': 'isobject',
            'version': '3.0.1',
            'fileUrl': './node_modules/is-plain-object/node_modules/isobject/package.json',
            'main': 'index.js',
            'resolutions': {}
        }
    ], { 'npmParentMap': {} }));
});
/*object-assign@4.1.1#index*/
define('object-assign@4.1.1#index', function (require, exports, module) {
    'use strict';
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;
    function toObject(val) {
        if (val === null || val === undefined) {
            throw new TypeError('Object.assign cannot be called with null or undefined');
        }
        return Object(val);
    }
    function shouldUseNative() {
        try {
            if (!Object.assign) {
                return false;
            }
            var test1 = new String('abc');
            test1[5] = 'de';
            if (Object.getOwnPropertyNames(test1)[0] === '5') {
                return false;
            }
            var test2 = {};
            for (var i = 0; i < 10; i++) {
                test2['_' + String.fromCharCode(i)] = i;
            }
            var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
                return test2[n];
            });
            if (order2.join('') !== '0123456789') {
                return false;
            }
            var test3 = {};
            'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
                test3[letter] = letter;
            });
            if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
                return false;
            }
            return true;
        } catch (err) {
            return false;
        }
    }
    module.exports = shouldUseNative() ? Object.assign : function (target, source) {
        var from;
        var to = toObject(target);
        var symbols;
        for (var s = 1; s < arguments.length; s++) {
            from = Object(arguments[s]);
            for (var key in from) {
                if (hasOwnProperty.call(from, key)) {
                    to[key] = from[key];
                }
            }
            if (getOwnPropertySymbols) {
                symbols = getOwnPropertySymbols(from);
                for (var i = 0; i < symbols.length; i++) {
                    if (propIsEnumerable.call(from, symbols[i])) {
                        to[symbols[i]] = from[symbols[i]];
                    }
                }
            }
        }
        return to;
    };
});
/*fbjs@0.8.16#lib/emptyObject*/
define('fbjs@0.8.16#lib/emptyObject', function (require, exports, module) {
    'use strict';
    var emptyObject = {};
    if (process.env.NODE_ENV !== 'production') {
        Object.freeze(emptyObject);
    }
    module.exports = emptyObject;
});
/*fbjs@0.8.16#lib/invariant*/
define('fbjs@0.8.16#lib/invariant', function (require, exports, module) {
    'use strict';
    var validateFormat = function validateFormat(format) {
    };
    if (process.env.NODE_ENV !== 'production') {
        validateFormat = function validateFormat(format) {
            if (format === undefined) {
                throw new Error('invariant requires an error message argument');
            }
        };
    }
    function invariant(condition, format, a, b, c, d, e, f) {
        validateFormat(format);
        if (!condition) {
            var error;
            if (format === undefined) {
                error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
            } else {
                var args = [
                    a,
                    b,
                    c,
                    d,
                    e,
                    f
                ];
                var argIndex = 0;
                error = new Error(format.replace(/%s/g, function () {
                    return args[argIndex++];
                }));
                error.name = 'Invariant Violation';
            }
            error.framesToPop = 1;
            throw error;
        }
    }
    module.exports = invariant;
});
/*fbjs@0.8.16#lib/emptyFunction*/
define('fbjs@0.8.16#lib/emptyFunction', function (require, exports, module) {
    'use strict';
    function makeEmptyFunction(arg) {
        return function () {
            return arg;
        };
    }
    var emptyFunction = function emptyFunction() {
    };
    emptyFunction.thatReturns = makeEmptyFunction;
    emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
    emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
    emptyFunction.thatReturnsNull = makeEmptyFunction(null);
    emptyFunction.thatReturnsThis = function () {
        return this;
    };
    emptyFunction.thatReturnsArgument = function (arg) {
        return arg;
    };
    module.exports = emptyFunction;
});
/*react@16.0.0#cjs/react.production.min*/
define('react@16.0.0#cjs/react.production.min', [
    'require',
    'exports',
    'module',
    'object-assign',
    'fbjs/lib/emptyObject',
    'fbjs/lib/invariant',
    'fbjs/lib/emptyFunction'
], function (require, exports, module) {
    'use strict';
    var f = require('object-assign'), p = require('fbjs/lib/emptyObject');
    require('fbjs/lib/invariant');
    var r = require('fbjs/lib/emptyFunction');
    function t(a) {
        for (var b = arguments.length - 1, d = 'Minified React error #' + a + '; visit http://facebook.github.io/react/docs/error-decoder.html?invariant=' + a, e = 0; e < b; e++)
            d += '&args[]=' + encodeURIComponent(arguments[e + 1]);
        b = Error(d + ' for the full message or use the non-minified dev environment for full errors and additional helpful warnings.');
        b.name = 'Invariant Violation';
        b.framesToPop = 1;
        throw b;
    }
    var u = {
        isMounted: function () {
            return !1;
        },
        enqueueForceUpdate: function () {
        },
        enqueueReplaceState: function () {
        },
        enqueueSetState: function () {
        }
    };
    function v(a, b, d) {
        this.props = a;
        this.context = b;
        this.refs = p;
        this.updater = d || u;
    }
    v.prototype.isReactComponent = {};
    v.prototype.setState = function (a, b) {
        'object' !== typeof a && 'function' !== typeof a && null != a ? t('85') : void 0;
        this.updater.enqueueSetState(this, a, b, 'setState');
    };
    v.prototype.forceUpdate = function (a) {
        this.updater.enqueueForceUpdate(this, a, 'forceUpdate');
    };
    function w(a, b, d) {
        this.props = a;
        this.context = b;
        this.refs = p;
        this.updater = d || u;
    }
    function x() {
    }
    x.prototype = v.prototype;
    var y = w.prototype = new x();
    y.constructor = w;
    f(y, v.prototype);
    y.isPureReactComponent = !0;
    function z(a, b, d) {
        this.props = a;
        this.context = b;
        this.refs = p;
        this.updater = d || u;
    }
    var A = z.prototype = new x();
    A.constructor = z;
    f(A, v.prototype);
    A.unstable_isAsyncReactComponent = !0;
    A.render = function () {
        return this.props.children;
    };
    var B = {
            Component: v,
            PureComponent: w,
            AsyncComponent: z
        }, C = { current: null }, D = Object.prototype.hasOwnProperty, E = 'function' === typeof Symbol && Symbol['for'] && Symbol['for']('react.element') || 60103, F = {
            key: !0,
            ref: !0,
            __self: !0,
            __source: !0
        };
    function G(a, b, d, e, c, g, k) {
        return {
            $$typeof: E,
            type: a,
            key: b,
            ref: d,
            props: k,
            _owner: g
        };
    }
    G.createElement = function (a, b, d) {
        var e, c = {}, g = null, k = null, m = null, q = null;
        if (null != b)
            for (e in void 0 !== b.ref && (k = b.ref), void 0 !== b.key && (g = '' + b.key), m = void 0 === b.__self ? null : b.__self, q = void 0 === b.__source ? null : b.__source, b)
                D.call(b, e) && !F.hasOwnProperty(e) && (c[e] = b[e]);
        var l = arguments.length - 2;
        if (1 === l)
            c.children = d;
        else if (1 < l) {
            for (var h = Array(l), n = 0; n < l; n++)
                h[n] = arguments[n + 2];
            c.children = h;
        }
        if (a && a.defaultProps)
            for (e in l = a.defaultProps, l)
                void 0 === c[e] && (c[e] = l[e]);
        return G(a, g, k, m, q, C.current, c);
    };
    G.createFactory = function (a) {
        var b = G.createElement.bind(null, a);
        b.type = a;
        return b;
    };
    G.cloneAndReplaceKey = function (a, b) {
        return G(a.type, b, a.ref, a._self, a._source, a._owner, a.props);
    };
    G.cloneElement = function (a, b, d) {
        var e = f({}, a.props), c = a.key, g = a.ref, k = a._self, m = a._source, q = a._owner;
        if (null != b) {
            void 0 !== b.ref && (g = b.ref, q = C.current);
            void 0 !== b.key && (c = '' + b.key);
            if (a.type && a.type.defaultProps)
                var l = a.type.defaultProps;
            for (h in b)
                D.call(b, h) && !F.hasOwnProperty(h) && (e[h] = void 0 === b[h] && void 0 !== l ? l[h] : b[h]);
        }
        var h = arguments.length - 2;
        if (1 === h)
            e.children = d;
        else if (1 < h) {
            l = Array(h);
            for (var n = 0; n < h; n++)
                l[n] = arguments[n + 2];
            e.children = l;
        }
        return G(a.type, c, g, k, m, q, e);
    };
    G.isValidElement = function (a) {
        return 'object' === typeof a && null !== a && a.$$typeof === E;
    };
    var H = 'function' === typeof Symbol && Symbol.iterator, I = 'function' === typeof Symbol && Symbol['for'] && Symbol['for']('react.element') || 60103;
    function escape(a) {
        var b = {
            '=': '=0',
            ':': '=2'
        };
        return '$' + ('' + a).replace(/[=:]/g, function (a) {
            return b[a];
        });
    }
    var J = /\/+/g, K = [];
    function L(a, b, d, e) {
        if (K.length) {
            var c = K.pop();
            c.result = a;
            c.keyPrefix = b;
            c.func = d;
            c.context = e;
            c.count = 0;
            return c;
        }
        return {
            result: a,
            keyPrefix: b,
            func: d,
            context: e,
            count: 0
        };
    }
    function M(a) {
        a.result = null;
        a.keyPrefix = null;
        a.func = null;
        a.context = null;
        a.count = 0;
        10 > K.length && K.push(a);
    }
    function N(a, b, d, e) {
        var c = typeof a;
        if ('undefined' === c || 'boolean' === c)
            a = null;
        if (null === a || 'string' === c || 'number' === c || 'object' === c && a.$$typeof === I)
            return d(e, a, '' === b ? '.' + O(a, 0) : b), 1;
        var g = 0;
        b = '' === b ? '.' : b + ':';
        if (Array.isArray(a))
            for (var k = 0; k < a.length; k++) {
                c = a[k];
                var m = b + O(c, k);
                g += N(c, m, d, e);
            }
        else if (m = H && a[H] || a['@@iterator'], 'function' === typeof m)
            for (a = m.call(a), k = 0; !(c = a.next()).done;)
                c = c.value, m = b + O(c, k++), g += N(c, m, d, e);
        else
            'object' === c && (d = '' + a, t('31', '[object Object]' === d ? 'object with keys {' + Object.keys(a).join(', ') + '}' : d, ''));
        return g;
    }
    function O(a, b) {
        return 'object' === typeof a && null !== a && null != a.key ? escape(a.key) : b.toString(36);
    }
    function P(a, b) {
        a.func.call(a.context, b, a.count++);
    }
    function Q(a, b, d) {
        var e = a.result, c = a.keyPrefix;
        a = a.func.call(a.context, b, a.count++);
        Array.isArray(a) ? R(a, e, d, r.thatReturnsArgument) : null != a && (G.isValidElement(a) && (a = G.cloneAndReplaceKey(a, c + (!a.key || b && b.key === a.key ? '' : ('' + a.key).replace(J, '$&/') + '/') + d)), e.push(a));
    }
    function R(a, b, d, e, c) {
        var g = '';
        null != d && (g = ('' + d).replace(J, '$&/') + '/');
        b = L(b, g, e, c);
        null == a || N(a, '', Q, b);
        M(b);
    }
    var S = {
        forEach: function (a, b, d) {
            if (null == a)
                return a;
            b = L(null, null, b, d);
            null == a || N(a, '', P, b);
            M(b);
        },
        map: function (a, b, d) {
            if (null == a)
                return a;
            var e = [];
            R(a, e, null, b, d);
            return e;
        },
        count: function (a) {
            return null == a ? 0 : N(a, '', r.thatReturnsNull, null);
        },
        toArray: function (a) {
            var b = [];
            R(a, b, null, r.thatReturnsArgument);
            return b;
        }
    };
    module.exports = {
        Children: {
            map: S.map,
            forEach: S.forEach,
            count: S.count,
            toArray: S.toArray,
            only: function (a) {
                G.isValidElement(a) ? void 0 : t('143');
                return a;
            }
        },
        Component: B.Component,
        PureComponent: B.PureComponent,
        unstable_AsyncComponent: B.AsyncComponent,
        createElement: G.createElement,
        cloneElement: G.cloneElement,
        isValidElement: G.isValidElement,
        createFactory: G.createFactory,
        version: '16.0.0',
        __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
            ReactCurrentOwner: C,
            assign: f
        }
    };
});
/*fbjs@0.8.16#lib/warning*/
define('fbjs@0.8.16#lib/warning', [
    'require',
    'exports',
    'module',
    './emptyFunction'
], function (require, exports, module) {
    'use strict';
    var emptyFunction = require('./emptyFunction');
    var warning = emptyFunction;
    if (process.env.NODE_ENV !== 'production') {
        var printWarning = function printWarning(format) {
            for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
            }
            var argIndex = 0;
            var message = 'Warning: ' + format.replace(/%s/g, function () {
                return args[argIndex++];
            });
            if (typeof console !== 'undefined') {
                console.error(message);
            }
            try {
                throw new Error(message);
            } catch (x) {
            }
        };
        warning = function warning(condition, format) {
            if (format === undefined) {
                throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
            }
            if (format.indexOf('Failed Composite propType: ') === 0) {
                return;
            }
            if (!condition) {
                for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
                    args[_key2 - 2] = arguments[_key2];
                }
                printWarning.apply(undefined, [format].concat(args));
            }
        };
    }
    module.exports = warning;
});
/*prop-types@15.6.0#lib/ReactPropTypesSecret*/
define('prop-types@15.6.0#lib/ReactPropTypesSecret', function (require, exports, module) {
    'use strict';
    var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
    module.exports = ReactPropTypesSecret;
});
/*prop-types@15.6.0#checkPropTypes*/
define('prop-types@15.6.0#checkPropTypes', [
    'require',
    'exports',
    'module',
    'fbjs/lib/invariant',
    'fbjs/lib/warning',
    './lib/ReactPropTypesSecret'
], function (require, exports, module) {
    'use strict';
    if (process.env.NODE_ENV !== 'production') {
        var invariant = require('fbjs/lib/invariant');
        var warning = require('fbjs/lib/warning');
        var ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');
        var loggedTypeFailures = {};
    }
    function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
        if (process.env.NODE_ENV !== 'production') {
            for (var typeSpecName in typeSpecs) {
                if (typeSpecs.hasOwnProperty(typeSpecName)) {
                    var error;
                    try {
                        invariant(typeof typeSpecs[typeSpecName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'the `prop-types` package, but received `%s`.', componentName || 'React class', location, typeSpecName, typeof typeSpecs[typeSpecName]);
                        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
                    } catch (ex) {
                        error = ex;
                    }
                    warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error);
                    if (error instanceof Error && !(error.message in loggedTypeFailures)) {
                        loggedTypeFailures[error.message] = true;
                        var stack = getStack ? getStack() : '';
                        warning(false, 'Failed %s type: %s%s', location, error.message, stack != null ? stack : '');
                    }
                }
            }
        }
    }
    module.exports = checkPropTypes;
});
/*react@16.0.0#cjs/react.development*/
define('react@16.0.0#cjs/react.development', [
    'require',
    'exports',
    'module',
    'object-assign',
    'fbjs/lib/warning',
    'fbjs/lib/emptyObject',
    'fbjs/lib/invariant',
    'fbjs/lib/emptyFunction',
    'prop-types/checkPropTypes'
], function (require, exports, module) {
    'use strict';
    if (process.env.NODE_ENV !== 'production') {
        (function () {
            'use strict';
            var objectAssign$1 = require('object-assign');
            var require$$0 = require('fbjs/lib/warning');
            var emptyObject = require('fbjs/lib/emptyObject');
            var invariant = require('fbjs/lib/invariant');
            var emptyFunction = require('fbjs/lib/emptyFunction');
            var checkPropTypes = require('prop-types/checkPropTypes');
            {
                var warning = require$$0;
            }
            function warnNoop(publicInstance, callerName) {
                {
                    var constructor = publicInstance.constructor;
                    warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op.\n\nPlease check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass');
                }
            }
            var ReactNoopUpdateQueue = {
                isMounted: function (publicInstance) {
                    return false;
                },
                enqueueForceUpdate: function (publicInstance, callback, callerName) {
                    warnNoop(publicInstance, 'forceUpdate');
                },
                enqueueReplaceState: function (publicInstance, completeState, callback, callerName) {
                    warnNoop(publicInstance, 'replaceState');
                },
                enqueueSetState: function (publicInstance, partialState, callback, callerName) {
                    warnNoop(publicInstance, 'setState');
                }
            };
            var ReactNoopUpdateQueue_1 = ReactNoopUpdateQueue;
            var lowPriorityWarning = function () {
            };
            {
                var printWarning = function (format) {
                    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                        args[_key - 1] = arguments[_key];
                    }
                    var argIndex = 0;
                    var message = 'Warning: ' + format.replace(/%s/g, function () {
                        return args[argIndex++];
                    });
                    if (typeof console !== 'undefined') {
                        console.warn(message);
                    }
                    try {
                        throw new Error(message);
                    } catch (x) {
                    }
                };
                lowPriorityWarning = function (condition, format) {
                    if (format === undefined) {
                        throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
                    }
                    if (!condition) {
                        for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
                            args[_key2 - 2] = arguments[_key2];
                        }
                        printWarning.apply(undefined, [format].concat(args));
                    }
                };
            }
            var lowPriorityWarning_1 = lowPriorityWarning;
            function ReactComponent(props, context, updater) {
                this.props = props;
                this.context = context;
                this.refs = emptyObject;
                this.updater = updater || ReactNoopUpdateQueue_1;
            }
            ReactComponent.prototype.isReactComponent = {};
            ReactComponent.prototype.setState = function (partialState, callback) {
                !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : void 0;
                this.updater.enqueueSetState(this, partialState, callback, 'setState');
            };
            ReactComponent.prototype.forceUpdate = function (callback) {
                this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');
            };
            {
                var deprecatedAPIs = {
                    isMounted: [
                        'isMounted',
                        'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'
                    ],
                    replaceState: [
                        'replaceState',
                        'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).'
                    ]
                };
                var defineDeprecationWarning = function (methodName, info) {
                    Object.defineProperty(ReactComponent.prototype, methodName, {
                        get: function () {
                            lowPriorityWarning_1(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);
                            return undefined;
                        }
                    });
                };
                for (var fnName in deprecatedAPIs) {
                    if (deprecatedAPIs.hasOwnProperty(fnName)) {
                        defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
                    }
                }
            }
            function ReactPureComponent(props, context, updater) {
                this.props = props;
                this.context = context;
                this.refs = emptyObject;
                this.updater = updater || ReactNoopUpdateQueue_1;
            }
            function ComponentDummy() {
            }
            ComponentDummy.prototype = ReactComponent.prototype;
            var pureComponentPrototype = ReactPureComponent.prototype = new ComponentDummy();
            pureComponentPrototype.constructor = ReactPureComponent;
            objectAssign$1(pureComponentPrototype, ReactComponent.prototype);
            pureComponentPrototype.isPureReactComponent = true;
            function ReactAsyncComponent(props, context, updater) {
                this.props = props;
                this.context = context;
                this.refs = emptyObject;
                this.updater = updater || ReactNoopUpdateQueue_1;
            }
            var asyncComponentPrototype = ReactAsyncComponent.prototype = new ComponentDummy();
            asyncComponentPrototype.constructor = ReactAsyncComponent;
            objectAssign$1(asyncComponentPrototype, ReactComponent.prototype);
            asyncComponentPrototype.unstable_isAsyncReactComponent = true;
            asyncComponentPrototype.render = function () {
                return this.props.children;
            };
            var ReactBaseClasses = {
                Component: ReactComponent,
                PureComponent: ReactPureComponent,
                AsyncComponent: ReactAsyncComponent
            };
            var ReactCurrentOwner = { current: null };
            var ReactCurrentOwner_1 = ReactCurrentOwner;
            var hasOwnProperty = Object.prototype.hasOwnProperty;
            {
                var warning$2 = require$$0;
            }
            var REACT_ELEMENT_TYPE$1 = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 60103;
            var RESERVED_PROPS = {
                key: true,
                ref: true,
                __self: true,
                __source: true
            };
            var specialPropKeyWarningShown;
            var specialPropRefWarningShown;
            function hasValidRef(config) {
                {
                    if (hasOwnProperty.call(config, 'ref')) {
                        var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
                        if (getter && getter.isReactWarning) {
                            return false;
                        }
                    }
                }
                return config.ref !== undefined;
            }
            function hasValidKey(config) {
                {
                    if (hasOwnProperty.call(config, 'key')) {
                        var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
                        if (getter && getter.isReactWarning) {
                            return false;
                        }
                    }
                }
                return config.key !== undefined;
            }
            function defineKeyPropWarningGetter(props, displayName) {
                var warnAboutAccessingKey = function () {
                    if (!specialPropKeyWarningShown) {
                        specialPropKeyWarningShown = true;
                        warning$2(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
                    }
                };
                warnAboutAccessingKey.isReactWarning = true;
                Object.defineProperty(props, 'key', {
                    get: warnAboutAccessingKey,
                    configurable: true
                });
            }
            function defineRefPropWarningGetter(props, displayName) {
                var warnAboutAccessingRef = function () {
                    if (!specialPropRefWarningShown) {
                        specialPropRefWarningShown = true;
                        warning$2(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
                    }
                };
                warnAboutAccessingRef.isReactWarning = true;
                Object.defineProperty(props, 'ref', {
                    get: warnAboutAccessingRef,
                    configurable: true
                });
            }
            var ReactElement = function (type, key, ref, self, source, owner, props) {
                var element = {
                    $$typeof: REACT_ELEMENT_TYPE$1,
                    type: type,
                    key: key,
                    ref: ref,
                    props: props,
                    _owner: owner
                };
                {
                    element._store = {};
                    Object.defineProperty(element._store, 'validated', {
                        configurable: false,
                        enumerable: false,
                        writable: true,
                        value: false
                    });
                    Object.defineProperty(element, '_self', {
                        configurable: false,
                        enumerable: false,
                        writable: false,
                        value: self
                    });
                    Object.defineProperty(element, '_source', {
                        configurable: false,
                        enumerable: false,
                        writable: false,
                        value: source
                    });
                    if (Object.freeze) {
                        Object.freeze(element.props);
                        Object.freeze(element);
                    }
                }
                return element;
            };
            ReactElement.createElement = function (type, config, children) {
                var propName;
                var props = {};
                var key = null;
                var ref = null;
                var self = null;
                var source = null;
                if (config != null) {
                    if (hasValidRef(config)) {
                        ref = config.ref;
                    }
                    if (hasValidKey(config)) {
                        key = '' + config.key;
                    }
                    self = config.__self === undefined ? null : config.__self;
                    source = config.__source === undefined ? null : config.__source;
                    for (propName in config) {
                        if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                            props[propName] = config[propName];
                        }
                    }
                }
                var childrenLength = arguments.length - 2;
                if (childrenLength === 1) {
                    props.children = children;
                } else if (childrenLength > 1) {
                    var childArray = Array(childrenLength);
                    for (var i = 0; i < childrenLength; i++) {
                        childArray[i] = arguments[i + 2];
                    }
                    {
                        if (Object.freeze) {
                            Object.freeze(childArray);
                        }
                    }
                    props.children = childArray;
                }
                if (type && type.defaultProps) {
                    var defaultProps = type.defaultProps;
                    for (propName in defaultProps) {
                        if (props[propName] === undefined) {
                            props[propName] = defaultProps[propName];
                        }
                    }
                }
                {
                    if (key || ref) {
                        if (typeof props.$$typeof === 'undefined' || props.$$typeof !== REACT_ELEMENT_TYPE$1) {
                            var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
                            if (key) {
                                defineKeyPropWarningGetter(props, displayName);
                            }
                            if (ref) {
                                defineRefPropWarningGetter(props, displayName);
                            }
                        }
                    }
                }
                return ReactElement(type, key, ref, self, source, ReactCurrentOwner_1.current, props);
            };
            ReactElement.createFactory = function (type) {
                var factory = ReactElement.createElement.bind(null, type);
                factory.type = type;
                return factory;
            };
            ReactElement.cloneAndReplaceKey = function (oldElement, newKey) {
                var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
                return newElement;
            };
            ReactElement.cloneElement = function (element, config, children) {
                var propName;
                var props = objectAssign$1({}, element.props);
                var key = element.key;
                var ref = element.ref;
                var self = element._self;
                var source = element._source;
                var owner = element._owner;
                if (config != null) {
                    if (hasValidRef(config)) {
                        ref = config.ref;
                        owner = ReactCurrentOwner_1.current;
                    }
                    if (hasValidKey(config)) {
                        key = '' + config.key;
                    }
                    var defaultProps;
                    if (element.type && element.type.defaultProps) {
                        defaultProps = element.type.defaultProps;
                    }
                    for (propName in config) {
                        if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                            if (config[propName] === undefined && defaultProps !== undefined) {
                                props[propName] = defaultProps[propName];
                            } else {
                                props[propName] = config[propName];
                            }
                        }
                    }
                }
                var childrenLength = arguments.length - 2;
                if (childrenLength === 1) {
                    props.children = children;
                } else if (childrenLength > 1) {
                    var childArray = Array(childrenLength);
                    for (var i = 0; i < childrenLength; i++) {
                        childArray[i] = arguments[i + 2];
                    }
                    props.children = childArray;
                }
                return ReactElement(element.type, key, ref, self, source, owner, props);
            };
            ReactElement.isValidElement = function (object) {
                return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE$1;
            };
            var ReactElement_1 = ReactElement;
            var ReactDebugCurrentFrame = {};
            {
                ReactDebugCurrentFrame.getCurrentStack = null;
                ReactDebugCurrentFrame.getStackAddendum = function () {
                    var impl = ReactDebugCurrentFrame.getCurrentStack;
                    if (impl) {
                        return impl();
                    }
                    return null;
                };
            }
            var ReactDebugCurrentFrame_1 = ReactDebugCurrentFrame;
            {
                var warning$1 = require$$0;
                var _require = ReactDebugCurrentFrame_1, getStackAddendum = _require.getStackAddendum;
            }
            var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
            var FAUX_ITERATOR_SYMBOL = '@@iterator';
            var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 60103;
            var SEPARATOR = '.';
            var SUBSEPARATOR = ':';
            function escape(key) {
                var escapeRegex = /[=:]/g;
                var escaperLookup = {
                    '=': '=0',
                    ':': '=2'
                };
                var escapedString = ('' + key).replace(escapeRegex, function (match) {
                    return escaperLookup[match];
                });
                return '$' + escapedString;
            }
            var didWarnAboutMaps = false;
            var userProvidedKeyEscapeRegex = /\/+/g;
            function escapeUserProvidedKey(text) {
                return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
            }
            var POOL_SIZE = 10;
            var traverseContextPool = [];
            function getPooledTraverseContext(mapResult, keyPrefix, mapFunction, mapContext) {
                if (traverseContextPool.length) {
                    var traverseContext = traverseContextPool.pop();
                    traverseContext.result = mapResult;
                    traverseContext.keyPrefix = keyPrefix;
                    traverseContext.func = mapFunction;
                    traverseContext.context = mapContext;
                    traverseContext.count = 0;
                    return traverseContext;
                } else {
                    return {
                        result: mapResult,
                        keyPrefix: keyPrefix,
                        func: mapFunction,
                        context: mapContext,
                        count: 0
                    };
                }
            }
            function releaseTraverseContext(traverseContext) {
                traverseContext.result = null;
                traverseContext.keyPrefix = null;
                traverseContext.func = null;
                traverseContext.context = null;
                traverseContext.count = 0;
                if (traverseContextPool.length < POOL_SIZE) {
                    traverseContextPool.push(traverseContext);
                }
            }
            function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
                var type = typeof children;
                if (type === 'undefined' || type === 'boolean') {
                    children = null;
                }
                if (children === null || type === 'string' || type === 'number' || type === 'object' && children.$$typeof === REACT_ELEMENT_TYPE) {
                    callback(traverseContext, children, nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
                    return 1;
                }
                var child;
                var nextName;
                var subtreeCount = 0;
                var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;
                if (Array.isArray(children)) {
                    for (var i = 0; i < children.length; i++) {
                        child = children[i];
                        nextName = nextNamePrefix + getComponentKey(child, i);
                        subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
                    }
                } else {
                    var iteratorFn = ITERATOR_SYMBOL && children[ITERATOR_SYMBOL] || children[FAUX_ITERATOR_SYMBOL];
                    if (typeof iteratorFn === 'function') {
                        {
                            if (iteratorFn === children.entries) {
                                warning$1(didWarnAboutMaps, 'Using Maps as children is unsupported and will likely yield ' + 'unexpected results. Convert it to a sequence/iterable of keyed ' + 'ReactElements instead.%s', getStackAddendum());
                                didWarnAboutMaps = true;
                            }
                        }
                        var iterator = iteratorFn.call(children);
                        var step;
                        var ii = 0;
                        while (!(step = iterator.next()).done) {
                            child = step.value;
                            nextName = nextNamePrefix + getComponentKey(child, ii++);
                            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
                        }
                    } else if (type === 'object') {
                        var addendum = '';
                        {
                            addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + getStackAddendum();
                        }
                        var childrenString = '' + children;
                        invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum);
                    }
                }
                return subtreeCount;
            }
            function traverseAllChildren(children, callback, traverseContext) {
                if (children == null) {
                    return 0;
                }
                return traverseAllChildrenImpl(children, '', callback, traverseContext);
            }
            function getComponentKey(component, index) {
                if (typeof component === 'object' && component !== null && component.key != null) {
                    return escape(component.key);
                }
                return index.toString(36);
            }
            function forEachSingleChild(bookKeeping, child, name) {
                var func = bookKeeping.func, context = bookKeeping.context;
                func.call(context, child, bookKeeping.count++);
            }
            function forEachChildren(children, forEachFunc, forEachContext) {
                if (children == null) {
                    return children;
                }
                var traverseContext = getPooledTraverseContext(null, null, forEachFunc, forEachContext);
                traverseAllChildren(children, forEachSingleChild, traverseContext);
                releaseTraverseContext(traverseContext);
            }
            function mapSingleChildIntoContext(bookKeeping, child, childKey) {
                var result = bookKeeping.result, keyPrefix = bookKeeping.keyPrefix, func = bookKeeping.func, context = bookKeeping.context;
                var mappedChild = func.call(context, child, bookKeeping.count++);
                if (Array.isArray(mappedChild)) {
                    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
                } else if (mappedChild != null) {
                    if (ReactElement_1.isValidElement(mappedChild)) {
                        mappedChild = ReactElement_1.cloneAndReplaceKey(mappedChild, keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
                    }
                    result.push(mappedChild);
                }
            }
            function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
                var escapedPrefix = '';
                if (prefix != null) {
                    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
                }
                var traverseContext = getPooledTraverseContext(array, escapedPrefix, func, context);
                traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
                releaseTraverseContext(traverseContext);
            }
            function mapChildren(children, func, context) {
                if (children == null) {
                    return children;
                }
                var result = [];
                mapIntoWithKeyPrefixInternal(children, result, null, func, context);
                return result;
            }
            function countChildren(children, context) {
                return traverseAllChildren(children, emptyFunction.thatReturnsNull, null);
            }
            function toArray(children) {
                var result = [];
                mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
                return result;
            }
            var ReactChildren = {
                forEach: forEachChildren,
                map: mapChildren,
                count: countChildren,
                toArray: toArray
            };
            var ReactChildren_1 = ReactChildren;
            var ReactVersion = '16.0.0';
            function onlyChild(children) {
                !ReactElement_1.isValidElement(children) ? invariant(false, 'React.Children.only expected to receive a single React element child.') : void 0;
                return children;
            }
            var onlyChild_1 = onlyChild;
            var describeComponentFrame$1 = function (name, source, ownerName) {
                return '\n    in ' + (name || 'Unknown') + (source ? ' (at ' + source.fileName.replace(/^.*[\\\/]/, '') + ':' + source.lineNumber + ')' : ownerName ? ' (created by ' + ownerName + ')' : '');
            };
            function getComponentName$1(instanceOrFiber) {
                if (typeof instanceOrFiber.getName === 'function') {
                    var instance = instanceOrFiber;
                    return instance.getName();
                }
                if (typeof instanceOrFiber.tag === 'number') {
                    var fiber = instanceOrFiber;
                    var type = fiber.type;
                    if (typeof type === 'string') {
                        return type;
                    }
                    if (typeof type === 'function') {
                        return type.displayName || type.name;
                    }
                }
                return null;
            }
            var getComponentName_1 = getComponentName$1;
            {
                var checkPropTypes$1 = checkPropTypes;
                var lowPriorityWarning$1 = lowPriorityWarning_1;
                var ReactDebugCurrentFrame$1 = ReactDebugCurrentFrame_1;
                var warning$3 = require$$0;
                var describeComponentFrame = describeComponentFrame$1;
                var getComponentName = getComponentName_1;
                var currentlyValidatingElement = null;
                var getDisplayName = function (element) {
                    if (element == null) {
                        return '#empty';
                    } else if (typeof element === 'string' || typeof element === 'number') {
                        return '#text';
                    } else if (typeof element.type === 'string') {
                        return element.type;
                    } else {
                        return element.type.displayName || element.type.name || 'Unknown';
                    }
                };
                var getStackAddendum$1 = function () {
                    var stack = '';
                    if (currentlyValidatingElement) {
                        var name = getDisplayName(currentlyValidatingElement);
                        var owner = currentlyValidatingElement._owner;
                        stack += describeComponentFrame(name, currentlyValidatingElement._source, owner && getComponentName(owner));
                    }
                    stack += ReactDebugCurrentFrame$1.getStackAddendum() || '';
                    return stack;
                };
            }
            var ITERATOR_SYMBOL$1 = typeof Symbol === 'function' && Symbol.iterator;
            var FAUX_ITERATOR_SYMBOL$1 = '@@iterator';
            function getDeclarationErrorAddendum() {
                if (ReactCurrentOwner_1.current) {
                    var name = getComponentName(ReactCurrentOwner_1.current);
                    if (name) {
                        return '\n\nCheck the render method of `' + name + '`.';
                    }
                }
                return '';
            }
            function getSourceInfoErrorAddendum(elementProps) {
                if (elementProps !== null && elementProps !== undefined && elementProps.__source !== undefined) {
                    var source = elementProps.__source;
                    var fileName = source.fileName.replace(/^.*[\\\/]/, '');
                    var lineNumber = source.lineNumber;
                    return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
                }
                return '';
            }
            var ownerHasKeyUseWarning = {};
            function getCurrentComponentErrorInfo(parentType) {
                var info = getDeclarationErrorAddendum();
                if (!info) {
                    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
                    if (parentName) {
                        info = '\n\nCheck the top-level render call using <' + parentName + '>.';
                    }
                }
                return info;
            }
            function validateExplicitKey(element, parentType) {
                if (!element._store || element._store.validated || element.key != null) {
                    return;
                }
                element._store.validated = true;
                var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
                if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
                    return;
                }
                ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
                var childOwner = '';
                if (element && element._owner && element._owner !== ReactCurrentOwner_1.current) {
                    childOwner = ' It was passed a child from ' + getComponentName(element._owner) + '.';
                }
                currentlyValidatingElement = element;
                {
                    warning$3(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.%s', currentComponentErrorInfo, childOwner, getStackAddendum$1());
                }
                currentlyValidatingElement = null;
            }
            function validateChildKeys(node, parentType) {
                if (typeof node !== 'object') {
                    return;
                }
                if (Array.isArray(node)) {
                    for (var i = 0; i < node.length; i++) {
                        var child = node[i];
                        if (ReactElement_1.isValidElement(child)) {
                            validateExplicitKey(child, parentType);
                        }
                    }
                } else if (ReactElement_1.isValidElement(node)) {
                    if (node._store) {
                        node._store.validated = true;
                    }
                } else if (node) {
                    var iteratorFn = ITERATOR_SYMBOL$1 && node[ITERATOR_SYMBOL$1] || node[FAUX_ITERATOR_SYMBOL$1];
                    if (typeof iteratorFn === 'function') {
                        if (iteratorFn !== node.entries) {
                            var iterator = iteratorFn.call(node);
                            var step;
                            while (!(step = iterator.next()).done) {
                                if (ReactElement_1.isValidElement(step.value)) {
                                    validateExplicitKey(step.value, parentType);
                                }
                            }
                        }
                    }
                }
            }
            function validatePropTypes(element) {
                var componentClass = element.type;
                if (typeof componentClass !== 'function') {
                    return;
                }
                var name = componentClass.displayName || componentClass.name;
                var propTypes = componentClass.propTypes;
                if (propTypes) {
                    currentlyValidatingElement = element;
                    checkPropTypes$1(propTypes, element.props, 'prop', name, getStackAddendum$1);
                    currentlyValidatingElement = null;
                }
                if (typeof componentClass.getDefaultProps === 'function') {
                    warning$3(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');
                }
            }
            var ReactElementValidator$1 = {
                createElement: function (type, props, children) {
                    var validType = typeof type === 'string' || typeof type === 'function';
                    if (!validType) {
                        var info = '';
                        if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
                            info += ' You likely forgot to export your component from the file ' + 'it\'s defined in.';
                        }
                        var sourceInfo = getSourceInfoErrorAddendum(props);
                        if (sourceInfo) {
                            info += sourceInfo;
                        } else {
                            info += getDeclarationErrorAddendum();
                        }
                        info += ReactDebugCurrentFrame$1.getStackAddendum() || '';
                        warning$3(false, 'React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', type == null ? type : typeof type, info);
                    }
                    var element = ReactElement_1.createElement.apply(this, arguments);
                    if (element == null) {
                        return element;
                    }
                    if (validType) {
                        for (var i = 2; i < arguments.length; i++) {
                            validateChildKeys(arguments[i], type);
                        }
                    }
                    validatePropTypes(element);
                    return element;
                },
                createFactory: function (type) {
                    var validatedFactory = ReactElementValidator$1.createElement.bind(null, type);
                    validatedFactory.type = type;
                    {
                        Object.defineProperty(validatedFactory, 'type', {
                            enumerable: false,
                            get: function () {
                                lowPriorityWarning$1(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');
                                Object.defineProperty(this, 'type', { value: type });
                                return type;
                            }
                        });
                    }
                    return validatedFactory;
                },
                cloneElement: function (element, props, children) {
                    var newElement = ReactElement_1.cloneElement.apply(this, arguments);
                    for (var i = 2; i < arguments.length; i++) {
                        validateChildKeys(arguments[i], newElement.type);
                    }
                    validatePropTypes(newElement);
                    return newElement;
                }
            };
            var ReactElementValidator_1 = ReactElementValidator$1;
            {
                var warning$4 = require$$0;
            }
            function isNative(fn) {
                var funcToString = Function.prototype.toString;
                var reIsNative = RegExp('^' + funcToString.call(Object.prototype.hasOwnProperty).replace(/[\\^$.*+?()[\]{}|]/g, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
                try {
                    var source = funcToString.call(fn);
                    return reIsNative.test(source);
                } catch (err) {
                    return false;
                }
            }
            var canUseCollections = typeof Array.from === 'function' && typeof Map === 'function' && isNative(Map) && Map.prototype != null && typeof Map.prototype.keys === 'function' && isNative(Map.prototype.keys) && typeof Set === 'function' && isNative(Set) && Set.prototype != null && typeof Set.prototype.keys === 'function' && isNative(Set.prototype.keys);
            var setItem;
            var getItem;
            var removeItem;
            var getItemIDs;
            var addRoot;
            var removeRoot;
            var getRootIDs;
            if (canUseCollections) {
                var itemMap = new Map();
                var rootIDSet = new Set();
                setItem = function (id, item) {
                    itemMap.set(id, item);
                };
                getItem = function (id) {
                    return itemMap.get(id);
                };
                removeItem = function (id) {
                    itemMap['delete'](id);
                };
                getItemIDs = function () {
                    return Array.from(itemMap.keys());
                };
                addRoot = function (id) {
                    rootIDSet.add(id);
                };
                removeRoot = function (id) {
                    rootIDSet['delete'](id);
                };
                getRootIDs = function () {
                    return Array.from(rootIDSet.keys());
                };
            } else {
                var itemByKey = {};
                var rootByKey = {};
                var getKeyFromID = function (id) {
                    return '.' + id;
                };
                var getIDFromKey = function (key) {
                    return parseInt(key.substr(1), 10);
                };
                setItem = function (id, item) {
                    var key = getKeyFromID(id);
                    itemByKey[key] = item;
                };
                getItem = function (id) {
                    var key = getKeyFromID(id);
                    return itemByKey[key];
                };
                removeItem = function (id) {
                    var key = getKeyFromID(id);
                    delete itemByKey[key];
                };
                getItemIDs = function () {
                    return Object.keys(itemByKey).map(getIDFromKey);
                };
                addRoot = function (id) {
                    var key = getKeyFromID(id);
                    rootByKey[key] = true;
                };
                removeRoot = function (id) {
                    var key = getKeyFromID(id);
                    delete rootByKey[key];
                };
                getRootIDs = function () {
                    return Object.keys(rootByKey).map(getIDFromKey);
                };
            }
            var unmountedIDs = [];
            function purgeDeep(id) {
                var item = getItem(id);
                if (item) {
                    var childIDs = item.childIDs;
                    removeItem(id);
                    childIDs.forEach(purgeDeep);
                }
            }
            function getDisplayName$1(element) {
                if (element == null) {
                    return '#empty';
                } else if (typeof element === 'string' || typeof element === 'number') {
                    return '#text';
                } else if (typeof element.type === 'string') {
                    return element.type;
                } else {
                    return element.type.displayName || element.type.name || 'Unknown';
                }
            }
            function describeID(id) {
                var name = ReactComponentTreeHook.getDisplayName(id);
                var element = ReactComponentTreeHook.getElement(id);
                var ownerID = ReactComponentTreeHook.getOwnerID(id);
                var ownerName = void 0;
                if (ownerID) {
                    ownerName = ReactComponentTreeHook.getDisplayName(ownerID);
                }
                warning$4(element, 'ReactComponentTreeHook: Missing React element for debugID %s when ' + 'building stack', id);
                return describeComponentFrame$1(name || '', element && element._source, ownerName || '');
            }
            var ReactComponentTreeHook = {
                onSetChildren: function (id, nextChildIDs) {
                    var item = getItem(id);
                    !item ? invariant(false, 'Item must have been set') : void 0;
                    item.childIDs = nextChildIDs;
                    for (var i = 0; i < nextChildIDs.length; i++) {
                        var nextChildID = nextChildIDs[i];
                        var nextChild = getItem(nextChildID);
                        !nextChild ? invariant(false, 'Expected hook events to fire for the child before its parent includes it in onSetChildren().') : void 0;
                        !(nextChild.childIDs != null || typeof nextChild.element !== 'object' || nextChild.element == null) ? invariant(false, 'Expected onSetChildren() to fire for a container child before its parent includes it in onSetChildren().') : void 0;
                        !nextChild.isMounted ? invariant(false, 'Expected onMountComponent() to fire for the child before its parent includes it in onSetChildren().') : void 0;
                        if (nextChild.parentID == null) {
                            nextChild.parentID = id;
                        }
                        !(nextChild.parentID === id) ? invariant(false, 'Expected onBeforeMountComponent() parent and onSetChildren() to be consistent (%s has parents %s and %s).', nextChildID, nextChild.parentID, id) : void 0;
                    }
                },
                onBeforeMountComponent: function (id, element, parentID) {
                    var item = {
                        element: element,
                        parentID: parentID,
                        text: null,
                        childIDs: [],
                        isMounted: false,
                        updateCount: 0
                    };
                    setItem(id, item);
                },
                onBeforeUpdateComponent: function (id, element) {
                    var item = getItem(id);
                    if (!item || !item.isMounted) {
                        return;
                    }
                    item.element = element;
                },
                onMountComponent: function (id) {
                    var item = getItem(id);
                    !item ? invariant(false, 'Item must have been set') : void 0;
                    item.isMounted = true;
                    var isRoot = item.parentID === 0;
                    if (isRoot) {
                        addRoot(id);
                    }
                },
                onUpdateComponent: function (id) {
                    var item = getItem(id);
                    if (!item || !item.isMounted) {
                        return;
                    }
                    item.updateCount++;
                },
                onUnmountComponent: function (id) {
                    var item = getItem(id);
                    if (item) {
                        item.isMounted = false;
                        var isRoot = item.parentID === 0;
                        if (isRoot) {
                            removeRoot(id);
                        }
                    }
                    unmountedIDs.push(id);
                },
                purgeUnmountedComponents: function () {
                    if (ReactComponentTreeHook._preventPurging) {
                        return;
                    }
                    for (var i = 0; i < unmountedIDs.length; i++) {
                        var id = unmountedIDs[i];
                        purgeDeep(id);
                    }
                    unmountedIDs.length = 0;
                },
                isMounted: function (id) {
                    var item = getItem(id);
                    return item ? item.isMounted : false;
                },
                getCurrentStackAddendum: function () {
                    var info = '';
                    var currentOwner = ReactCurrentOwner_1.current;
                    if (currentOwner) {
                        !(typeof currentOwner.tag !== 'number') ? invariant(false, 'Fiber owners should not show up in Stack stack traces.') : void 0;
                        if (typeof currentOwner._debugID === 'number') {
                            info += ReactComponentTreeHook.getStackAddendumByID(currentOwner._debugID);
                        }
                    }
                    return info;
                },
                getStackAddendumByID: function (id) {
                    var info = '';
                    while (id) {
                        info += describeID(id);
                        id = ReactComponentTreeHook.getParentID(id);
                    }
                    return info;
                },
                getChildIDs: function (id) {
                    var item = getItem(id);
                    return item ? item.childIDs : [];
                },
                getDisplayName: function (id) {
                    var element = ReactComponentTreeHook.getElement(id);
                    if (!element) {
                        return null;
                    }
                    return getDisplayName$1(element);
                },
                getElement: function (id) {
                    var item = getItem(id);
                    return item ? item.element : null;
                },
                getOwnerID: function (id) {
                    var element = ReactComponentTreeHook.getElement(id);
                    if (!element || !element._owner) {
                        return null;
                    }
                    return element._owner._debugID;
                },
                getParentID: function (id) {
                    var item = getItem(id);
                    return item ? item.parentID : null;
                },
                getSource: function (id) {
                    var item = getItem(id);
                    var element = item ? item.element : null;
                    var source = element != null ? element._source : null;
                    return source;
                },
                getText: function (id) {
                    var element = ReactComponentTreeHook.getElement(id);
                    if (typeof element === 'string') {
                        return element;
                    } else if (typeof element === 'number') {
                        return '' + element;
                    } else {
                        return null;
                    }
                },
                getUpdateCount: function (id) {
                    var item = getItem(id);
                    return item ? item.updateCount : 0;
                },
                getRootIDs: getRootIDs,
                getRegisteredIDs: getItemIDs
            };
            var ReactComponentTreeHook_1 = ReactComponentTreeHook;
            var createElement = ReactElement_1.createElement;
            var createFactory = ReactElement_1.createFactory;
            var cloneElement = ReactElement_1.cloneElement;
            {
                var ReactElementValidator = ReactElementValidator_1;
                createElement = ReactElementValidator.createElement;
                createFactory = ReactElementValidator.createFactory;
                cloneElement = ReactElementValidator.cloneElement;
            }
            var React = {
                Children: {
                    map: ReactChildren_1.map,
                    forEach: ReactChildren_1.forEach,
                    count: ReactChildren_1.count,
                    toArray: ReactChildren_1.toArray,
                    only: onlyChild_1
                },
                Component: ReactBaseClasses.Component,
                PureComponent: ReactBaseClasses.PureComponent,
                unstable_AsyncComponent: ReactBaseClasses.AsyncComponent,
                createElement: createElement,
                cloneElement: cloneElement,
                isValidElement: ReactElement_1.isValidElement,
                createFactory: createFactory,
                version: ReactVersion,
                __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
                    ReactCurrentOwner: ReactCurrentOwner_1,
                    assign: objectAssign$1
                }
            };
            {
                objectAssign$1(React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, {
                    ReactComponentTreeHook: ReactComponentTreeHook_1,
                    ReactDebugCurrentFrame: ReactDebugCurrentFrame_1
                });
            }
            var ReactEntry = React;
            module.exports = ReactEntry;
        }());
    }
});
/*react@16.0.0#index*/
define('react@16.0.0#index', [
    'require',
    'exports',
    'module',
    './cjs/react.production.min.js',
    './cjs/react.development.js'
], function (require, exports, module) {
    'use strict';
    if (process.env.NODE_ENV === 'production') {
        module.exports = require('./cjs/react.production.min.js');
    } else {
        module.exports = require('./cjs/react.development.js');
    }
});
/*fbjs@0.8.16#lib/ExecutionEnvironment*/
define('fbjs@0.8.16#lib/ExecutionEnvironment', function (require, exports, module) {
    'use strict';
    var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
    var ExecutionEnvironment = {
        canUseDOM: canUseDOM,
        canUseWorkers: typeof Worker !== 'undefined',
        canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),
        canUseViewport: canUseDOM && !!window.screen,
        isInWorker: !canUseDOM
    };
    module.exports = ExecutionEnvironment;
});
/*fbjs@0.8.16#lib/EventListener*/
define('fbjs@0.8.16#lib/EventListener', [
    'require',
    'exports',
    'module',
    './emptyFunction'
], function (require, exports, module) {
    'use strict';
    var emptyFunction = require('./emptyFunction');
    var EventListener = {
        listen: function listen(target, eventType, callback) {
            if (target.addEventListener) {
                target.addEventListener(eventType, callback, false);
                return {
                    remove: function remove() {
                        target.removeEventListener(eventType, callback, false);
                    }
                };
            } else if (target.attachEvent) {
                target.attachEvent('on' + eventType, callback);
                return {
                    remove: function remove() {
                        target.detachEvent('on' + eventType, callback);
                    }
                };
            }
        },
        capture: function capture(target, eventType, callback) {
            if (target.addEventListener) {
                target.addEventListener(eventType, callback, true);
                return {
                    remove: function remove() {
                        target.removeEventListener(eventType, callback, true);
                    }
                };
            } else {
                if (process.env.NODE_ENV !== 'production') {
                    console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');
                }
                return { remove: emptyFunction };
            }
        },
        registerDefault: function registerDefault() {
        }
    };
    module.exports = EventListener;
});
/*fbjs@0.8.16#lib/shallowEqual*/
define('fbjs@0.8.16#lib/shallowEqual', function (require, exports, module) {
    'use strict';
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    function is(x, y) {
        if (x === y) {
            return x !== 0 || y !== 0 || 1 / x === 1 / y;
        } else {
            return x !== x && y !== y;
        }
    }
    function shallowEqual(objA, objB) {
        if (is(objA, objB)) {
            return true;
        }
        if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
            return false;
        }
        var keysA = Object.keys(objA);
        var keysB = Object.keys(objB);
        if (keysA.length !== keysB.length) {
            return false;
        }
        for (var i = 0; i < keysA.length; i++) {
            if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
                return false;
            }
        }
        return true;
    }
    module.exports = shallowEqual;
});
/*fbjs@0.8.16#lib/isNode*/
define('fbjs@0.8.16#lib/isNode', function (require, exports, module) {
    'use strict';
    function isNode(object) {
        var doc = object ? object.ownerDocument || object : document;
        var defaultView = doc.defaultView || window;
        return !!(object && (typeof defaultView.Node === 'function' ? object instanceof defaultView.Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
    }
    module.exports = isNode;
});
/*fbjs@0.8.16#lib/isTextNode*/
define('fbjs@0.8.16#lib/isTextNode', [
    'require',
    'exports',
    'module',
    './isNode'
], function (require, exports, module) {
    'use strict';
    var isNode = require('./isNode');
    function isTextNode(object) {
        return isNode(object) && object.nodeType == 3;
    }
    module.exports = isTextNode;
});
/*fbjs@0.8.16#lib/containsNode*/
define('fbjs@0.8.16#lib/containsNode', [
    'require',
    'exports',
    'module',
    './isTextNode'
], function (require, exports, module) {
    'use strict';
    var isTextNode = require('./isTextNode');
    function containsNode(outerNode, innerNode) {
        if (!outerNode || !innerNode) {
            return false;
        } else if (outerNode === innerNode) {
            return true;
        } else if (isTextNode(outerNode)) {
            return false;
        } else if (isTextNode(innerNode)) {
            return containsNode(outerNode, innerNode.parentNode);
        } else if ('contains' in outerNode) {
            return outerNode.contains(innerNode);
        } else if (outerNode.compareDocumentPosition) {
            return !!(outerNode.compareDocumentPosition(innerNode) & 16);
        } else {
            return false;
        }
    }
    module.exports = containsNode;
});
/*fbjs@0.8.16#lib/focusNode*/
define('fbjs@0.8.16#lib/focusNode', function (require, exports, module) {
    'use strict';
    function focusNode(node) {
        try {
            node.focus();
        } catch (e) {
        }
    }
    module.exports = focusNode;
});
/*fbjs@0.8.16#lib/getActiveElement*/
define('fbjs@0.8.16#lib/getActiveElement', function (require, exports, module) {
    'use strict';
    function getActiveElement(doc) {
        doc = doc || (typeof document !== 'undefined' ? document : undefined);
        if (typeof doc === 'undefined') {
            return null;
        }
        try {
            return doc.activeElement || doc.body;
        } catch (e) {
            return doc.body;
        }
    }
    module.exports = getActiveElement;
});
/*react-dom@16.0.0#cjs/react-dom.production.min*/
define('react-dom@16.0.0#cjs/react-dom.production.min', [
    'require',
    'exports',
    'module',
    'react',
    'fbjs/lib/invariant',
    'fbjs/lib/ExecutionEnvironment',
    'object-assign',
    'fbjs/lib/EventListener',
    'fbjs/lib/emptyFunction',
    'fbjs/lib/emptyObject',
    'fbjs/lib/shallowEqual',
    'fbjs/lib/containsNode',
    'fbjs/lib/focusNode',
    'fbjs/lib/getActiveElement'
], function (require, exports, module) {
    'use strict';
    var aa = require('react');
    require('fbjs/lib/invariant');
    var l = require('fbjs/lib/ExecutionEnvironment'), n = require('object-assign'), ba = require('fbjs/lib/EventListener'), ca = require('fbjs/lib/emptyFunction'), da = require('fbjs/lib/emptyObject'), ea = require('fbjs/lib/shallowEqual'), fa = require('fbjs/lib/containsNode'), ha = require('fbjs/lib/focusNode'), ia = require('fbjs/lib/getActiveElement');
    function w(a) {
        for (var b = arguments.length - 1, c = 'Minified React error #' + a + '; visit http://facebook.github.io/react/docs/error-decoder.html?invariant=' + a, d = 0; d < b; d++)
            c += '&args[]=' + encodeURIComponent(arguments[d + 1]);
        b = Error(c + ' for the full message or use the non-minified dev environment for full errors and additional helpful warnings.');
        b.name = 'Invariant Violation';
        b.framesToPop = 1;
        throw b;
    }
    aa ? void 0 : w('227');
    function ja(a) {
        switch (a) {
        case 'svg':
            return 'http://www.w3.org/2000/svg';
        case 'math':
            return 'http://www.w3.org/1998/Math/MathML';
        default:
            return 'http://www.w3.org/1999/xhtml';
        }
    }
    var ka = {
            Namespaces: {
                html: 'http://www.w3.org/1999/xhtml',
                mathml: 'http://www.w3.org/1998/Math/MathML',
                svg: 'http://www.w3.org/2000/svg'
            },
            getIntrinsicNamespace: ja,
            getChildNamespace: function (a, b) {
                return null == a || 'http://www.w3.org/1999/xhtml' === a ? ja(b) : 'http://www.w3.org/2000/svg' === a && 'foreignObject' === b ? 'http://www.w3.org/1999/xhtml' : a;
            }
        }, la = null, oa = {};
    function pa() {
        if (la)
            for (var a in oa) {
                var b = oa[a], c = la.indexOf(a);
                -1 < c ? void 0 : w('96', a);
                if (!qa.plugins[c]) {
                    b.extractEvents ? void 0 : w('97', a);
                    qa.plugins[c] = b;
                    c = b.eventTypes;
                    for (var d in c) {
                        var e = void 0;
                        var f = c[d], g = b, h = d;
                        qa.eventNameDispatchConfigs.hasOwnProperty(h) ? w('99', h) : void 0;
                        qa.eventNameDispatchConfigs[h] = f;
                        var k = f.phasedRegistrationNames;
                        if (k) {
                            for (e in k)
                                k.hasOwnProperty(e) && ra(k[e], g, h);
                            e = !0;
                        } else
                            f.registrationName ? (ra(f.registrationName, g, h), e = !0) : e = !1;
                        e ? void 0 : w('98', d, a);
                    }
                }
            }
    }
    function ra(a, b, c) {
        qa.registrationNameModules[a] ? w('100', a) : void 0;
        qa.registrationNameModules[a] = b;
        qa.registrationNameDependencies[a] = b.eventTypes[c].dependencies;
    }
    var qa = {
            plugins: [],
            eventNameDispatchConfigs: {},
            registrationNameModules: {},
            registrationNameDependencies: {},
            possibleRegistrationNames: null,
            injectEventPluginOrder: function (a) {
                la ? w('101') : void 0;
                la = Array.prototype.slice.call(a);
                pa();
            },
            injectEventPluginsByName: function (a) {
                var b = !1, c;
                for (c in a)
                    if (a.hasOwnProperty(c)) {
                        var d = a[c];
                        oa.hasOwnProperty(c) && oa[c] === d || (oa[c] ? w('102', c) : void 0, oa[c] = d, b = !0);
                    }
                b && pa();
            }
        }, sa = qa, ta = {
            children: !0,
            dangerouslySetInnerHTML: !0,
            autoFocus: !0,
            defaultValue: !0,
            defaultChecked: !0,
            innerHTML: !0,
            suppressContentEditableWarning: !0,
            style: !0
        };
    function ua(a, b) {
        return (a & b) === b;
    }
    var wa = {
            MUST_USE_PROPERTY: 1,
            HAS_BOOLEAN_VALUE: 4,
            HAS_NUMERIC_VALUE: 8,
            HAS_POSITIVE_NUMERIC_VALUE: 24,
            HAS_OVERLOADED_BOOLEAN_VALUE: 32,
            HAS_STRING_BOOLEAN_VALUE: 64,
            injectDOMPropertyConfig: function (a) {
                var b = wa, c = a.Properties || {}, d = a.DOMAttributeNamespaces || {}, e = a.DOMAttributeNames || {};
                a = a.DOMMutationMethods || {};
                for (var f in c) {
                    xa.properties.hasOwnProperty(f) ? w('48', f) : void 0;
                    var g = f.toLowerCase(), h = c[f];
                    g = {
                        attributeName: g,
                        attributeNamespace: null,
                        propertyName: f,
                        mutationMethod: null,
                        mustUseProperty: ua(h, b.MUST_USE_PROPERTY),
                        hasBooleanValue: ua(h, b.HAS_BOOLEAN_VALUE),
                        hasNumericValue: ua(h, b.HAS_NUMERIC_VALUE),
                        hasPositiveNumericValue: ua(h, b.HAS_POSITIVE_NUMERIC_VALUE),
                        hasOverloadedBooleanValue: ua(h, b.HAS_OVERLOADED_BOOLEAN_VALUE),
                        hasStringBooleanValue: ua(h, b.HAS_STRING_BOOLEAN_VALUE)
                    };
                    1 >= g.hasBooleanValue + g.hasNumericValue + g.hasOverloadedBooleanValue ? void 0 : w('50', f);
                    e.hasOwnProperty(f) && (g.attributeName = e[f]);
                    d.hasOwnProperty(f) && (g.attributeNamespace = d[f]);
                    a.hasOwnProperty(f) && (g.mutationMethod = a[f]);
                    xa.properties[f] = g;
                }
            }
        }, xa = {
            ID_ATTRIBUTE_NAME: 'data-reactid',
            ROOT_ATTRIBUTE_NAME: 'data-reactroot',
            ATTRIBUTE_NAME_START_CHAR: ':A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD',
            ATTRIBUTE_NAME_CHAR: ':A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040',
            properties: {},
            shouldSetAttribute: function (a, b) {
                if (xa.isReservedProp(a) || !('o' !== a[0] && 'O' !== a[0] || 'n' !== a[1] && 'N' !== a[1]))
                    return !1;
                if (null === b)
                    return !0;
                switch (typeof b) {
                case 'boolean':
                    return xa.shouldAttributeAcceptBooleanValue(a);
                case 'undefined':
                case 'number':
                case 'string':
                case 'object':
                    return !0;
                default:
                    return !1;
                }
            },
            getPropertyInfo: function (a) {
                return xa.properties.hasOwnProperty(a) ? xa.properties[a] : null;
            },
            shouldAttributeAcceptBooleanValue: function (a) {
                if (xa.isReservedProp(a))
                    return !0;
                var b = xa.getPropertyInfo(a);
                if (b)
                    return b.hasBooleanValue || b.hasStringBooleanValue || b.hasOverloadedBooleanValue;
                a = a.toLowerCase().slice(0, 5);
                return 'data-' === a || 'aria-' === a;
            },
            isReservedProp: function (a) {
                return ta.hasOwnProperty(a);
            },
            injection: wa
        }, A = xa, E = {
            IndeterminateComponent: 0,
            FunctionalComponent: 1,
            ClassComponent: 2,
            HostRoot: 3,
            HostPortal: 4,
            HostComponent: 5,
            HostText: 6,
            CoroutineComponent: 7,
            CoroutineHandlerPhase: 8,
            YieldComponent: 9,
            Fragment: 10
        }, F = {
            ELEMENT_NODE: 1,
            TEXT_NODE: 3,
            COMMENT_NODE: 8,
            DOCUMENT_NODE: 9,
            DOCUMENT_FRAGMENT_NODE: 11
        }, ya = E.HostComponent, za = E.HostText, Aa = F.ELEMENT_NODE, Ba = F.COMMENT_NODE, Ea = A.ID_ATTRIBUTE_NAME, Fa = { hasCachedChildNodes: 1 }, Ga = Math.random().toString(36).slice(2), Ha = '__reactInternalInstance$' + Ga, Ia = '__reactEventHandlers$' + Ga;
    function La(a) {
        for (var b; b = a._renderedComponent;)
            a = b;
        return a;
    }
    function Ma(a, b) {
        a = La(a);
        a._hostNode = b;
        b[Ha] = a;
    }
    function Na(a, b) {
        if (!(a._flags & Fa.hasCachedChildNodes)) {
            var c = a._renderedChildren;
            b = b.firstChild;
            var d;
            a:
                for (d in c)
                    if (c.hasOwnProperty(d)) {
                        var e = c[d], f = La(e)._domID;
                        if (0 !== f) {
                            for (; null !== b; b = b.nextSibling) {
                                var g = b, h = f;
                                if (g.nodeType === Aa && g.getAttribute(Ea) === '' + h || g.nodeType === Ba && g.nodeValue === ' react-text: ' + h + ' ' || g.nodeType === Ba && g.nodeValue === ' react-empty: ' + h + ' ') {
                                    Ma(e, b);
                                    continue a;
                                }
                            }
                            w('32', f);
                        }
                    }
            a._flags |= Fa.hasCachedChildNodes;
        }
    }
    function Oa(a) {
        if (a[Ha])
            return a[Ha];
        for (var b = []; !a[Ha];)
            if (b.push(a), a.parentNode)
                a = a.parentNode;
            else
                return null;
        var c = a[Ha];
        if (c.tag === ya || c.tag === za)
            return c;
        for (; a && (c = a[Ha]); a = b.pop()) {
            var d = c;
            b.length && Na(c, a);
        }
        return d;
    }
    var G = {
            getClosestInstanceFromNode: Oa,
            getInstanceFromNode: function (a) {
                var b = a[Ha];
                if (b)
                    return b.tag === ya || b.tag === za ? b : b._hostNode === a ? b : null;
                b = Oa(a);
                return null != b && b._hostNode === a ? b : null;
            },
            getNodeFromInstance: function (a) {
                if (a.tag === ya || a.tag === za)
                    return a.stateNode;
                void 0 === a._hostNode ? w('33') : void 0;
                if (a._hostNode)
                    return a._hostNode;
                for (var b = []; !a._hostNode;)
                    b.push(a), a._hostParent ? void 0 : w('34'), a = a._hostParent;
                for (; b.length; a = b.pop())
                    Na(a, a._hostNode);
                return a._hostNode;
            },
            precacheChildNodes: Na,
            precacheNode: Ma,
            uncacheNode: function (a) {
                var b = a._hostNode;
                b && (delete b[Ha], a._hostNode = null);
            },
            precacheFiberNode: function (a, b) {
                b[Ha] = a;
            },
            getFiberCurrentPropsFromNode: function (a) {
                return a[Ia] || null;
            },
            updateFiberProps: function (a, b) {
                a[Ia] = b;
            }
        }, Pa = {
            remove: function (a) {
                a._reactInternalFiber = void 0;
            },
            get: function (a) {
                return a._reactInternalFiber;
            },
            has: function (a) {
                return void 0 !== a._reactInternalFiber;
            },
            set: function (a, b) {
                a._reactInternalFiber = b;
            }
        }, Qa = { ReactCurrentOwner: aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner };
    function Ra(a) {
        if ('function' === typeof a.getName)
            return a.getName();
        if ('number' === typeof a.tag) {
            a = a.type;
            if ('string' === typeof a)
                return a;
            if ('function' === typeof a)
                return a.displayName || a.name;
        }
        return null;
    }
    var J = {
            NoEffect: 0,
            PerformedWork: 1,
            Placement: 2,
            Update: 4,
            PlacementAndUpdate: 6,
            Deletion: 8,
            ContentReset: 16,
            Callback: 32,
            Err: 64,
            Ref: 128
        }, Sa = E.HostComponent, Ta = E.HostRoot, Ua = E.HostPortal, Va = E.HostText, Wa = J.NoEffect, Xa = J.Placement;
    function Za(a) {
        var b = a;
        if (a.alternate)
            for (; b['return'];)
                b = b['return'];
        else {
            if ((b.effectTag & Xa) !== Wa)
                return 1;
            for (; b['return'];)
                if (b = b['return'], (b.effectTag & Xa) !== Wa)
                    return 1;
        }
        return b.tag === Ta ? 2 : 3;
    }
    function $a(a) {
        2 !== Za(a) ? w('188') : void 0;
    }
    function ab(a) {
        var b = a.alternate;
        if (!b)
            return b = Za(a), 3 === b ? w('188') : void 0, 1 === b ? null : a;
        for (var c = a, d = b;;) {
            var e = c['return'], f = e ? e.alternate : null;
            if (!e || !f)
                break;
            if (e.child === f.child) {
                for (var g = e.child; g;) {
                    if (g === c)
                        return $a(e), a;
                    if (g === d)
                        return $a(e), b;
                    g = g.sibling;
                }
                w('188');
            }
            if (c['return'] !== d['return'])
                c = e, d = f;
            else {
                g = !1;
                for (var h = e.child; h;) {
                    if (h === c) {
                        g = !0;
                        c = e;
                        d = f;
                        break;
                    }
                    if (h === d) {
                        g = !0;
                        d = e;
                        c = f;
                        break;
                    }
                    h = h.sibling;
                }
                if (!g) {
                    for (h = f.child; h;) {
                        if (h === c) {
                            g = !0;
                            c = f;
                            d = e;
                            break;
                        }
                        if (h === d) {
                            g = !0;
                            d = f;
                            c = e;
                            break;
                        }
                        h = h.sibling;
                    }
                    g ? void 0 : w('189');
                }
            }
            c.alternate !== d ? w('190') : void 0;
        }
        c.tag !== Ta ? w('188') : void 0;
        return c.stateNode.current === c ? a : b;
    }
    var bb = {
            isFiberMounted: function (a) {
                return 2 === Za(a);
            },
            isMounted: function (a) {
                return (a = Pa.get(a)) ? 2 === Za(a) : !1;
            },
            findCurrentFiberUsingSlowPath: ab,
            findCurrentHostFiber: function (a) {
                a = ab(a);
                if (!a)
                    return null;
                for (var b = a;;) {
                    if (b.tag === Sa || b.tag === Va)
                        return b;
                    if (b.child)
                        b.child['return'] = b, b = b.child;
                    else {
                        if (b === a)
                            break;
                        for (; !b.sibling;) {
                            if (!b['return'] || b['return'] === a)
                                return null;
                            b = b['return'];
                        }
                        b.sibling['return'] = b['return'];
                        b = b.sibling;
                    }
                }
                return null;
            },
            findCurrentHostFiberWithNoPortals: function (a) {
                a = ab(a);
                if (!a)
                    return null;
                for (var b = a;;) {
                    if (b.tag === Sa || b.tag === Va)
                        return b;
                    if (b.child && b.tag !== Ua)
                        b.child['return'] = b, b = b.child;
                    else {
                        if (b === a)
                            break;
                        for (; !b.sibling;) {
                            if (!b['return'] || b['return'] === a)
                                return null;
                            b = b['return'];
                        }
                        b.sibling['return'] = b['return'];
                        b = b.sibling;
                    }
                }
                return null;
            }
        }, K = {
            _caughtError: null,
            _hasCaughtError: !1,
            _rethrowError: null,
            _hasRethrowError: !1,
            injection: {
                injectErrorUtils: function (a) {
                    'function' !== typeof a.invokeGuardedCallback ? w('197') : void 0;
                    cb = a.invokeGuardedCallback;
                }
            },
            invokeGuardedCallback: function (a, b, c, d, e, f, g, h, k) {
                cb.apply(K, arguments);
            },
            invokeGuardedCallbackAndCatchFirstError: function (a, b, c, d, e, f, g, h, k) {
                K.invokeGuardedCallback.apply(this, arguments);
                if (K.hasCaughtError()) {
                    var p = K.clearCaughtError();
                    K._hasRethrowError || (K._hasRethrowError = !0, K._rethrowError = p);
                }
            },
            rethrowCaughtError: function () {
                return db.apply(K, arguments);
            },
            hasCaughtError: function () {
                return K._hasCaughtError;
            },
            clearCaughtError: function () {
                if (K._hasCaughtError) {
                    var a = K._caughtError;
                    K._caughtError = null;
                    K._hasCaughtError = !1;
                    return a;
                }
                w('198');
            }
        };
    function cb(a, b, c, d, e, f, g, h, k) {
        K._hasCaughtError = !1;
        K._caughtError = null;
        var p = Array.prototype.slice.call(arguments, 3);
        try {
            b.apply(c, p);
        } catch (x) {
            K._caughtError = x, K._hasCaughtError = !0;
        }
    }
    function db() {
        if (K._hasRethrowError) {
            var a = K._rethrowError;
            K._rethrowError = null;
            K._hasRethrowError = !1;
            throw a;
        }
    }
    var eb = K, fb;
    function gb(a, b, c, d) {
        b = a.type || 'unknown-event';
        a.currentTarget = hb.getNodeFromInstance(d);
        eb.invokeGuardedCallbackAndCatchFirstError(b, c, void 0, a);
        a.currentTarget = null;
    }
    var hb = {
            isEndish: function (a) {
                return 'topMouseUp' === a || 'topTouchEnd' === a || 'topTouchCancel' === a;
            },
            isMoveish: function (a) {
                return 'topMouseMove' === a || 'topTouchMove' === a;
            },
            isStartish: function (a) {
                return 'topMouseDown' === a || 'topTouchStart' === a;
            },
            executeDirectDispatch: function (a) {
                var b = a._dispatchListeners, c = a._dispatchInstances;
                Array.isArray(b) ? w('103') : void 0;
                a.currentTarget = b ? hb.getNodeFromInstance(c) : null;
                b = b ? b(a) : null;
                a.currentTarget = null;
                a._dispatchListeners = null;
                a._dispatchInstances = null;
                return b;
            },
            executeDispatchesInOrder: function (a, b) {
                var c = a._dispatchListeners, d = a._dispatchInstances;
                if (Array.isArray(c))
                    for (var e = 0; e < c.length && !a.isPropagationStopped(); e++)
                        gb(a, b, c[e], d[e]);
                else
                    c && gb(a, b, c, d);
                a._dispatchListeners = null;
                a._dispatchInstances = null;
            },
            executeDispatchesInOrderStopAtTrue: function (a) {
                a: {
                    var b = a._dispatchListeners;
                    var c = a._dispatchInstances;
                    if (Array.isArray(b))
                        for (var d = 0; d < b.length && !a.isPropagationStopped(); d++) {
                            if (b[d](a, c[d])) {
                                b = c[d];
                                break a;
                            }
                        }
                    else if (b && b(a, c)) {
                        b = c;
                        break a;
                    }
                    b = null;
                }
                a._dispatchInstances = null;
                a._dispatchListeners = null;
                return b;
            },
            hasDispatches: function (a) {
                return !!a._dispatchListeners;
            },
            getFiberCurrentPropsFromNode: function (a) {
                return fb.getFiberCurrentPropsFromNode(a);
            },
            getInstanceFromNode: function (a) {
                return fb.getInstanceFromNode(a);
            },
            getNodeFromInstance: function (a) {
                return fb.getNodeFromInstance(a);
            },
            injection: {
                injectComponentTree: function (a) {
                    fb = a;
                }
            }
        }, ib = hb, jb = null, kb = null, lb = null;
    function mb(a) {
        if (a = ib.getInstanceFromNode(a))
            if ('number' === typeof a.tag) {
                jb && 'function' === typeof jb.restoreControlledState ? void 0 : w('194');
                var b = ib.getFiberCurrentPropsFromNode(a.stateNode);
                jb.restoreControlledState(a.stateNode, a.type, b);
            } else
                'function' !== typeof a.restoreControlledState ? w('195') : void 0, a.restoreControlledState();
    }
    var nb = {
        injection: {
            injectFiberControlledHostComponent: function (a) {
                jb = a;
            }
        },
        enqueueStateRestore: function (a) {
            kb ? lb ? lb.push(a) : lb = [a] : kb = a;
        },
        restoreStateIfNeeded: function () {
            if (kb) {
                var a = kb, b = lb;
                lb = kb = null;
                mb(a);
                if (b)
                    for (a = 0; a < b.length; a++)
                        mb(b[a]);
            }
        }
    };
    function ob(a, b, c, d, e, f) {
        return a(b, c, d, e, f);
    }
    function pb(a, b) {
        return a(b);
    }
    function qb(a, b) {
        return pb(a, b);
    }
    var rb = !1, sb = {
            batchedUpdates: function (a, b) {
                if (rb)
                    return ob(qb, a, b);
                rb = !0;
                try {
                    return ob(qb, a, b);
                } finally {
                    rb = !1, nb.restoreStateIfNeeded();
                }
            },
            injection: {
                injectStackBatchedUpdates: function (a) {
                    ob = a;
                },
                injectFiberBatchedUpdates: function (a) {
                    pb = a;
                }
            }
        }, tb = F.TEXT_NODE;
    function ub(a) {
        a = a.target || a.srcElement || window;
        a.correspondingUseElement && (a = a.correspondingUseElement);
        return a.nodeType === tb ? a.parentNode : a;
    }
    var vb = E.HostRoot, wb = [];
    function xb(a) {
        var b = a.targetInst;
        do {
            if (!b) {
                a.ancestors.push(b);
                break;
            }
            var c = b;
            if ('number' === typeof c.tag) {
                for (; c['return'];)
                    c = c['return'];
                c = c.tag !== vb ? null : c.stateNode.containerInfo;
            } else {
                for (; c._hostParent;)
                    c = c._hostParent;
                c = G.getNodeFromInstance(c).parentNode;
            }
            if (!c)
                break;
            a.ancestors.push(b);
            b = G.getClosestInstanceFromNode(c);
        } while (b);
        for (c = 0; c < a.ancestors.length; c++)
            b = a.ancestors[c], yb._handleTopLevel(a.topLevelType, b, a.nativeEvent, ub(a.nativeEvent));
    }
    var yb = {
            _enabled: !0,
            _handleTopLevel: null,
            setHandleTopLevel: function (a) {
                yb._handleTopLevel = a;
            },
            setEnabled: function (a) {
                yb._enabled = !!a;
            },
            isEnabled: function () {
                return yb._enabled;
            },
            trapBubbledEvent: function (a, b, c) {
                return c ? ba.listen(c, b, yb.dispatchEvent.bind(null, a)) : null;
            },
            trapCapturedEvent: function (a, b, c) {
                return c ? ba.capture(c, b, yb.dispatchEvent.bind(null, a)) : null;
            },
            dispatchEvent: function (a, b) {
                if (yb._enabled) {
                    var c = ub(b);
                    c = G.getClosestInstanceFromNode(c);
                    null === c || 'number' !== typeof c.tag || bb.isFiberMounted(c) || (c = null);
                    if (wb.length) {
                        var d = wb.pop();
                        d.topLevelType = a;
                        d.nativeEvent = b;
                        d.targetInst = c;
                        a = d;
                    } else
                        a = {
                            topLevelType: a,
                            nativeEvent: b,
                            targetInst: c,
                            ancestors: []
                        };
                    try {
                        sb.batchedUpdates(xb, a);
                    } finally {
                        a.topLevelType = null, a.nativeEvent = null, a.targetInst = null, a.ancestors.length = 0, 10 > wb.length && wb.push(a);
                    }
                }
            }
        }, L = yb;
    function Cb(a, b) {
        null == b ? w('30') : void 0;
        if (null == a)
            return b;
        if (Array.isArray(a)) {
            if (Array.isArray(b))
                return a.push.apply(a, b), a;
            a.push(b);
            return a;
        }
        return Array.isArray(b) ? [a].concat(b) : [
            a,
            b
        ];
    }
    function Db(a, b, c) {
        Array.isArray(a) ? a.forEach(b, c) : a && b.call(c, a);
    }
    var Eb = null;
    function Fb(a, b) {
        a && (ib.executeDispatchesInOrder(a, b), a.isPersistent() || a.constructor.release(a));
    }
    function Gb(a) {
        return Fb(a, !0);
    }
    function Hb(a) {
        return Fb(a, !1);
    }
    function Ib(a, b, c) {
        switch (a) {
        case 'onClick':
        case 'onClickCapture':
        case 'onDoubleClick':
        case 'onDoubleClickCapture':
        case 'onMouseDown':
        case 'onMouseDownCapture':
        case 'onMouseMove':
        case 'onMouseMoveCapture':
        case 'onMouseUp':
        case 'onMouseUpCapture':
            return !(!c.disabled || 'button' !== b && 'input' !== b && 'select' !== b && 'textarea' !== b);
        default:
            return !1;
        }
    }
    var Jb = {
            injection: {
                injectEventPluginOrder: sa.injectEventPluginOrder,
                injectEventPluginsByName: sa.injectEventPluginsByName
            },
            getListener: function (a, b) {
                if ('number' === typeof a.tag) {
                    var c = a.stateNode;
                    if (!c)
                        return null;
                    var d = ib.getFiberCurrentPropsFromNode(c);
                    if (!d)
                        return null;
                    c = d[b];
                    if (Ib(b, a.type, d))
                        return null;
                } else {
                    d = a._currentElement;
                    if ('string' === typeof d || 'number' === typeof d || !a._rootNodeID)
                        return null;
                    a = d.props;
                    c = a[b];
                    if (Ib(b, d.type, a))
                        return null;
                }
                c && 'function' !== typeof c ? w('231', b, typeof c) : void 0;
                return c;
            },
            extractEvents: function (a, b, c, d) {
                for (var e, f = sa.plugins, g = 0; g < f.length; g++) {
                    var h = f[g];
                    h && (h = h.extractEvents(a, b, c, d)) && (e = Cb(e, h));
                }
                return e;
            },
            enqueueEvents: function (a) {
                a && (Eb = Cb(Eb, a));
            },
            processEventQueue: function (a) {
                var b = Eb;
                Eb = null;
                a ? Db(b, Gb) : Db(b, Hb);
                Eb ? w('95') : void 0;
                eb.rethrowCaughtError();
            }
        }, Kb;
    l.canUseDOM && (Kb = document.implementation && document.implementation.hasFeature && !0 !== document.implementation.hasFeature('', ''));
    function Lb(a, b) {
        if (!l.canUseDOM || b && !('addEventListener' in document))
            return !1;
        b = 'on' + a;
        var c = b in document;
        c || (c = document.createElement('div'), c.setAttribute(b, 'return;'), c = 'function' === typeof c[b]);
        !c && Kb && 'wheel' === a && (c = document.implementation.hasFeature('Events.wheel', '3.0'));
        return c;
    }
    function Mb(a, b) {
        var c = {};
        c[a.toLowerCase()] = b.toLowerCase();
        c['Webkit' + a] = 'webkit' + b;
        c['Moz' + a] = 'moz' + b;
        c['ms' + a] = 'MS' + b;
        c['O' + a] = 'o' + b.toLowerCase();
        return c;
    }
    var Nb = {
            animationend: Mb('Animation', 'AnimationEnd'),
            animationiteration: Mb('Animation', 'AnimationIteration'),
            animationstart: Mb('Animation', 'AnimationStart'),
            transitionend: Mb('Transition', 'TransitionEnd')
        }, Ob = {}, Pb = {};
    l.canUseDOM && (Pb = document.createElement('div').style, 'AnimationEvent' in window || (delete Nb.animationend.animation, delete Nb.animationiteration.animation, delete Nb.animationstart.animation), 'TransitionEvent' in window || delete Nb.transitionend.transition);
    function Qb(a) {
        if (Ob[a])
            return Ob[a];
        if (!Nb[a])
            return a;
        var b = Nb[a], c;
        for (c in b)
            if (b.hasOwnProperty(c) && c in Pb)
                return Ob[a] = b[c];
        return '';
    }
    var Rb = {
            topAbort: 'abort',
            topAnimationEnd: Qb('animationend') || 'animationend',
            topAnimationIteration: Qb('animationiteration') || 'animationiteration',
            topAnimationStart: Qb('animationstart') || 'animationstart',
            topBlur: 'blur',
            topCancel: 'cancel',
            topCanPlay: 'canplay',
            topCanPlayThrough: 'canplaythrough',
            topChange: 'change',
            topClick: 'click',
            topClose: 'close',
            topCompositionEnd: 'compositionend',
            topCompositionStart: 'compositionstart',
            topCompositionUpdate: 'compositionupdate',
            topContextMenu: 'contextmenu',
            topCopy: 'copy',
            topCut: 'cut',
            topDoubleClick: 'dblclick',
            topDrag: 'drag',
            topDragEnd: 'dragend',
            topDragEnter: 'dragenter',
            topDragExit: 'dragexit',
            topDragLeave: 'dragleave',
            topDragOver: 'dragover',
            topDragStart: 'dragstart',
            topDrop: 'drop',
            topDurationChange: 'durationchange',
            topEmptied: 'emptied',
            topEncrypted: 'encrypted',
            topEnded: 'ended',
            topError: 'error',
            topFocus: 'focus',
            topInput: 'input',
            topKeyDown: 'keydown',
            topKeyPress: 'keypress',
            topKeyUp: 'keyup',
            topLoadedData: 'loadeddata',
            topLoad: 'load',
            topLoadedMetadata: 'loadedmetadata',
            topLoadStart: 'loadstart',
            topMouseDown: 'mousedown',
            topMouseMove: 'mousemove',
            topMouseOut: 'mouseout',
            topMouseOver: 'mouseover',
            topMouseUp: 'mouseup',
            topPaste: 'paste',
            topPause: 'pause',
            topPlay: 'play',
            topPlaying: 'playing',
            topProgress: 'progress',
            topRateChange: 'ratechange',
            topScroll: 'scroll',
            topSeeked: 'seeked',
            topSeeking: 'seeking',
            topSelectionChange: 'selectionchange',
            topStalled: 'stalled',
            topSuspend: 'suspend',
            topTextInput: 'textInput',
            topTimeUpdate: 'timeupdate',
            topToggle: 'toggle',
            topTouchCancel: 'touchcancel',
            topTouchEnd: 'touchend',
            topTouchMove: 'touchmove',
            topTouchStart: 'touchstart',
            topTransitionEnd: Qb('transitionend') || 'transitionend',
            topVolumeChange: 'volumechange',
            topWaiting: 'waiting',
            topWheel: 'wheel'
        }, Sb = {}, Tb = 0, Ub = '_reactListenersID' + ('' + Math.random()).slice(2);
    function Vb(a) {
        Object.prototype.hasOwnProperty.call(a, Ub) || (a[Ub] = Tb++, Sb[a[Ub]] = {});
        return Sb[a[Ub]];
    }
    var M = n({}, {
            handleTopLevel: function (a, b, c, d) {
                a = Jb.extractEvents(a, b, c, d);
                Jb.enqueueEvents(a);
                Jb.processEventQueue(!1);
            }
        }, {
            setEnabled: function (a) {
                L && L.setEnabled(a);
            },
            isEnabled: function () {
                return !(!L || !L.isEnabled());
            },
            listenTo: function (a, b) {
                var c = Vb(b);
                a = sa.registrationNameDependencies[a];
                for (var d = 0; d < a.length; d++) {
                    var e = a[d];
                    c.hasOwnProperty(e) && c[e] || ('topWheel' === e ? Lb('wheel') ? L.trapBubbledEvent('topWheel', 'wheel', b) : Lb('mousewheel') ? L.trapBubbledEvent('topWheel', 'mousewheel', b) : L.trapBubbledEvent('topWheel', 'DOMMouseScroll', b) : 'topScroll' === e ? L.trapCapturedEvent('topScroll', 'scroll', b) : 'topFocus' === e || 'topBlur' === e ? (L.trapCapturedEvent('topFocus', 'focus', b), L.trapCapturedEvent('topBlur', 'blur', b), c.topBlur = !0, c.topFocus = !0) : 'topCancel' === e ? (Lb('cancel', !0) && L.trapCapturedEvent('topCancel', 'cancel', b), c.topCancel = !0) : 'topClose' === e ? (Lb('close', !0) && L.trapCapturedEvent('topClose', 'close', b), c.topClose = !0) : Rb.hasOwnProperty(e) && L.trapBubbledEvent(e, Rb[e], b), c[e] = !0);
                }
            },
            isListeningToAllDependencies: function (a, b) {
                b = Vb(b);
                a = sa.registrationNameDependencies[a];
                for (var c = 0; c < a.length; c++) {
                    var d = a[c];
                    if (!b.hasOwnProperty(d) || !b[d])
                        return !1;
                }
                return !0;
            },
            trapBubbledEvent: function (a, b, c) {
                return L.trapBubbledEvent(a, b, c);
            },
            trapCapturedEvent: function (a, b, c) {
                return L.trapCapturedEvent(a, b, c);
            }
        }), Wb = {
            animationIterationCount: !0,
            borderImageOutset: !0,
            borderImageSlice: !0,
            borderImageWidth: !0,
            boxFlex: !0,
            boxFlexGroup: !0,
            boxOrdinalGroup: !0,
            columnCount: !0,
            columns: !0,
            flex: !0,
            flexGrow: !0,
            flexPositive: !0,
            flexShrink: !0,
            flexNegative: !0,
            flexOrder: !0,
            gridRow: !0,
            gridRowEnd: !0,
            gridRowSpan: !0,
            gridRowStart: !0,
            gridColumn: !0,
            gridColumnEnd: !0,
            gridColumnSpan: !0,
            gridColumnStart: !0,
            fontWeight: !0,
            lineClamp: !0,
            lineHeight: !0,
            opacity: !0,
            order: !0,
            orphans: !0,
            tabSize: !0,
            widows: !0,
            zIndex: !0,
            zoom: !0,
            fillOpacity: !0,
            floodOpacity: !0,
            stopOpacity: !0,
            strokeDasharray: !0,
            strokeDashoffset: !0,
            strokeMiterlimit: !0,
            strokeOpacity: !0,
            strokeWidth: !0
        }, Xb = [
            'Webkit',
            'ms',
            'Moz',
            'O'
        ];
    Object.keys(Wb).forEach(function (a) {
        Xb.forEach(function (b) {
            b = b + a.charAt(0).toUpperCase() + a.substring(1);
            Wb[b] = Wb[a];
        });
    });
    var Yb = {
            isUnitlessNumber: Wb,
            shorthandPropertyExpansions: {
                background: {
                    backgroundAttachment: !0,
                    backgroundColor: !0,
                    backgroundImage: !0,
                    backgroundPositionX: !0,
                    backgroundPositionY: !0,
                    backgroundRepeat: !0
                },
                backgroundPosition: {
                    backgroundPositionX: !0,
                    backgroundPositionY: !0
                },
                border: {
                    borderWidth: !0,
                    borderStyle: !0,
                    borderColor: !0
                },
                borderBottom: {
                    borderBottomWidth: !0,
                    borderBottomStyle: !0,
                    borderBottomColor: !0
                },
                borderLeft: {
                    borderLeftWidth: !0,
                    borderLeftStyle: !0,
                    borderLeftColor: !0
                },
                borderRight: {
                    borderRightWidth: !0,
                    borderRightStyle: !0,
                    borderRightColor: !0
                },
                borderTop: {
                    borderTopWidth: !0,
                    borderTopStyle: !0,
                    borderTopColor: !0
                },
                font: {
                    fontStyle: !0,
                    fontVariant: !0,
                    fontWeight: !0,
                    fontSize: !0,
                    lineHeight: !0,
                    fontFamily: !0
                },
                outline: {
                    outlineWidth: !0,
                    outlineStyle: !0,
                    outlineColor: !0
                }
            }
        }, Zb = Yb.isUnitlessNumber, $b = !1;
    if (l.canUseDOM) {
        var ac = document.createElement('div').style;
        try {
            ac.font = '';
        } catch (a) {
            $b = !0;
        }
    }
    var bc = {
            createDangerousStringForStyles: function () {
            },
            setValueForStyles: function (a, b) {
                a = a.style;
                for (var c in b)
                    if (b.hasOwnProperty(c)) {
                        var d = 0 === c.indexOf('--');
                        var e = c;
                        var f = b[c];
                        e = null == f || 'boolean' === typeof f || '' === f ? '' : d || 'number' !== typeof f || 0 === f || Zb.hasOwnProperty(e) && Zb[e] ? ('' + f).trim() : f + 'px';
                        'float' === c && (c = 'cssFloat');
                        if (d)
                            a.setProperty(c, e);
                        else if (e)
                            a[c] = e;
                        else if (d = $b && Yb.shorthandPropertyExpansions[c])
                            for (var g in d)
                                a[g] = '';
                        else
                            a[c] = '';
                    }
            }
        }, cc = new RegExp('^[' + A.ATTRIBUTE_NAME_START_CHAR + '][' + A.ATTRIBUTE_NAME_CHAR + ']*$'), dc = {}, ec = {};
    function fc(a) {
        if (ec.hasOwnProperty(a))
            return !0;
        if (dc.hasOwnProperty(a))
            return !1;
        if (cc.test(a))
            return ec[a] = !0;
        dc[a] = !0;
        return !1;
    }
    var gc = {
            setAttributeForID: function (a, b) {
                a.setAttribute(A.ID_ATTRIBUTE_NAME, b);
            },
            setAttributeForRoot: function (a) {
                a.setAttribute(A.ROOT_ATTRIBUTE_NAME, '');
            },
            getValueForProperty: function () {
            },
            getValueForAttribute: function () {
            },
            setValueForProperty: function (a, b, c) {
                var d = A.getPropertyInfo(b);
                if (d && A.shouldSetAttribute(b, c)) {
                    var e = d.mutationMethod;
                    e ? e(a, c) : null == c || d.hasBooleanValue && !c || d.hasNumericValue && isNaN(c) || d.hasPositiveNumericValue && 1 > c || d.hasOverloadedBooleanValue && !1 === c ? gc.deleteValueForProperty(a, b) : d.mustUseProperty ? a[d.propertyName] = c : (b = d.attributeName, (e = d.attributeNamespace) ? a.setAttributeNS(e, b, '' + c) : d.hasBooleanValue || d.hasOverloadedBooleanValue && !0 === c ? a.setAttribute(b, '') : a.setAttribute(b, '' + c));
                } else
                    gc.setValueForAttribute(a, b, A.shouldSetAttribute(b, c) ? c : null);
            },
            setValueForAttribute: function (a, b, c) {
                fc(b) && (null == c ? a.removeAttribute(b) : a.setAttribute(b, '' + c));
            },
            deleteValueForAttribute: function (a, b) {
                a.removeAttribute(b);
            },
            deleteValueForProperty: function (a, b) {
                var c = A.getPropertyInfo(b);
                c ? (b = c.mutationMethod) ? b(a, void 0) : c.mustUseProperty ? a[c.propertyName] = c.hasBooleanValue ? !1 : '' : a.removeAttribute(c.attributeName) : a.removeAttribute(b);
            }
        }, hc = gc, ic = Qa.ReactDebugCurrentFrame;
    function jc() {
        return null;
    }
    var kc = {
            current: null,
            phase: null,
            resetCurrentFiber: function () {
                ic.getCurrentStack = null;
                kc.current = null;
                kc.phase = null;
            },
            setCurrentFiber: function (a, b) {
                ic.getCurrentStack = jc;
                kc.current = a;
                kc.phase = b;
            },
            getCurrentFiberOwnerName: function () {
                return null;
            },
            getCurrentFiberStackAddendum: jc
        }, lc = kc, mc = {
            getHostProps: function (a, b) {
                var c = b.value, d = b.checked;
                return n({
                    type: void 0,
                    step: void 0,
                    min: void 0,
                    max: void 0
                }, b, {
                    defaultChecked: void 0,
                    defaultValue: void 0,
                    value: null != c ? c : a._wrapperState.initialValue,
                    checked: null != d ? d : a._wrapperState.initialChecked
                });
            },
            initWrapperState: function (a, b) {
                var c = b.defaultValue;
                a._wrapperState = {
                    initialChecked: null != b.checked ? b.checked : b.defaultChecked,
                    initialValue: null != b.value ? b.value : c,
                    controlled: 'checkbox' === b.type || 'radio' === b.type ? null != b.checked : null != b.value
                };
            },
            updateWrapper: function (a, b) {
                var c = b.checked;
                null != c && hc.setValueForProperty(a, 'checked', c || !1);
                c = b.value;
                if (null != c)
                    if (0 === c && '' === a.value)
                        a.value = '0';
                    else if ('number' === b.type) {
                        if (b = parseFloat(a.value) || 0, c != b || c == b && a.value != c)
                            a.value = '' + c;
                    } else
                        a.value !== '' + c && (a.value = '' + c);
                else
                    null == b.value && null != b.defaultValue && a.defaultValue !== '' + b.defaultValue && (a.defaultValue = '' + b.defaultValue), null == b.checked && null != b.defaultChecked && (a.defaultChecked = !!b.defaultChecked);
            },
            postMountWrapper: function (a, b) {
                switch (b.type) {
                case 'submit':
                case 'reset':
                    break;
                case 'color':
                case 'date':
                case 'datetime':
                case 'datetime-local':
                case 'month':
                case 'time':
                case 'week':
                    a.value = '';
                    a.value = a.defaultValue;
                    break;
                default:
                    a.value = a.value;
                }
                b = a.name;
                '' !== b && (a.name = '');
                a.defaultChecked = !a.defaultChecked;
                a.defaultChecked = !a.defaultChecked;
                '' !== b && (a.name = b);
            },
            restoreControlledState: function (a, b) {
                mc.updateWrapper(a, b);
                var c = b.name;
                if ('radio' === b.type && null != c) {
                    for (b = a; b.parentNode;)
                        b = b.parentNode;
                    c = b.querySelectorAll('input[name=' + JSON.stringify('' + c) + '][type="radio"]');
                    for (b = 0; b < c.length; b++) {
                        var d = c[b];
                        if (d !== a && d.form === a.form) {
                            var e = G.getFiberCurrentPropsFromNode(d);
                            e ? void 0 : w('90');
                            mc.updateWrapper(d, e);
                        }
                    }
                }
            }
        }, qc = mc;
    function rc(a) {
        var b = '';
        aa.Children.forEach(a, function (a) {
            null == a || 'string' !== typeof a && 'number' !== typeof a || (b += a);
        });
        return b;
    }
    var sc = {
        validateProps: function () {
        },
        postMountWrapper: function (a, b) {
            null != b.value && a.setAttribute('value', b.value);
        },
        getHostProps: function (a, b) {
            a = n({ children: void 0 }, b);
            if (b = rc(b.children))
                a.children = b;
            return a;
        }
    };
    function tc(a, b, c) {
        a = a.options;
        if (b) {
            b = {};
            for (var d = 0; d < c.length; d++)
                b['$' + c[d]] = !0;
            for (c = 0; c < a.length; c++)
                d = b.hasOwnProperty('$' + a[c].value), a[c].selected !== d && (a[c].selected = d);
        } else {
            c = '' + c;
            b = null;
            for (d = 0; d < a.length; d++) {
                if (a[d].value === c) {
                    a[d].selected = !0;
                    return;
                }
                null !== b || a[d].disabled || (b = a[d]);
            }
            null !== b && (b.selected = !0);
        }
    }
    var uc = {
            getHostProps: function (a, b) {
                return n({}, b, { value: void 0 });
            },
            initWrapperState: function (a, b) {
                var c = b.value;
                a._wrapperState = {
                    initialValue: null != c ? c : b.defaultValue,
                    wasMultiple: !!b.multiple
                };
            },
            postMountWrapper: function (a, b) {
                a.multiple = !!b.multiple;
                var c = b.value;
                null != c ? tc(a, !!b.multiple, c) : null != b.defaultValue && tc(a, !!b.multiple, b.defaultValue);
            },
            postUpdateWrapper: function (a, b) {
                a._wrapperState.initialValue = void 0;
                var c = a._wrapperState.wasMultiple;
                a._wrapperState.wasMultiple = !!b.multiple;
                var d = b.value;
                null != d ? tc(a, !!b.multiple, d) : c !== !!b.multiple && (null != b.defaultValue ? tc(a, !!b.multiple, b.defaultValue) : tc(a, !!b.multiple, b.multiple ? [] : ''));
            },
            restoreControlledState: function (a, b) {
                var c = b.value;
                null != c && tc(a, !!b.multiple, c);
            }
        }, vc = {
            getHostProps: function (a, b) {
                null != b.dangerouslySetInnerHTML ? w('91') : void 0;
                return n({}, b, {
                    value: void 0,
                    defaultValue: void 0,
                    children: '' + a._wrapperState.initialValue
                });
            },
            initWrapperState: function (a, b) {
                var c = b.value, d = c;
                null == c && (c = b.defaultValue, b = b.children, null != b && (null != c ? w('92') : void 0, Array.isArray(b) && (1 >= b.length ? void 0 : w('93'), b = b[0]), c = '' + b), null == c && (c = ''), d = c);
                a._wrapperState = { initialValue: '' + d };
            },
            updateWrapper: function (a, b) {
                var c = b.value;
                null != c && (c = '' + c, c !== a.value && (a.value = c), null == b.defaultValue && (a.defaultValue = c));
                null != b.defaultValue && (a.defaultValue = b.defaultValue);
            },
            postMountWrapper: function (a) {
                var b = a.textContent;
                b === a._wrapperState.initialValue && (a.value = b);
            },
            restoreControlledState: function (a, b) {
                vc.updateWrapper(a, b);
            }
        }, wc = vc, xc = n({ menuitem: !0 }, {
            area: !0,
            base: !0,
            br: !0,
            col: !0,
            embed: !0,
            hr: !0,
            img: !0,
            input: !0,
            keygen: !0,
            link: !0,
            meta: !0,
            param: !0,
            source: !0,
            track: !0,
            wbr: !0
        });
    function yc(a, b) {
        b && (xc[a] && (null != b.children || null != b.dangerouslySetInnerHTML ? w('137', a, '') : void 0), null != b.dangerouslySetInnerHTML && (null != b.children ? w('60') : void 0, 'object' === typeof b.dangerouslySetInnerHTML && '__html' in b.dangerouslySetInnerHTML ? void 0 : w('61')), null != b.style && 'object' !== typeof b.style ? w('62', '') : void 0);
    }
    function zc(a) {
        var b = a.type;
        return (a = a.nodeName) && 'input' === a.toLowerCase() && ('checkbox' === b || 'radio' === b);
    }
    function Ac(a) {
        var b = zc(a) ? 'checked' : 'value', c = Object.getOwnPropertyDescriptor(a.constructor.prototype, b), d = '' + a[b];
        if (!a.hasOwnProperty(b) && 'function' === typeof c.get && 'function' === typeof c.set)
            return Object.defineProperty(a, b, {
                enumerable: c.enumerable,
                configurable: !0,
                get: function () {
                    return c.get.call(this);
                },
                set: function (a) {
                    d = '' + a;
                    c.set.call(this, a);
                }
            }), {
                getValue: function () {
                    return d;
                },
                setValue: function (a) {
                    d = '' + a;
                },
                stopTracking: function () {
                    a._valueTracker = null;
                    delete a[b];
                }
            };
    }
    var Bc = {
        _getTrackerFromNode: function (a) {
            return a._valueTracker;
        },
        track: function (a) {
            a._valueTracker || (a._valueTracker = Ac(a));
        },
        updateValueIfChanged: function (a) {
            if (!a)
                return !1;
            var b = a._valueTracker;
            if (!b)
                return !0;
            var c = b.getValue();
            var d = '';
            a && (d = zc(a) ? a.checked ? 'true' : 'false' : a.value);
            a = d;
            return a !== c ? (b.setValue(a), !0) : !1;
        },
        stopTracking: function (a) {
            (a = a._valueTracker) && a.stopTracking();
        }
    };
    function Cc(a, b) {
        if (-1 === a.indexOf('-'))
            return 'string' === typeof b.is;
        switch (a) {
        case 'annotation-xml':
        case 'color-profile':
        case 'font-face':
        case 'font-face-src':
        case 'font-face-uri':
        case 'font-face-format':
        case 'font-face-name':
        case 'missing-glyph':
            return !1;
        default:
            return !0;
        }
    }
    var Dc = ka.Namespaces, Ec, Fc = function (a) {
            return 'undefined' !== typeof MSApp && MSApp.execUnsafeLocalFunction ? function (b, c, d, e) {
                MSApp.execUnsafeLocalFunction(function () {
                    return a(b, c, d, e);
                });
            } : a;
        }(function (a, b) {
            if (a.namespaceURI !== Dc.svg || 'innerHTML' in a)
                a.innerHTML = b;
            else
                for (Ec = Ec || document.createElement('div'), Ec.innerHTML = '<svg>' + b + '</svg>', b = Ec.firstChild; b.firstChild;)
                    a.appendChild(b.firstChild);
        }), Gc = /["'&<>]/, Hc = F.TEXT_NODE;
    function Ic(a, b) {
        if (b) {
            var c = a.firstChild;
            if (c && c === a.lastChild && c.nodeType === Hc) {
                c.nodeValue = b;
                return;
            }
        }
        a.textContent = b;
    }
    l.canUseDOM && ('textContent' in document.documentElement || (Ic = function (a, b) {
        if (a.nodeType === Hc)
            a.nodeValue = b;
        else {
            if ('boolean' === typeof b || 'number' === typeof b)
                b = '' + b;
            else {
                b = '' + b;
                var c = Gc.exec(b);
                if (c) {
                    var d = '', e, f = 0;
                    for (e = c.index; e < b.length; e++) {
                        switch (b.charCodeAt(e)) {
                        case 34:
                            c = '&quot;';
                            break;
                        case 38:
                            c = '&amp;';
                            break;
                        case 39:
                            c = '&#x27;';
                            break;
                        case 60:
                            c = '&lt;';
                            break;
                        case 62:
                            c = '&gt;';
                            break;
                        default:
                            continue;
                        }
                        f !== e && (d += b.substring(f, e));
                        f = e + 1;
                        d += c;
                    }
                    b = f !== e ? d + b.substring(f, e) : d;
                }
            }
            Fc(a, b);
        }
    }));
    var Jc = Ic, Kc = lc.getCurrentFiberOwnerName, Lc = F.DOCUMENT_NODE, Mc = F.DOCUMENT_FRAGMENT_NODE, Nc = M.listenTo, Oc = sa.registrationNameModules, Pc = ka.Namespaces.html, Qc = ka.getIntrinsicNamespace;
    function Rc(a, b) {
        Nc(b, a.nodeType === Lc || a.nodeType === Mc ? a : a.ownerDocument);
    }
    var Sc = {
            topAbort: 'abort',
            topCanPlay: 'canplay',
            topCanPlayThrough: 'canplaythrough',
            topDurationChange: 'durationchange',
            topEmptied: 'emptied',
            topEncrypted: 'encrypted',
            topEnded: 'ended',
            topError: 'error',
            topLoadedData: 'loadeddata',
            topLoadedMetadata: 'loadedmetadata',
            topLoadStart: 'loadstart',
            topPause: 'pause',
            topPlay: 'play',
            topPlaying: 'playing',
            topProgress: 'progress',
            topRateChange: 'ratechange',
            topSeeked: 'seeked',
            topSeeking: 'seeking',
            topStalled: 'stalled',
            topSuspend: 'suspend',
            topTimeUpdate: 'timeupdate',
            topVolumeChange: 'volumechange',
            topWaiting: 'waiting'
        }, N = {
            createElement: function (a, b, c, d) {
                c = c.nodeType === Lc ? c : c.ownerDocument;
                d === Pc && (d = Qc(a));
                d === Pc ? 'script' === a ? (a = c.createElement('div'), a.innerHTML = '<script></script>', a = a.removeChild(a.firstChild)) : a = 'string' === typeof b.is ? c.createElement(a, { is: b.is }) : c.createElement(a) : a = c.createElementNS(d, a);
                return a;
            },
            createTextNode: function (a, b) {
                return (b.nodeType === Lc ? b : b.ownerDocument).createTextNode(a);
            },
            setInitialProperties: function (a, b, c, d) {
                var e = Cc(b, c);
                switch (b) {
                case 'iframe':
                case 'object':
                    M.trapBubbledEvent('topLoad', 'load', a);
                    var f = c;
                    break;
                case 'video':
                case 'audio':
                    for (f in Sc)
                        Sc.hasOwnProperty(f) && M.trapBubbledEvent(f, Sc[f], a);
                    f = c;
                    break;
                case 'source':
                    M.trapBubbledEvent('topError', 'error', a);
                    f = c;
                    break;
                case 'img':
                case 'image':
                    M.trapBubbledEvent('topError', 'error', a);
                    M.trapBubbledEvent('topLoad', 'load', a);
                    f = c;
                    break;
                case 'form':
                    M.trapBubbledEvent('topReset', 'reset', a);
                    M.trapBubbledEvent('topSubmit', 'submit', a);
                    f = c;
                    break;
                case 'details':
                    M.trapBubbledEvent('topToggle', 'toggle', a);
                    f = c;
                    break;
                case 'input':
                    qc.initWrapperState(a, c);
                    f = qc.getHostProps(a, c);
                    M.trapBubbledEvent('topInvalid', 'invalid', a);
                    Rc(d, 'onChange');
                    break;
                case 'option':
                    sc.validateProps(a, c);
                    f = sc.getHostProps(a, c);
                    break;
                case 'select':
                    uc.initWrapperState(a, c);
                    f = uc.getHostProps(a, c);
                    M.trapBubbledEvent('topInvalid', 'invalid', a);
                    Rc(d, 'onChange');
                    break;
                case 'textarea':
                    wc.initWrapperState(a, c);
                    f = wc.getHostProps(a, c);
                    M.trapBubbledEvent('topInvalid', 'invalid', a);
                    Rc(d, 'onChange');
                    break;
                default:
                    f = c;
                }
                yc(b, f, Kc);
                var g = f, h;
                for (h in g)
                    if (g.hasOwnProperty(h)) {
                        var k = g[h];
                        'style' === h ? bc.setValueForStyles(a, k) : 'dangerouslySetInnerHTML' === h ? (k = k ? k.__html : void 0, null != k && Fc(a, k)) : 'children' === h ? 'string' === typeof k ? Jc(a, k) : 'number' === typeof k && Jc(a, '' + k) : 'suppressContentEditableWarning' !== h && (Oc.hasOwnProperty(h) ? null != k && Rc(d, h) : e ? hc.setValueForAttribute(a, h, k) : null != k && hc.setValueForProperty(a, h, k));
                    }
                switch (b) {
                case 'input':
                    Bc.track(a);
                    qc.postMountWrapper(a, c);
                    break;
                case 'textarea':
                    Bc.track(a);
                    wc.postMountWrapper(a, c);
                    break;
                case 'option':
                    sc.postMountWrapper(a, c);
                    break;
                case 'select':
                    uc.postMountWrapper(a, c);
                    break;
                default:
                    'function' === typeof f.onClick && (a.onclick = ca);
                }
            },
            diffProperties: function (a, b, c, d, e) {
                var f = null;
                switch (b) {
                case 'input':
                    c = qc.getHostProps(a, c);
                    d = qc.getHostProps(a, d);
                    f = [];
                    break;
                case 'option':
                    c = sc.getHostProps(a, c);
                    d = sc.getHostProps(a, d);
                    f = [];
                    break;
                case 'select':
                    c = uc.getHostProps(a, c);
                    d = uc.getHostProps(a, d);
                    f = [];
                    break;
                case 'textarea':
                    c = wc.getHostProps(a, c);
                    d = wc.getHostProps(a, d);
                    f = [];
                    break;
                default:
                    'function' !== typeof c.onClick && 'function' === typeof d.onClick && (a.onclick = ca);
                }
                yc(b, d, Kc);
                var g, h;
                a = null;
                for (g in c)
                    if (!d.hasOwnProperty(g) && c.hasOwnProperty(g) && null != c[g])
                        if ('style' === g)
                            for (h in b = c[g], b)
                                b.hasOwnProperty(h) && (a || (a = {}), a[h] = '');
                        else
                            'dangerouslySetInnerHTML' !== g && 'children' !== g && 'suppressContentEditableWarning' !== g && (Oc.hasOwnProperty(g) ? f || (f = []) : (f = f || []).push(g, null));
                for (g in d) {
                    var k = d[g];
                    b = null != c ? c[g] : void 0;
                    if (d.hasOwnProperty(g) && k !== b && (null != k || null != b))
                        if ('style' === g)
                            if (b) {
                                for (h in b)
                                    !b.hasOwnProperty(h) || k && k.hasOwnProperty(h) || (a || (a = {}), a[h] = '');
                                for (h in k)
                                    k.hasOwnProperty(h) && b[h] !== k[h] && (a || (a = {}), a[h] = k[h]);
                            } else
                                a || (f || (f = []), f.push(g, a)), a = k;
                        else
                            'dangerouslySetInnerHTML' === g ? (k = k ? k.__html : void 0, b = b ? b.__html : void 0, null != k && b !== k && (f = f || []).push(g, '' + k)) : 'children' === g ? b === k || 'string' !== typeof k && 'number' !== typeof k || (f = f || []).push(g, '' + k) : 'suppressContentEditableWarning' !== g && (Oc.hasOwnProperty(g) ? (null != k && Rc(e, g), f || b === k || (f = [])) : (f = f || []).push(g, k));
                }
                a && (f = f || []).push('style', a);
                return f;
            },
            updateProperties: function (a, b, c, d, e) {
                Cc(c, d);
                d = Cc(c, e);
                for (var f = 0; f < b.length; f += 2) {
                    var g = b[f], h = b[f + 1];
                    'style' === g ? bc.setValueForStyles(a, h) : 'dangerouslySetInnerHTML' === g ? Fc(a, h) : 'children' === g ? Jc(a, h) : d ? null != h ? hc.setValueForAttribute(a, g, h) : hc.deleteValueForAttribute(a, g) : null != h ? hc.setValueForProperty(a, g, h) : hc.deleteValueForProperty(a, g);
                }
                switch (c) {
                case 'input':
                    qc.updateWrapper(a, e);
                    Bc.updateValueIfChanged(a);
                    break;
                case 'textarea':
                    wc.updateWrapper(a, e);
                    break;
                case 'select':
                    uc.postUpdateWrapper(a, e);
                }
            },
            diffHydratedProperties: function (a, b, c, d, e) {
                switch (b) {
                case 'iframe':
                case 'object':
                    M.trapBubbledEvent('topLoad', 'load', a);
                    break;
                case 'video':
                case 'audio':
                    for (var f in Sc)
                        Sc.hasOwnProperty(f) && M.trapBubbledEvent(f, Sc[f], a);
                    break;
                case 'source':
                    M.trapBubbledEvent('topError', 'error', a);
                    break;
                case 'img':
                case 'image':
                    M.trapBubbledEvent('topError', 'error', a);
                    M.trapBubbledEvent('topLoad', 'load', a);
                    break;
                case 'form':
                    M.trapBubbledEvent('topReset', 'reset', a);
                    M.trapBubbledEvent('topSubmit', 'submit', a);
                    break;
                case 'details':
                    M.trapBubbledEvent('topToggle', 'toggle', a);
                    break;
                case 'input':
                    qc.initWrapperState(a, c);
                    M.trapBubbledEvent('topInvalid', 'invalid', a);
                    Rc(e, 'onChange');
                    break;
                case 'option':
                    sc.validateProps(a, c);
                    break;
                case 'select':
                    uc.initWrapperState(a, c);
                    M.trapBubbledEvent('topInvalid', 'invalid', a);
                    Rc(e, 'onChange');
                    break;
                case 'textarea':
                    wc.initWrapperState(a, c), M.trapBubbledEvent('topInvalid', 'invalid', a), Rc(e, 'onChange');
                }
                yc(b, c, Kc);
                d = null;
                for (var g in c)
                    c.hasOwnProperty(g) && (f = c[g], 'children' === g ? 'string' === typeof f ? a.textContent !== f && (d = [
                        'children',
                        f
                    ]) : 'number' === typeof f && a.textContent !== '' + f && (d = [
                        'children',
                        '' + f
                    ]) : Oc.hasOwnProperty(g) && null != f && Rc(e, g));
                switch (b) {
                case 'input':
                    Bc.track(a);
                    qc.postMountWrapper(a, c);
                    break;
                case 'textarea':
                    Bc.track(a);
                    wc.postMountWrapper(a, c);
                    break;
                case 'select':
                case 'option':
                    break;
                default:
                    'function' === typeof c.onClick && (a.onclick = ca);
                }
                return d;
            },
            diffHydratedText: function (a, b) {
                return a.nodeValue !== b;
            },
            warnForDeletedHydratableElement: function () {
            },
            warnForDeletedHydratableText: function () {
            },
            warnForInsertedHydratedElement: function () {
            },
            warnForInsertedHydratedText: function () {
            },
            restoreControlledState: function (a, b, c) {
                switch (b) {
                case 'input':
                    qc.restoreControlledState(a, c);
                    break;
                case 'textarea':
                    wc.restoreControlledState(a, c);
                    break;
                case 'select':
                    uc.restoreControlledState(a, c);
                }
            }
        }, Tc = void 0;
    if (l.canUseDOM)
        if ('function' !== typeof requestIdleCallback) {
            var Uc = null, Vc = null, Wc = !1, Xc = !1, Yc = 0, Zc = 33, $c = 33, ad = {
                    timeRemaining: 'object' === typeof performance && 'function' === typeof performance.now ? function () {
                        return Yc - performance.now();
                    } : function () {
                        return Yc - Date.now();
                    }
                }, bd = '__reactIdleCallback$' + Math.random().toString(36).slice(2);
            window.addEventListener('message', function (a) {
                a.source === window && a.data === bd && (Wc = !1, a = Vc, Vc = null, null !== a && a(ad));
            }, !1);
            var cd = function (a) {
                Xc = !1;
                var b = a - Yc + $c;
                b < $c && Zc < $c ? (8 > b && (b = 8), $c = b < Zc ? Zc : b) : Zc = b;
                Yc = a + $c;
                Wc || (Wc = !0, window.postMessage(bd, '*'));
                b = Uc;
                Uc = null;
                null !== b && b(a);
            };
            Tc = function (a) {
                Vc = a;
                Xc || (Xc = !0, requestAnimationFrame(cd));
                return 0;
            };
        } else
            Tc = requestIdleCallback;
    else
        Tc = function (a) {
            setTimeout(function () {
                a({
                    timeRemaining: function () {
                        return Infinity;
                    }
                });
            });
            return 0;
        };
    var dd = { rIC: Tc }, ed = { enableAsyncSubtreeAPI: !0 }, Q = {
            NoWork: 0,
            SynchronousPriority: 1,
            TaskPriority: 2,
            HighPriority: 3,
            LowPriority: 4,
            OffscreenPriority: 5
        }, fd = J.Callback, gd = Q.NoWork, hd = Q.SynchronousPriority, id = Q.TaskPriority, jd = E.ClassComponent, kd = E.HostRoot, md = void 0, nd = void 0;
    function od(a, b) {
        return a !== id && a !== hd || b !== id && b !== hd ? a === gd && b !== gd ? -255 : a !== gd && b === gd ? 255 : a - b : 0;
    }
    function pd() {
        return {
            first: null,
            last: null,
            hasForceUpdate: !1,
            callbackList: null
        };
    }
    function qd(a, b, c, d) {
        null !== c ? c.next = b : (b.next = a.first, a.first = b);
        null !== d ? b.next = d : a.last = b;
    }
    function rd(a, b) {
        b = b.priorityLevel;
        var c = null;
        if (null !== a.last && 0 >= od(a.last.priorityLevel, b))
            c = a.last;
        else
            for (a = a.first; null !== a && 0 >= od(a.priorityLevel, b);)
                c = a, a = a.next;
        return c;
    }
    function sd(a, b) {
        var c = a.alternate, d = a.updateQueue;
        null === d && (d = a.updateQueue = pd());
        null !== c ? (a = c.updateQueue, null === a && (a = c.updateQueue = pd())) : a = null;
        md = d;
        nd = a !== d ? a : null;
        var e = md;
        c = nd;
        var f = rd(e, b), g = null !== f ? f.next : e.first;
        if (null === c)
            return qd(e, b, f, g), null;
        d = rd(c, b);
        a = null !== d ? d.next : c.first;
        qd(e, b, f, g);
        if (g === a && null !== g || f === d && null !== f)
            return null === d && (c.first = b), null === a && (c.last = null), null;
        b = {
            priorityLevel: b.priorityLevel,
            partialState: b.partialState,
            callback: b.callback,
            isReplace: b.isReplace,
            isForced: b.isForced,
            isTopLevelUnmount: b.isTopLevelUnmount,
            next: null
        };
        qd(c, b, d, a);
        return b;
    }
    function td(a, b, c, d) {
        a = a.partialState;
        return 'function' === typeof a ? a.call(b, c, d) : a;
    }
    var ud = {
            addUpdate: function (a, b, c, d) {
                sd(a, {
                    priorityLevel: d,
                    partialState: b,
                    callback: c,
                    isReplace: !1,
                    isForced: !1,
                    isTopLevelUnmount: !1,
                    next: null
                });
            },
            addReplaceUpdate: function (a, b, c, d) {
                sd(a, {
                    priorityLevel: d,
                    partialState: b,
                    callback: c,
                    isReplace: !0,
                    isForced: !1,
                    isTopLevelUnmount: !1,
                    next: null
                });
            },
            addForceUpdate: function (a, b, c) {
                sd(a, {
                    priorityLevel: c,
                    partialState: null,
                    callback: b,
                    isReplace: !1,
                    isForced: !0,
                    isTopLevelUnmount: !1,
                    next: null
                });
            },
            getUpdatePriority: function (a) {
                var b = a.updateQueue;
                return null === b || a.tag !== jd && a.tag !== kd ? gd : null !== b.first ? b.first.priorityLevel : gd;
            },
            addTopLevelUpdate: function (a, b, c, d) {
                var e = null === b.element;
                b = {
                    priorityLevel: d,
                    partialState: b,
                    callback: c,
                    isReplace: !1,
                    isForced: !1,
                    isTopLevelUnmount: e,
                    next: null
                };
                a = sd(a, b);
                e && (e = md, c = nd, null !== e && null !== b.next && (b.next = null, e.last = b), null !== c && null !== a && null !== a.next && (a.next = null, c.last = b));
            },
            beginUpdateQueue: function (a, b, c, d, e, f, g) {
                null !== a && a.updateQueue === c && (c = b.updateQueue = {
                    first: c.first,
                    last: c.last,
                    callbackList: null,
                    hasForceUpdate: !1
                });
                a = c.callbackList;
                for (var h = c.hasForceUpdate, k = !0, p = c.first; null !== p && 0 >= od(p.priorityLevel, g);) {
                    c.first = p.next;
                    null === c.first && (c.last = null);
                    var x;
                    if (p.isReplace)
                        e = td(p, d, e, f), k = !0;
                    else if (x = td(p, d, e, f))
                        e = k ? n({}, e, x) : n(e, x), k = !1;
                    p.isForced && (h = !0);
                    null === p.callback || p.isTopLevelUnmount && null !== p.next || (a = null !== a ? a : [], a.push(p.callback), b.effectTag |= fd);
                    p = p.next;
                }
                c.callbackList = a;
                c.hasForceUpdate = h;
                null !== c.first || null !== a || h || (b.updateQueue = null);
                return e;
            },
            commitCallbacks: function (a, b, c) {
                a = b.callbackList;
                if (null !== a)
                    for (b.callbackList = null, b = 0; b < a.length; b++) {
                        var d = a[b];
                        'function' !== typeof d ? w('191', d) : void 0;
                        d.call(c);
                    }
            }
        }, vd = [], wd = -1, xd = {
            createCursor: function (a) {
                return { current: a };
            },
            isEmpty: function () {
                return -1 === wd;
            },
            pop: function (a) {
                0 > wd || (a.current = vd[wd], vd[wd] = null, wd--);
            },
            push: function (a, b) {
                wd++;
                vd[wd] = a.current;
                a.current = b;
            },
            reset: function () {
                for (; -1 < wd;)
                    vd[wd] = null, wd--;
            }
        }, yd = bb.isFiberMounted, zd = E.ClassComponent, Ad = E.HostRoot, Bd = xd.createCursor, Cd = xd.pop, Dd = xd.push, Ed = Bd(da), Fd = Bd(!1), Ld = da;
    function Md(a, b, c) {
        a = a.stateNode;
        a.__reactInternalMemoizedUnmaskedChildContext = b;
        a.__reactInternalMemoizedMaskedChildContext = c;
    }
    function Nd(a) {
        return a.tag === zd && null != a.type.childContextTypes;
    }
    function Od(a, b) {
        var c = a.stateNode, d = a.type.childContextTypes;
        if ('function' !== typeof c.getChildContext)
            return b;
        c = c.getChildContext();
        for (var e in c)
            e in d ? void 0 : w('108', Ra(a) || 'Unknown', e);
        return n({}, b, c);
    }
    var R = {
            getUnmaskedContext: function (a) {
                return Nd(a) ? Ld : Ed.current;
            },
            cacheContext: Md,
            getMaskedContext: function (a, b) {
                var c = a.type.contextTypes;
                if (!c)
                    return da;
                var d = a.stateNode;
                if (d && d.__reactInternalMemoizedUnmaskedChildContext === b)
                    return d.__reactInternalMemoizedMaskedChildContext;
                var e = {}, f;
                for (f in c)
                    e[f] = b[f];
                d && Md(a, b, e);
                return e;
            },
            hasContextChanged: function () {
                return Fd.current;
            },
            isContextConsumer: function (a) {
                return a.tag === zd && null != a.type.contextTypes;
            },
            isContextProvider: Nd,
            popContextProvider: function (a) {
                Nd(a) && (Cd(Fd, a), Cd(Ed, a));
            },
            popTopLevelContextObject: function (a) {
                Cd(Fd, a);
                Cd(Ed, a);
            },
            pushTopLevelContextObject: function (a, b, c) {
                null != Ed.cursor ? w('168') : void 0;
                Dd(Ed, b, a);
                Dd(Fd, c, a);
            },
            processChildContext: Od,
            pushContextProvider: function (a) {
                if (!Nd(a))
                    return !1;
                var b = a.stateNode;
                b = b && b.__reactInternalMemoizedMergedChildContext || da;
                Ld = Ed.current;
                Dd(Ed, b, a);
                Dd(Fd, Fd.current, a);
                return !0;
            },
            invalidateContextProvider: function (a, b) {
                var c = a.stateNode;
                c ? void 0 : w('169');
                if (b) {
                    var d = Od(a, Ld, !0);
                    c.__reactInternalMemoizedMergedChildContext = d;
                    Cd(Fd, a);
                    Cd(Ed, a);
                    Dd(Ed, d, a);
                } else
                    Cd(Fd, a);
                Dd(Fd, b, a);
            },
            resetContext: function () {
                Ld = da;
                Ed.current = da;
                Fd.current = !1;
            },
            findCurrentUnmaskedContext: function (a) {
                for (yd(a) && a.tag === zd ? void 0 : w('170'); a.tag !== Ad;) {
                    if (Nd(a))
                        return a.stateNode.__reactInternalMemoizedMergedChildContext;
                    (a = a['return']) ? void 0 : w('171');
                }
                return a.stateNode.context;
            }
        }, Pd = {
            NoContext: 0,
            AsyncUpdates: 1
        }, Qd = E.IndeterminateComponent, Rd = E.ClassComponent, Sd = E.HostRoot, Td = E.HostComponent, Ud = E.HostText, Vd = E.HostPortal, Wd = E.CoroutineComponent, Xd = E.YieldComponent, Yd = E.Fragment, Zd = Q.NoWork, $d = Pd.NoContext, ae = J.NoEffect;
    function be(a, b, c) {
        this.tag = a;
        this.key = b;
        this.stateNode = this.type = null;
        this.sibling = this.child = this['return'] = null;
        this.index = 0;
        this.memoizedState = this.updateQueue = this.memoizedProps = this.pendingProps = this.ref = null;
        this.internalContextTag = c;
        this.effectTag = ae;
        this.lastEffect = this.firstEffect = this.nextEffect = null;
        this.pendingWorkPriority = Zd;
        this.alternate = null;
    }
    function ce(a, b, c) {
        var d = void 0;
        'function' === typeof a ? (d = a.prototype && a.prototype.isReactComponent ? new be(Rd, b, c) : new be(Qd, b, c), d.type = a) : 'string' === typeof a ? (d = new be(Td, b, c), d.type = a) : 'object' === typeof a && null !== a && 'number' === typeof a.tag ? d = a : w('130', null == a ? a : typeof a, '');
        return d;
    }
    var de = {
            createWorkInProgress: function (a, b) {
                var c = a.alternate;
                null === c ? (c = new be(a.tag, a.key, a.internalContextTag), c.type = a.type, c.stateNode = a.stateNode, c.alternate = a, a.alternate = c) : (c.effectTag = ae, c.nextEffect = null, c.firstEffect = null, c.lastEffect = null);
                c.pendingWorkPriority = b;
                c.child = a.child;
                c.memoizedProps = a.memoizedProps;
                c.memoizedState = a.memoizedState;
                c.updateQueue = a.updateQueue;
                c.sibling = a.sibling;
                c.index = a.index;
                c.ref = a.ref;
                return c;
            },
            createHostRootFiber: function () {
                return new be(Sd, null, $d);
            },
            createFiberFromElement: function (a, b, c) {
                b = ce(a.type, a.key, b, null);
                b.pendingProps = a.props;
                b.pendingWorkPriority = c;
                return b;
            },
            createFiberFromFragment: function (a, b, c) {
                b = new be(Yd, null, b);
                b.pendingProps = a;
                b.pendingWorkPriority = c;
                return b;
            },
            createFiberFromText: function (a, b, c) {
                b = new be(Ud, null, b);
                b.pendingProps = a;
                b.pendingWorkPriority = c;
                return b;
            },
            createFiberFromElementType: ce,
            createFiberFromHostInstanceForDeletion: function () {
                var a = new be(Td, null, $d);
                a.type = 'DELETED';
                return a;
            },
            createFiberFromCoroutine: function (a, b, c) {
                b = new be(Wd, a.key, b);
                b.type = a.handler;
                b.pendingProps = a;
                b.pendingWorkPriority = c;
                return b;
            },
            createFiberFromYield: function (a, b) {
                return new be(Xd, null, b);
            },
            createFiberFromPortal: function (a, b, c) {
                b = new be(Vd, a.key, b);
                b.pendingProps = a.children || [];
                b.pendingWorkPriority = c;
                b.stateNode = {
                    containerInfo: a.containerInfo,
                    implementation: a.implementation
                };
                return b;
            },
            largerPriority: function (a, b) {
                return a !== Zd && (b === Zd || b > a) ? a : b;
            }
        }, ee = de.createHostRootFiber, fe = E.IndeterminateComponent, ge = E.FunctionalComponent, he = E.ClassComponent, ie = E.HostComponent, je, ke;
    'function' === typeof Symbol && Symbol['for'] ? (je = Symbol['for']('react.coroutine'), ke = Symbol['for']('react.yield')) : (je = 60104, ke = 60105);
    var le = {
            createCoroutine: function (a, b, c) {
                var d = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;
                return {
                    $$typeof: je,
                    key: null == d ? null : '' + d,
                    children: a,
                    handler: b,
                    props: c
                };
            },
            createYield: function (a) {
                return {
                    $$typeof: ke,
                    value: a
                };
            },
            isCoroutine: function (a) {
                return 'object' === typeof a && null !== a && a.$$typeof === je;
            },
            isYield: function (a) {
                return 'object' === typeof a && null !== a && a.$$typeof === ke;
            },
            REACT_YIELD_TYPE: ke,
            REACT_COROUTINE_TYPE: je
        }, me = 'function' === typeof Symbol && Symbol['for'] && Symbol['for']('react.portal') || 60106, ne = {
            createPortal: function (a, b, c) {
                var d = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;
                return {
                    $$typeof: me,
                    key: null == d ? null : '' + d,
                    children: a,
                    containerInfo: b,
                    implementation: c
                };
            },
            isPortal: function (a) {
                return 'object' === typeof a && null !== a && a.$$typeof === me;
            },
            REACT_PORTAL_TYPE: me
        }, oe = le.REACT_COROUTINE_TYPE, pe = le.REACT_YIELD_TYPE, qe = ne.REACT_PORTAL_TYPE, re = de.createWorkInProgress, se = de.createFiberFromElement, te = de.createFiberFromFragment, ue = de.createFiberFromText, ve = de.createFiberFromCoroutine, we = de.createFiberFromYield, xe = de.createFiberFromPortal, ye = Array.isArray, ze = E.FunctionalComponent, Ae = E.ClassComponent, Be = E.HostText, Ce = E.HostPortal, De = E.CoroutineComponent, Ee = E.YieldComponent, Fe = E.Fragment, Ge = J.NoEffect, He = J.Placement, Ie = J.Deletion, Je = 'function' === typeof Symbol && Symbol.iterator, Ke = 'function' === typeof Symbol && Symbol['for'] && Symbol['for']('react.element') || 60103;
    function Le(a) {
        if (null === a || 'undefined' === typeof a)
            return null;
        a = Je && a[Je] || a['@@iterator'];
        return 'function' === typeof a ? a : null;
    }
    function Me(a, b) {
        var c = b.ref;
        if (null !== c && 'function' !== typeof c) {
            if (b._owner) {
                b = b._owner;
                var d = void 0;
                b && ('number' === typeof b.tag ? (b.tag !== Ae ? w('110') : void 0, d = b.stateNode) : d = b.getPublicInstance());
                d ? void 0 : w('147', c);
                var e = '' + c;
                if (null !== a && null !== a.ref && a.ref._stringRef === e)
                    return a.ref;
                a = function (a) {
                    var b = d.refs === da ? d.refs = {} : d.refs;
                    null === a ? delete b[e] : b[e] = a;
                };
                a._stringRef = e;
                return a;
            }
            'string' !== typeof c ? w('148') : void 0;
            b._owner ? void 0 : w('149', c);
        }
        return c;
    }
    function Ne(a, b) {
        'textarea' !== a.type && w('31', '[object Object]' === Object.prototype.toString.call(b) ? 'object with keys {' + Object.keys(b).join(', ') + '}' : b, '');
    }
    function Oe(a, b) {
        function c(c, d) {
            if (b) {
                if (!a) {
                    if (null === d.alternate)
                        return;
                    d = d.alternate;
                }
                var m = c.lastEffect;
                null !== m ? (m.nextEffect = d, c.lastEffect = d) : c.firstEffect = c.lastEffect = d;
                d.nextEffect = null;
                d.effectTag = Ie;
            }
        }
        function d(a, d) {
            if (!b)
                return null;
            for (; null !== d;)
                c(a, d), d = d.sibling;
            return null;
        }
        function e(a, b) {
            for (a = new Map(); null !== b;)
                null !== b.key ? a.set(b.key, b) : a.set(b.index, b), b = b.sibling;
            return a;
        }
        function f(b, c) {
            if (a)
                return b = re(b, c), b.index = 0, b.sibling = null, b;
            b.pendingWorkPriority = c;
            b.effectTag = Ge;
            b.index = 0;
            b.sibling = null;
            return b;
        }
        function g(a, c, d) {
            a.index = d;
            if (!b)
                return c;
            d = a.alternate;
            if (null !== d)
                return d = d.index, d < c ? (a.effectTag = He, c) : d;
            a.effectTag = He;
            return c;
        }
        function h(a) {
            b && null === a.alternate && (a.effectTag = He);
            return a;
        }
        function k(a, b, c, d) {
            if (null === b || b.tag !== Be)
                return c = ue(c, a.internalContextTag, d), c['return'] = a, c;
            b = f(b, d);
            b.pendingProps = c;
            b['return'] = a;
            return b;
        }
        function p(a, b, c, d) {
            if (null === b || b.type !== c.type)
                return d = se(c, a.internalContextTag, d), d.ref = Me(b, c), d['return'] = a, d;
            d = f(b, d);
            d.ref = Me(b, c);
            d.pendingProps = c.props;
            d['return'] = a;
            return d;
        }
        function x(a, b, c, d) {
            if (null === b || b.tag !== De)
                return c = ve(c, a.internalContextTag, d), c['return'] = a, c;
            b = f(b, d);
            b.pendingProps = c;
            b['return'] = a;
            return b;
        }
        function S(a, b, c, d) {
            if (null === b || b.tag !== Ee)
                return b = we(c, a.internalContextTag, d), b.type = c.value, b['return'] = a, b;
            b = f(b, d);
            b.type = c.value;
            b['return'] = a;
            return b;
        }
        function D(a, b, c, d) {
            if (null === b || b.tag !== Ce || b.stateNode.containerInfo !== c.containerInfo || b.stateNode.implementation !== c.implementation)
                return c = xe(c, a.internalContextTag, d), c['return'] = a, c;
            b = f(b, d);
            b.pendingProps = c.children || [];
            b['return'] = a;
            return b;
        }
        function y(a, b, c, d) {
            if (null === b || b.tag !== Fe)
                return c = te(c, a.internalContextTag, d), c['return'] = a, c;
            b = f(b, d);
            b.pendingProps = c;
            b['return'] = a;
            return b;
        }
        function B(a, b, c) {
            if ('string' === typeof b || 'number' === typeof b)
                return b = ue('' + b, a.internalContextTag, c), b['return'] = a, b;
            if ('object' === typeof b && null !== b) {
                switch (b.$$typeof) {
                case Ke:
                    return c = se(b, a.internalContextTag, c), c.ref = Me(null, b), c['return'] = a, c;
                case oe:
                    return b = ve(b, a.internalContextTag, c), b['return'] = a, b;
                case pe:
                    return c = we(b, a.internalContextTag, c), c.type = b.value, c['return'] = a, c;
                case qe:
                    return b = xe(b, a.internalContextTag, c), b['return'] = a, b;
                }
                if (ye(b) || Le(b))
                    return b = te(b, a.internalContextTag, c), b['return'] = a, b;
                Ne(a, b);
            }
            return null;
        }
        function H(a, b, c, d) {
            var e = null !== b ? b.key : null;
            if ('string' === typeof c || 'number' === typeof c)
                return null !== e ? null : k(a, b, '' + c, d);
            if ('object' === typeof c && null !== c) {
                switch (c.$$typeof) {
                case Ke:
                    return c.key === e ? p(a, b, c, d) : null;
                case oe:
                    return c.key === e ? x(a, b, c, d) : null;
                case pe:
                    return null === e ? S(a, b, c, d) : null;
                case qe:
                    return c.key === e ? D(a, b, c, d) : null;
                }
                if (ye(c) || Le(c))
                    return null !== e ? null : y(a, b, c, d);
                Ne(a, c);
            }
            return null;
        }
        function C(a, b, c, d, e) {
            if ('string' === typeof d || 'number' === typeof d)
                return a = a.get(c) || null, k(b, a, '' + d, e);
            if ('object' === typeof d && null !== d) {
                switch (d.$$typeof) {
                case Ke:
                    return a = a.get(null === d.key ? c : d.key) || null, p(b, a, d, e);
                case oe:
                    return a = a.get(null === d.key ? c : d.key) || null, x(b, a, d, e);
                case pe:
                    return a = a.get(c) || null, S(b, a, d, e);
                case qe:
                    return a = a.get(null === d.key ? c : d.key) || null, D(b, a, d, e);
                }
                if (ye(d) || Le(d))
                    return a = a.get(c) || null, y(b, a, d, e);
                Ne(b, d);
            }
            return null;
        }
        function Ca(a, f, h, k) {
            for (var m = null, t = null, q = f, r = f = 0, p = null; null !== q && r < h.length; r++) {
                q.index > r ? (p = q, q = null) : p = q.sibling;
                var v = H(a, q, h[r], k);
                if (null === v) {
                    null === q && (q = p);
                    break;
                }
                b && q && null === v.alternate && c(a, q);
                f = g(v, f, r);
                null === t ? m = v : t.sibling = v;
                t = v;
                q = p;
            }
            if (r === h.length)
                return d(a, q), m;
            if (null === q) {
                for (; r < h.length; r++)
                    if (q = B(a, h[r], k))
                        f = g(q, f, r), null === t ? m = q : t.sibling = q, t = q;
                return m;
            }
            for (q = e(a, q); r < h.length; r++)
                if (p = C(q, a, r, h[r], k)) {
                    if (b && null !== p.alternate)
                        q['delete'](null === p.key ? r : p.key);
                    f = g(p, f, r);
                    null === t ? m = p : t.sibling = p;
                    t = p;
                }
            b && q.forEach(function (b) {
                return c(a, b);
            });
            return m;
        }
        function r(a, f, h, r) {
            var m = Le(h);
            'function' !== typeof m ? w('150') : void 0;
            h = m.call(h);
            null == h ? w('151') : void 0;
            for (var t = m = null, q = f, k = f = 0, p = null, v = h.next(); null !== q && !v.done; k++, v = h.next()) {
                q.index > k ? (p = q, q = null) : p = q.sibling;
                var V = H(a, q, v.value, r);
                if (null === V) {
                    q || (q = p);
                    break;
                }
                b && q && null === V.alternate && c(a, q);
                f = g(V, f, k);
                null === t ? m = V : t.sibling = V;
                t = V;
                q = p;
            }
            if (v.done)
                return d(a, q), m;
            if (null === q) {
                for (; !v.done; k++, v = h.next())
                    v = B(a, v.value, r), null !== v && (f = g(v, f, k), null === t ? m = v : t.sibling = v, t = v);
                return m;
            }
            for (q = e(a, q); !v.done; k++, v = h.next())
                if (v = C(q, a, k, v.value, r), null !== v) {
                    if (b && null !== v.alternate)
                        q['delete'](null === v.key ? k : v.key);
                    f = g(v, f, k);
                    null === t ? m = v : t.sibling = v;
                    t = v;
                }
            b && q.forEach(function (b) {
                return c(a, b);
            });
            return m;
        }
        return function (a, b, e, g) {
            var m = 'object' === typeof e && null !== e;
            if (m)
                switch (e.$$typeof) {
                case Ke:
                    a: {
                        var C = e.key;
                        for (m = b; null !== m;) {
                            if (m.key === C)
                                if (m.type === e.type) {
                                    d(a, m.sibling);
                                    b = f(m, g);
                                    b.ref = Me(m, e);
                                    b.pendingProps = e.props;
                                    b['return'] = a;
                                    a = b;
                                    break a;
                                } else {
                                    d(a, m);
                                    break;
                                }
                            else
                                c(a, m);
                            m = m.sibling;
                        }
                        g = se(e, a.internalContextTag, g);
                        g.ref = Me(b, e);
                        g['return'] = a;
                        a = g;
                    }
                    return h(a);
                case oe:
                    a: {
                        for (m = e.key; null !== b;) {
                            if (b.key === m)
                                if (b.tag === De) {
                                    d(a, b.sibling);
                                    b = f(b, g);
                                    b.pendingProps = e;
                                    b['return'] = a;
                                    a = b;
                                    break a;
                                } else {
                                    d(a, b);
                                    break;
                                }
                            else
                                c(a, b);
                            b = b.sibling;
                        }
                        e = ve(e, a.internalContextTag, g);
                        e['return'] = a;
                        a = e;
                    }
                    return h(a);
                case pe:
                    a: {
                        if (null !== b)
                            if (b.tag === Ee) {
                                d(a, b.sibling);
                                b = f(b, g);
                                b.type = e.value;
                                b['return'] = a;
                                a = b;
                                break a;
                            } else
                                d(a, b);
                        b = we(e, a.internalContextTag, g);
                        b.type = e.value;
                        b['return'] = a;
                        a = b;
                    }
                    return h(a);
                case qe:
                    a: {
                        for (m = e.key; null !== b;) {
                            if (b.key === m)
                                if (b.tag === Ce && b.stateNode.containerInfo === e.containerInfo && b.stateNode.implementation === e.implementation) {
                                    d(a, b.sibling);
                                    b = f(b, g);
                                    b.pendingProps = e.children || [];
                                    b['return'] = a;
                                    a = b;
                                    break a;
                                } else {
                                    d(a, b);
                                    break;
                                }
                            else
                                c(a, b);
                            b = b.sibling;
                        }
                        e = xe(e, a.internalContextTag, g);
                        e['return'] = a;
                        a = e;
                    }
                    return h(a);
                }
            if ('string' === typeof e || 'number' === typeof e)
                return e = '' + e, null !== b && b.tag === Be ? (d(a, b.sibling), b = f(b, g), b.pendingProps = e, b['return'] = a, a = b) : (d(a, b), e = ue(e, a.internalContextTag, g), e['return'] = a, a = e), h(a);
            if (ye(e))
                return Ca(a, b, e, g);
            if (Le(e))
                return r(a, b, e, g);
            m && Ne(a, e);
            if ('undefined' === typeof e)
                switch (a.tag) {
                case Ae:
                case ze:
                    e = a.type, w('152', e.displayName || e.name || 'Component');
                }
            return d(a, b);
        };
    }
    var Pe = Oe(!0, !0), Qe = Oe(!1, !0), Re = Oe(!1, !1), Se = {
            reconcileChildFibers: Pe,
            reconcileChildFibersInPlace: Qe,
            mountChildFibersInPlace: Re,
            cloneChildFibers: function (a, b) {
                null !== a && b.child !== a.child ? w('153') : void 0;
                if (null !== b.child) {
                    a = b.child;
                    var c = re(a, a.pendingWorkPriority);
                    c.pendingProps = a.pendingProps;
                    b.child = c;
                    for (c['return'] = b; null !== a.sibling;)
                        a = a.sibling, c = c.sibling = re(a, a.pendingWorkPriority), c.pendingProps = a.pendingProps, c['return'] = b;
                    c.sibling = null;
                }
            }
        }, Te = J.Update, Ue = Pd.AsyncUpdates, Ve = R.cacheContext, We = R.getMaskedContext, Xe = R.getUnmaskedContext, Ye = R.isContextConsumer, Ze = ud.addUpdate, $e = ud.addReplaceUpdate, af = ud.addForceUpdate, bf = ud.beginUpdateQueue, cf = R.hasContextChanged, df = bb.isMounted;
    function ef(a, b, c, d) {
        function e(a, b) {
            b.updater = f;
            a.stateNode = b;
            Pa.set(b, a);
        }
        var f = {
            isMounted: df,
            enqueueSetState: function (c, d, e) {
                c = Pa.get(c);
                var f = b(c, !1);
                Ze(c, d, void 0 === e ? null : e, f);
                a(c, f);
            },
            enqueueReplaceState: function (c, d, e) {
                c = Pa.get(c);
                var f = b(c, !1);
                $e(c, d, void 0 === e ? null : e, f);
                a(c, f);
            },
            enqueueForceUpdate: function (c, d) {
                c = Pa.get(c);
                var e = b(c, !1);
                af(c, void 0 === d ? null : d, e);
                a(c, e);
            }
        };
        return {
            adoptClassInstance: e,
            constructClassInstance: function (a, b) {
                var c = a.type, d = Xe(a), f = Ye(a), g = f ? We(a, d) : da;
                b = new c(b, g);
                e(a, b);
                f && Ve(a, d, g);
                return b;
            },
            mountClassInstance: function (a, b) {
                var c = a.alternate, d = a.stateNode, e = d.state || null, g = a.pendingProps;
                g ? void 0 : w('158');
                var h = Xe(a);
                d.props = g;
                d.state = e;
                d.refs = da;
                d.context = We(a, h);
                ed.enableAsyncSubtreeAPI && null != a.type && null != a.type.prototype && !0 === a.type.prototype.unstable_isAsyncReactComponent && (a.internalContextTag |= Ue);
                'function' === typeof d.componentWillMount && (h = d.state, d.componentWillMount(), h !== d.state && f.enqueueReplaceState(d, d.state, null), h = a.updateQueue, null !== h && (d.state = bf(c, a, h, d, e, g, b)));
                'function' === typeof d.componentDidMount && (a.effectTag |= Te);
            },
            updateClassInstance: function (a, b, e) {
                var g = b.stateNode;
                g.props = b.memoizedProps;
                g.state = b.memoizedState;
                var h = b.memoizedProps, k = b.pendingProps;
                k || (k = h, null == k ? w('159') : void 0);
                var D = g.context, y = Xe(b);
                y = We(b, y);
                'function' !== typeof g.componentWillReceiveProps || h === k && D === y || (D = g.state, g.componentWillReceiveProps(k, y), g.state !== D && f.enqueueReplaceState(g, g.state, null));
                D = b.memoizedState;
                e = null !== b.updateQueue ? bf(a, b, b.updateQueue, g, D, k, e) : D;
                if (!(h !== k || D !== e || cf() || null !== b.updateQueue && b.updateQueue.hasForceUpdate))
                    return 'function' !== typeof g.componentDidUpdate || h === a.memoizedProps && D === a.memoizedState || (b.effectTag |= Te), !1;
                var B = k;
                if (null === h || null !== b.updateQueue && b.updateQueue.hasForceUpdate)
                    B = !0;
                else {
                    var H = b.stateNode, C = b.type;
                    B = 'function' === typeof H.shouldComponentUpdate ? H.shouldComponentUpdate(B, e, y) : C.prototype && C.prototype.isPureReactComponent ? !ea(h, B) || !ea(D, e) : !0;
                }
                B ? ('function' === typeof g.componentWillUpdate && g.componentWillUpdate(k, e, y), 'function' === typeof g.componentDidUpdate && (b.effectTag |= Te)) : ('function' !== typeof g.componentDidUpdate || h === a.memoizedProps && D === a.memoizedState || (b.effectTag |= Te), c(b, k), d(b, e));
                g.props = k;
                g.state = e;
                g.context = y;
                return B;
            }
        };
    }
    var ff = Se.mountChildFibersInPlace, gf = Se.reconcileChildFibers, hf = Se.reconcileChildFibersInPlace, jf = Se.cloneChildFibers, kf = ud.beginUpdateQueue, lf = R.getMaskedContext, mf = R.getUnmaskedContext, nf = R.hasContextChanged, of = R.pushContextProvider, pf = R.pushTopLevelContextObject, qf = R.invalidateContextProvider, rf = E.IndeterminateComponent, sf = E.FunctionalComponent, tf = E.ClassComponent, uf = E.HostRoot, wf = E.HostComponent, xf = E.HostText, yf = E.HostPortal, zf = E.CoroutineComponent, Af = E.CoroutineHandlerPhase, Bf = E.YieldComponent, Cf = E.Fragment, Df = Q.NoWork, Ef = Q.OffscreenPriority, Ff = J.PerformedWork, Gf = J.Placement, Hf = J.ContentReset, If = J.Err, Jf = J.Ref, Kf = Qa.ReactCurrentOwner;
    function Lf(a, b, c, d, e) {
        function f(a, b, c) {
            g(a, b, c, b.pendingWorkPriority);
        }
        function g(a, b, c, d) {
            b.child = null === a ? ff(b, b.child, c, d) : a.child === b.child ? gf(b, b.child, c, d) : hf(b, b.child, c, d);
        }
        function h(a, b) {
            var c = b.ref;
            null === c || a && a.ref === c || (b.effectTag |= Jf);
        }
        function k(a, b, c, d) {
            h(a, b);
            if (!c)
                return d && qf(b, !1), x(a, b);
            c = b.stateNode;
            Kf.current = b;
            var e = c.render();
            b.effectTag |= Ff;
            f(a, b, e);
            b.memoizedState = c.state;
            b.memoizedProps = c.props;
            d && qf(b, !0);
            return b.child;
        }
        function p(a) {
            var b = a.stateNode;
            b.pendingContext ? pf(a, b.pendingContext, b.pendingContext !== b.context) : b.context && pf(a, b.context, !1);
            C(a, b.containerInfo);
        }
        function x(a, b) {
            jf(a, b);
            return b.child;
        }
        function S(a, b) {
            switch (b.tag) {
            case uf:
                p(b);
                break;
            case tf:
                of(b);
                break;
            case yf:
                C(b, b.stateNode.containerInfo);
            }
            return null;
        }
        var D = a.shouldSetTextContent, y = a.useSyncScheduling, B = a.shouldDeprioritizeSubtree, H = b.pushHostContext, C = b.pushHostContainer, Ca = c.enterHydrationState, r = c.resetHydrationState, m = c.tryToClaimNextHydratableInstance;
        a = ef(d, e, function (a, b) {
            a.memoizedProps = b;
        }, function (a, b) {
            a.memoizedState = b;
        });
        var t = a.adoptClassInstance, v = a.constructClassInstance, V = a.mountClassInstance, ld = a.updateClassInstance;
        return {
            beginWork: function (a, b, c) {
                if (b.pendingWorkPriority === Df || b.pendingWorkPriority > c)
                    return S(a, b);
                switch (b.tag) {
                case rf:
                    null !== a ? w('155') : void 0;
                    var d = b.type, e = b.pendingProps, g = mf(b);
                    g = lf(b, g);
                    d = d(e, g);
                    b.effectTag |= Ff;
                    'object' === typeof d && null !== d && 'function' === typeof d.render ? (b.tag = tf, e = of(b), t(b, d), V(b, c), b = k(a, b, !0, e)) : (b.tag = sf, f(a, b, d), b.memoizedProps = e, b = b.child);
                    return b;
                case sf:
                    a: {
                        e = b.type;
                        c = b.pendingProps;
                        d = b.memoizedProps;
                        if (nf())
                            null === c && (c = d);
                        else if (null === c || d === c) {
                            b = x(a, b);
                            break a;
                        }
                        d = mf(b);
                        d = lf(b, d);
                        e = e(c, d);
                        b.effectTag |= Ff;
                        f(a, b, e);
                        b.memoizedProps = c;
                        b = b.child;
                    }
                    return b;
                case tf:
                    return e = of(b), d = void 0, null === a ? b.stateNode ? w('153') : (v(b, b.pendingProps), V(b, c), d = !0) : d = ld(a, b, c), k(a, b, d, e);
                case uf:
                    return p(b), d = b.updateQueue, null !== d ? (e = b.memoizedState, d = kf(a, b, d, null, e, null, c), e === d ? (r(), b = x(a, b)) : (e = d.element, null !== a && null !== a.child || !Ca(b) ? (r(), f(a, b, e)) : (b.effectTag |= Gf, b.child = ff(b, b.child, e, c)), b.memoizedState = d, b = b.child)) : (r(), b = x(a, b)), b;
                case wf:
                    H(b);
                    null === a && m(b);
                    e = b.type;
                    var q = b.memoizedProps;
                    d = b.pendingProps;
                    null === d && (d = q, null === d ? w('154') : void 0);
                    g = null !== a ? a.memoizedProps : null;
                    nf() || null !== d && q !== d ? (q = d.children, D(e, d) ? q = null : g && D(e, g) && (b.effectTag |= Hf), h(a, b), c !== Ef && !y && B(e, d) ? (b.pendingWorkPriority = Ef, b = null) : (f(a, b, q), b.memoizedProps = d, b = b.child)) : b = x(a, b);
                    return b;
                case xf:
                    return null === a && m(b), a = b.pendingProps, null === a && (a = b.memoizedProps), b.memoizedProps = a, null;
                case Af:
                    b.tag = zf;
                case zf:
                    c = b.pendingProps;
                    if (nf())
                        null === c && (c = a && a.memoizedProps, null === c ? w('154') : void 0);
                    else if (null === c || b.memoizedProps === c)
                        c = b.memoizedProps;
                    e = c.children;
                    d = b.pendingWorkPriority;
                    b.stateNode = null === a ? ff(b, b.stateNode, e, d) : a.child === b.child ? gf(b, b.stateNode, e, d) : hf(b, b.stateNode, e, d);
                    b.memoizedProps = c;
                    return b.stateNode;
                case Bf:
                    return null;
                case yf:
                    a: {
                        C(b, b.stateNode.containerInfo);
                        c = b.pendingWorkPriority;
                        e = b.pendingProps;
                        if (nf())
                            null === e && (e = a && a.memoizedProps, null == e ? w('154') : void 0);
                        else if (null === e || b.memoizedProps === e) {
                            b = x(a, b);
                            break a;
                        }
                        null === a ? b.child = hf(b, b.child, e, c) : f(a, b, e);
                        b.memoizedProps = e;
                        b = b.child;
                    }
                    return b;
                case Cf:
                    a: {
                        c = b.pendingProps;
                        if (nf())
                            null === c && (c = b.memoizedProps);
                        else if (null === c || b.memoizedProps === c) {
                            b = x(a, b);
                            break a;
                        }
                        f(a, b, c);
                        b.memoizedProps = c;
                        b = b.child;
                    }
                    return b;
                default:
                    w('156');
                }
            },
            beginFailedWork: function (a, b, c) {
                switch (b.tag) {
                case tf:
                    of(b);
                    break;
                case uf:
                    p(b);
                    break;
                default:
                    w('157');
                }
                b.effectTag |= If;
                null === a ? b.child = null : b.child !== a.child && (b.child = a.child);
                if (b.pendingWorkPriority === Df || b.pendingWorkPriority > c)
                    return S(a, b);
                b.firstEffect = null;
                b.lastEffect = null;
                g(a, b, null, c);
                b.tag === tf && (a = b.stateNode, b.memoizedProps = a.props, b.memoizedState = a.state);
                return b.child;
            }
        };
    }
    var Mf = Se.reconcileChildFibers, Nf = R.popContextProvider, Of = R.popTopLevelContextObject, Pf = E.IndeterminateComponent, Qf = E.FunctionalComponent, Rf = E.ClassComponent, Sf = E.HostRoot, Tf = E.HostComponent, Uf = E.HostText, Vf = E.HostPortal, Wf = E.CoroutineComponent, Xf = E.CoroutineHandlerPhase, Yf = E.YieldComponent, Zf = E.Fragment, ag = J.Placement, bg = J.Ref, cg = J.Update, dg = Q.OffscreenPriority;
    function eg(a, b, c) {
        var d = a.createInstance, e = a.createTextInstance, f = a.appendInitialChild, g = a.finalizeInitialChildren, h = a.prepareUpdate, k = b.getRootHostContainer, p = b.popHostContext, x = b.getHostContext, S = b.popHostContainer, D = c.prepareToHydrateHostInstance, y = c.prepareToHydrateHostTextInstance, B = c.popHydrationState;
        return {
            completeWork: function (a, b, c) {
                var r = b.pendingProps;
                if (null === r)
                    r = b.memoizedProps;
                else if (b.pendingWorkPriority !== dg || c === dg)
                    b.pendingProps = null;
                switch (b.tag) {
                case Qf:
                    return null;
                case Rf:
                    return Nf(b), null;
                case Sf:
                    S(b);
                    Of(b);
                    r = b.stateNode;
                    r.pendingContext && (r.context = r.pendingContext, r.pendingContext = null);
                    if (null === a || null === a.child)
                        B(b), b.effectTag &= ~ag;
                    return null;
                case Tf:
                    p(b);
                    c = k();
                    var m = b.type;
                    if (null !== a && null != b.stateNode) {
                        var t = a.memoizedProps, C = b.stateNode, V = x();
                        r = h(C, m, t, r, c, V);
                        if (b.updateQueue = r)
                            b.effectTag |= cg;
                        a.ref !== b.ref && (b.effectTag |= bg);
                    } else {
                        if (!r)
                            return null === b.stateNode ? w('166') : void 0, null;
                        a = x();
                        if (B(b))
                            D(b, c, a) && (b.effectTag |= cg);
                        else {
                            a = d(m, r, c, a, b);
                            a:
                                for (t = b.child; null !== t;) {
                                    if (t.tag === Tf || t.tag === Uf)
                                        f(a, t.stateNode);
                                    else if (t.tag !== Vf && null !== t.child) {
                                        t = t.child;
                                        continue;
                                    }
                                    if (t === b)
                                        break a;
                                    for (; null === t.sibling;) {
                                        if (null === t['return'] || t['return'] === b)
                                            break a;
                                        t = t['return'];
                                    }
                                    t = t.sibling;
                                }
                            g(a, m, r, c) && (b.effectTag |= cg);
                            b.stateNode = a;
                        }
                        null !== b.ref && (b.effectTag |= bg);
                    }
                    return null;
                case Uf:
                    if (a && null != b.stateNode)
                        a.memoizedProps !== r && (b.effectTag |= cg);
                    else {
                        if ('string' !== typeof r)
                            return null === b.stateNode ? w('166') : void 0, null;
                        a = k();
                        c = x();
                        B(b) ? y(b) && (b.effectTag |= cg) : b.stateNode = e(r, a, c, b);
                    }
                    return null;
                case Wf:
                    (r = b.memoizedProps) ? void 0 : w('165');
                    b.tag = Xf;
                    c = [];
                    a:
                        for ((m = b.stateNode) && (m['return'] = b); null !== m;) {
                            if (m.tag === Tf || m.tag === Uf || m.tag === Vf)
                                w('164');
                            else if (m.tag === Yf)
                                c.push(m.type);
                            else if (null !== m.child) {
                                m.child['return'] = m;
                                m = m.child;
                                continue;
                            }
                            for (; null === m.sibling;) {
                                if (null === m['return'] || m['return'] === b)
                                    break a;
                                m = m['return'];
                            }
                            m.sibling['return'] = m['return'];
                            m = m.sibling;
                        }
                    m = r.handler;
                    r = m(r.props, c);
                    b.child = Mf(b, null !== a ? a.child : null, r, b.pendingWorkPriority);
                    return b.child;
                case Xf:
                    return b.tag = Wf, null;
                case Yf:
                    return null;
                case Zf:
                    return null;
                case Vf:
                    return b.effectTag |= cg, S(b), null;
                case Pf:
                    w('167');
                default:
                    w('156');
                }
            }
        };
    }
    var fg = null, gg = null;
    function hg(a) {
        return function (b) {
            try {
                return a(b);
            } catch (c) {
            }
        };
    }
    var ig = {
            injectInternals: function (a) {
                if ('undefined' === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)
                    return !1;
                var b = __REACT_DEVTOOLS_GLOBAL_HOOK__;
                if (!b.supportsFiber)
                    return !0;
                try {
                    var c = b.inject(a);
                    fg = hg(function (a) {
                        return b.onCommitFiberRoot(c, a);
                    });
                    gg = hg(function (a) {
                        return b.onCommitFiberUnmount(c, a);
                    });
                } catch (d) {
                }
                return !0;
            },
            onCommitRoot: function (a) {
                'function' === typeof fg && fg(a);
            },
            onCommitUnmount: function (a) {
                'function' === typeof gg && gg(a);
            }
        }, jg = E.ClassComponent, kg = E.HostRoot, lg = E.HostComponent, mg = E.HostText, ng = E.HostPortal, og = E.CoroutineComponent, pg = ud.commitCallbacks, qg = ig.onCommitUnmount, rg = J.Placement, sg = J.Update, tg = J.Callback, ug = J.ContentReset;
    function vg(a, b) {
        function c(a) {
            var c = a.ref;
            if (null !== c)
                try {
                    c(null);
                } catch (t) {
                    b(a, t);
                }
        }
        function d(a) {
            return a.tag === lg || a.tag === kg || a.tag === ng;
        }
        function e(a) {
            for (var b = a;;)
                if (g(b), null !== b.child && b.tag !== ng)
                    b.child['return'] = b, b = b.child;
                else {
                    if (b === a)
                        break;
                    for (; null === b.sibling;) {
                        if (null === b['return'] || b['return'] === a)
                            return;
                        b = b['return'];
                    }
                    b.sibling['return'] = b['return'];
                    b = b.sibling;
                }
        }
        function f(a) {
            for (var b = a, c = !1, d = void 0, f = void 0;;) {
                if (!c) {
                    c = b['return'];
                    a:
                        for (;;) {
                            null === c ? w('160') : void 0;
                            switch (c.tag) {
                            case lg:
                                d = c.stateNode;
                                f = !1;
                                break a;
                            case kg:
                                d = c.stateNode.containerInfo;
                                f = !0;
                                break a;
                            case ng:
                                d = c.stateNode.containerInfo;
                                f = !0;
                                break a;
                            }
                            c = c['return'];
                        }
                    c = !0;
                }
                if (b.tag === lg || b.tag === mg)
                    e(b), f ? C(d, b.stateNode) : H(d, b.stateNode);
                else if (b.tag === ng ? d = b.stateNode.containerInfo : g(b), null !== b.child) {
                    b.child['return'] = b;
                    b = b.child;
                    continue;
                }
                if (b === a)
                    break;
                for (; null === b.sibling;) {
                    if (null === b['return'] || b['return'] === a)
                        return;
                    b = b['return'];
                    b.tag === ng && (c = !1);
                }
                b.sibling['return'] = b['return'];
                b = b.sibling;
            }
        }
        function g(a) {
            'function' === typeof qg && qg(a);
            switch (a.tag) {
            case jg:
                c(a);
                var d = a.stateNode;
                if ('function' === typeof d.componentWillUnmount)
                    try {
                        d.props = a.memoizedProps, d.state = a.memoizedState, d.componentWillUnmount();
                    } catch (t) {
                        b(a, t);
                    }
                break;
            case lg:
                c(a);
                break;
            case og:
                e(a.stateNode);
                break;
            case ng:
                f(a);
            }
        }
        var h = a.commitMount, k = a.commitUpdate, p = a.resetTextContent, x = a.commitTextUpdate, S = a.appendChild, D = a.appendChildToContainer, y = a.insertBefore, B = a.insertInContainerBefore, H = a.removeChild, C = a.removeChildFromContainer, Ca = a.getPublicInstance;
        return {
            commitPlacement: function (a) {
                a: {
                    for (var b = a['return']; null !== b;) {
                        if (d(b)) {
                            var c = b;
                            break a;
                        }
                        b = b['return'];
                    }
                    w('160');
                    c = void 0;
                }
                var e = b = void 0;
                switch (c.tag) {
                case lg:
                    b = c.stateNode;
                    e = !1;
                    break;
                case kg:
                    b = c.stateNode.containerInfo;
                    e = !0;
                    break;
                case ng:
                    b = c.stateNode.containerInfo;
                    e = !0;
                    break;
                default:
                    w('161');
                }
                c.effectTag & ug && (p(b), c.effectTag &= ~ug);
                a:
                    b:
                        for (c = a;;) {
                            for (; null === c.sibling;) {
                                if (null === c['return'] || d(c['return'])) {
                                    c = null;
                                    break a;
                                }
                                c = c['return'];
                            }
                            c.sibling['return'] = c['return'];
                            for (c = c.sibling; c.tag !== lg && c.tag !== mg;) {
                                if (c.effectTag & rg)
                                    continue b;
                                if (null === c.child || c.tag === ng)
                                    continue b;
                                else
                                    c.child['return'] = c, c = c.child;
                            }
                            if (!(c.effectTag & rg)) {
                                c = c.stateNode;
                                break a;
                            }
                        }
                for (var f = a;;) {
                    if (f.tag === lg || f.tag === mg)
                        c ? e ? B(b, f.stateNode, c) : y(b, f.stateNode, c) : e ? D(b, f.stateNode) : S(b, f.stateNode);
                    else if (f.tag !== ng && null !== f.child) {
                        f.child['return'] = f;
                        f = f.child;
                        continue;
                    }
                    if (f === a)
                        break;
                    for (; null === f.sibling;) {
                        if (null === f['return'] || f['return'] === a)
                            return;
                        f = f['return'];
                    }
                    f.sibling['return'] = f['return'];
                    f = f.sibling;
                }
            },
            commitDeletion: function (a) {
                f(a);
                a['return'] = null;
                a.child = null;
                a.alternate && (a.alternate.child = null, a.alternate['return'] = null);
            },
            commitWork: function (a, b) {
                switch (b.tag) {
                case jg:
                    break;
                case lg:
                    var c = b.stateNode;
                    if (null != c) {
                        var d = b.memoizedProps;
                        a = null !== a ? a.memoizedProps : d;
                        var e = b.type, f = b.updateQueue;
                        b.updateQueue = null;
                        null !== f && k(c, f, e, a, d, b);
                    }
                    break;
                case mg:
                    null === b.stateNode ? w('162') : void 0;
                    c = b.memoizedProps;
                    x(b.stateNode, null !== a ? a.memoizedProps : c, c);
                    break;
                case kg:
                    break;
                case ng:
                    break;
                default:
                    w('163');
                }
            },
            commitLifeCycles: function (a, b) {
                switch (b.tag) {
                case jg:
                    var c = b.stateNode;
                    if (b.effectTag & sg)
                        if (null === a)
                            c.props = b.memoizedProps, c.state = b.memoizedState, c.componentDidMount();
                        else {
                            var d = a.memoizedProps;
                            a = a.memoizedState;
                            c.props = b.memoizedProps;
                            c.state = b.memoizedState;
                            c.componentDidUpdate(d, a);
                        }
                    b.effectTag & tg && null !== b.updateQueue && pg(b, b.updateQueue, c);
                    break;
                case kg:
                    a = b.updateQueue;
                    null !== a && pg(b, a, b.child && b.child.stateNode);
                    break;
                case lg:
                    c = b.stateNode;
                    null === a && b.effectTag & sg && h(c, b.type, b.memoizedProps, b);
                    break;
                case mg:
                    break;
                case ng:
                    break;
                default:
                    w('163');
                }
            },
            commitAttachRef: function (a) {
                var b = a.ref;
                if (null !== b) {
                    var c = a.stateNode;
                    switch (a.tag) {
                    case lg:
                        b(Ca(c));
                        break;
                    default:
                        b(c);
                    }
                }
            },
            commitDetachRef: function (a) {
                a = a.ref;
                null !== a && a(null);
            }
        };
    }
    var wg = xd.createCursor, xg = xd.pop, yg = xd.push, zg = {};
    function Ag(a) {
        function b(a) {
            a === zg ? w('174') : void 0;
            return a;
        }
        var c = a.getChildHostContext, d = a.getRootHostContext, e = wg(zg), f = wg(zg), g = wg(zg);
        return {
            getHostContext: function () {
                return b(e.current);
            },
            getRootHostContainer: function () {
                return b(g.current);
            },
            popHostContainer: function (a) {
                xg(e, a);
                xg(f, a);
                xg(g, a);
            },
            popHostContext: function (a) {
                f.current === a && (xg(e, a), xg(f, a));
            },
            pushHostContainer: function (a, b) {
                yg(g, b, a);
                b = d(b);
                yg(f, a, a);
                yg(e, b, a);
            },
            pushHostContext: function (a) {
                var d = b(g.current), h = b(e.current);
                d = c(h, a.type, d);
                h !== d && (yg(f, a, a), yg(e, d, a));
            },
            resetHostContainer: function () {
                e.current = zg;
                g.current = zg;
            }
        };
    }
    var Bg = E.HostComponent, Cg = E.HostText, Dg = E.HostRoot, Eg = J.Deletion, Fg = J.Placement, Gg = de.createFiberFromHostInstanceForDeletion;
    function Hg(a) {
        function b(a, b) {
            var c = Gg();
            c.stateNode = b;
            c['return'] = a;
            c.effectTag = Eg;
            null !== a.lastEffect ? (a.lastEffect.nextEffect = c, a.lastEffect = c) : a.firstEffect = a.lastEffect = c;
        }
        function c(a, b) {
            switch (a.tag) {
            case Bg:
                return f(b, a.type, a.pendingProps);
            case Cg:
                return g(b, a.pendingProps);
            default:
                return !1;
            }
        }
        function d(a) {
            for (a = a['return']; null !== a && a.tag !== Bg && a.tag !== Dg;)
                a = a['return'];
            y = a;
        }
        var e = a.shouldSetTextContent, f = a.canHydrateInstance, g = a.canHydrateTextInstance, h = a.getNextHydratableSibling, k = a.getFirstHydratableChild, p = a.hydrateInstance, x = a.hydrateTextInstance, S = a.didNotHydrateInstance, D = a.didNotFindHydratableInstance;
        a = a.didNotFindHydratableTextInstance;
        if (!(f && g && h && k && p && x && S && D && a))
            return {
                enterHydrationState: function () {
                    return !1;
                },
                resetHydrationState: function () {
                },
                tryToClaimNextHydratableInstance: function () {
                },
                prepareToHydrateHostInstance: function () {
                    w('175');
                },
                prepareToHydrateHostTextInstance: function () {
                    w('176');
                },
                popHydrationState: function () {
                    return !1;
                }
            };
        var y = null, B = null, H = !1;
        return {
            enterHydrationState: function (a) {
                B = k(a.stateNode.containerInfo);
                y = a;
                return H = !0;
            },
            resetHydrationState: function () {
                B = y = null;
                H = !1;
            },
            tryToClaimNextHydratableInstance: function (a) {
                if (H) {
                    var d = B;
                    if (d) {
                        if (!c(a, d)) {
                            d = h(d);
                            if (!d || !c(a, d)) {
                                a.effectTag |= Fg;
                                H = !1;
                                y = a;
                                return;
                            }
                            b(y, B);
                        }
                        a.stateNode = d;
                        y = a;
                        B = k(d);
                    } else
                        a.effectTag |= Fg, H = !1, y = a;
                }
            },
            prepareToHydrateHostInstance: function (a, b, c) {
                b = p(a.stateNode, a.type, a.memoizedProps, b, c, a);
                a.updateQueue = b;
                return null !== b ? !0 : !1;
            },
            prepareToHydrateHostTextInstance: function (a) {
                return x(a.stateNode, a.memoizedProps, a);
            },
            popHydrationState: function (a) {
                if (a !== y)
                    return !1;
                if (!H)
                    return d(a), H = !0, !1;
                var c = a.type;
                if (a.tag !== Bg || 'head' !== c && 'body' !== c && !e(c, a.memoizedProps))
                    for (c = B; c;)
                        b(a, c), c = h(c);
                d(a);
                B = y ? h(a.stateNode) : null;
                return !0;
            }
        };
    }
    var Ig = R.popContextProvider, Jg = xd.reset, Kg = Qa.ReactCurrentOwner, Lg = de.createWorkInProgress, Mg = de.largerPriority, Ng = ig.onCommitRoot, T = Q.NoWork, Og = Q.SynchronousPriority, U = Q.TaskPriority, Pg = Q.HighPriority, Qg = Q.LowPriority, Rg = Q.OffscreenPriority, Sg = Pd.AsyncUpdates, Tg = J.PerformedWork, Ug = J.Placement, Vg = J.Update, Wg = J.PlacementAndUpdate, Xg = J.Deletion, Yg = J.ContentReset, Zg = J.Callback, $g = J.Err, ah = J.Ref, bh = E.HostRoot, ch = E.HostComponent, dh = E.HostPortal, eh = E.ClassComponent, fh = ud.getUpdatePriority, gh = R.resetContext;
    function hh(a) {
        function b() {
            for (; null !== ma && ma.current.pendingWorkPriority === T;) {
                ma.isScheduled = !1;
                var a = ma.nextScheduledRoot;
                ma.nextScheduledRoot = null;
                if (ma === zb)
                    return zb = ma = null, z = T, null;
                ma = a;
            }
            a = ma;
            for (var b = null, c = T; null !== a;)
                a.current.pendingWorkPriority !== T && (c === T || c > a.current.pendingWorkPriority) && (c = a.current.pendingWorkPriority, b = a), a = a.nextScheduledRoot;
            null !== b ? (z = c, Jg(), gh(), t(), I = Lg(b.current, c), b !== nc && (oc = 0, nc = b)) : (z = T, nc = I = null);
        }
        function c(c) {
            Hd = !0;
            na = null;
            var d = c.stateNode;
            d.current === c ? w('177') : void 0;
            z !== Og && z !== U || oc++;
            Kg.current = null;
            if (c.effectTag > Tg)
                if (null !== c.lastEffect) {
                    c.lastEffect.nextEffect = c;
                    var e = c.firstEffect;
                } else
                    e = c;
            else
                e = c.firstEffect;
            Ui();
            for (u = e; null !== u;) {
                var f = !1, g = void 0;
                try {
                    for (; null !== u;) {
                        var h = u.effectTag;
                        h & Yg && a.resetTextContent(u.stateNode);
                        if (h & ah) {
                            var k = u.alternate;
                            null !== k && Ph(k);
                        }
                        switch (h & ~(Zg | $g | Yg | ah | Tg)) {
                        case Ug:
                            q(u);
                            u.effectTag &= ~Ug;
                            break;
                        case Wg:
                            q(u);
                            u.effectTag &= ~Ug;
                            vf(u.alternate, u);
                            break;
                        case Vg:
                            vf(u.alternate, u);
                            break;
                        case Xg:
                            Id = !0, Mh(u), Id = !1;
                        }
                        u = u.nextEffect;
                    }
                } catch (Jd) {
                    f = !0, g = Jd;
                }
                f && (null === u ? w('178') : void 0, x(u, g), null !== u && (u = u.nextEffect));
            }
            Vi();
            d.current = c;
            for (u = e; null !== u;) {
                d = !1;
                e = void 0;
                try {
                    for (; null !== u;) {
                        var Gd = u.effectTag;
                        Gd & (Vg | Zg) && Nh(u.alternate, u);
                        Gd & ah && Oh(u);
                        if (Gd & $g)
                            switch (f = u, g = void 0, null !== P && (g = P.get(f), P['delete'](f), null == g && null !== f.alternate && (f = f.alternate, g = P.get(f), P['delete'](f))), null == g ? w('184') : void 0, f.tag) {
                            case eh:
                                f.stateNode.componentDidCatch(g.error, { componentStack: g.componentStack });
                                break;
                            case bh:
                                null === Ja && (Ja = g.error);
                                break;
                            default:
                                w('157');
                            }
                        var m = u.nextEffect;
                        u.nextEffect = null;
                        u = m;
                    }
                } catch (Jd) {
                    d = !0, e = Jd;
                }
                d && (null === u ? w('178') : void 0, x(u, e), null !== u && (u = u.nextEffect));
            }
            Hd = !1;
            'function' === typeof Ng && Ng(c.stateNode);
            va && (va.forEach(H), va = null);
            b();
        }
        function d(a) {
            for (;;) {
                var b = Lh(a.alternate, a, z), c = a['return'], d = a.sibling;
                var e = a;
                if (!(e.pendingWorkPriority !== T && e.pendingWorkPriority > z)) {
                    for (var f = fh(e), g = e.child; null !== g;)
                        f = Mg(f, g.pendingWorkPriority), g = g.sibling;
                    e.pendingWorkPriority = f;
                }
                if (null !== b)
                    return b;
                null !== c && (null === c.firstEffect && (c.firstEffect = a.firstEffect), null !== a.lastEffect && (null !== c.lastEffect && (c.lastEffect.nextEffect = a.firstEffect), c.lastEffect = a.lastEffect), a.effectTag > Tg && (null !== c.lastEffect ? c.lastEffect.nextEffect = a : c.firstEffect = a, c.lastEffect = a));
                if (null !== d)
                    return d;
                if (null !== c)
                    a = c;
                else {
                    na = a;
                    break;
                }
            }
            return null;
        }
        function e(a) {
            var b = V(a.alternate, a, z);
            null === b && (b = d(a));
            Kg.current = null;
            return b;
        }
        function f(a) {
            var b = ld(a.alternate, a, z);
            null === b && (b = d(a));
            Kg.current = null;
            return b;
        }
        function g(a) {
            p(Rg, a);
        }
        function h() {
            if (null !== P && 0 < P.size && z === U)
                for (; null !== I;) {
                    var a = I;
                    I = null !== P && (P.has(a) || null !== a.alternate && P.has(a.alternate)) ? f(I) : e(I);
                    if (null === I && (null === na ? w('179') : void 0, O = U, c(na), O = z, null === P || 0 === P.size || z !== U))
                        break;
                }
        }
        function k(a, d) {
            null !== na ? (O = U, c(na), h()) : null === I && b();
            if (!(z === T || z > a)) {
                O = z;
                a:
                    do {
                        if (z <= U)
                            for (; null !== I && !(I = e(I), null === I && (null === na ? w('179') : void 0, O = U, c(na), O = z, h(), z === T || z > a || z > U)););
                        else if (null !== d)
                            for (; null !== I && !Ab;)
                                if (1 < d.timeRemaining()) {
                                    if (I = e(I), null === I)
                                        if (null === na ? w('179') : void 0, 1 < d.timeRemaining()) {
                                            if (O = U, c(na), O = z, h(), z === T || z > a || z < Pg)
                                                break;
                                        } else
                                            Ab = !0;
                                } else
                                    Ab = !0;
                        switch (z) {
                        case Og:
                        case U:
                            if (z <= a)
                                continue a;
                            break a;
                        case Pg:
                        case Qg:
                        case Rg:
                            if (null === d)
                                break a;
                            if (!Ab && z <= a)
                                continue a;
                            break a;
                        case T:
                            break a;
                        default:
                            w('181');
                        }
                    } while (1);
            }
        }
        function p(a, b) {
            Da ? w('182') : void 0;
            Da = !0;
            var c = O, d = !1, e = null;
            try {
                k(a, b);
            } catch (Kd) {
                d = !0, e = Kd;
            }
            for (; d;) {
                if (Ya) {
                    Ja = e;
                    break;
                }
                var h = I;
                if (null === h)
                    Ya = !0;
                else {
                    var p = x(h, e);
                    null === p ? w('183') : void 0;
                    if (!Ya) {
                        try {
                            d = p;
                            e = a;
                            p = b;
                            for (var q = d; null !== h;) {
                                switch (h.tag) {
                                case eh:
                                    Ig(h);
                                    break;
                                case ch:
                                    m(h);
                                    break;
                                case bh:
                                    r(h);
                                    break;
                                case dh:
                                    r(h);
                                }
                                if (h === q || h.alternate === q)
                                    break;
                                h = h['return'];
                            }
                            I = f(d);
                            k(e, p);
                        } catch (Kd) {
                            d = !0;
                            e = Kd;
                            continue;
                        }
                        break;
                    }
                }
            }
            O = c;
            null !== b && (Bb = !1);
            z > U && !Bb && ($f(g), Bb = !0);
            a = Ja;
            Ya = Ab = Da = !1;
            nc = Ka = P = Ja = null;
            oc = 0;
            if (null !== a)
                throw a;
        }
        function x(a, b) {
            var c = Kg.current = null, d = !1, e = !1, f = null;
            if (a.tag === bh)
                c = a, S(a) && (Ya = !0);
            else
                for (var g = a['return']; null !== g && null === c;) {
                    g.tag === eh ? 'function' === typeof g.stateNode.componentDidCatch && (d = !0, f = Ra(g), c = g, e = !0) : g.tag === bh && (c = g);
                    if (S(g)) {
                        if (Id || null !== va && (va.has(g) || null !== g.alternate && va.has(g.alternate)))
                            return null;
                        c = null;
                        e = !1;
                    }
                    g = g['return'];
                }
            if (null !== c) {
                null === Ka && (Ka = new Set());
                Ka.add(c);
                var h = '';
                g = a;
                do {
                    a:
                        switch (g.tag) {
                        case fe:
                        case ge:
                        case he:
                        case ie:
                            var k = g._debugOwner, m = g._debugSource;
                            var p = Ra(g);
                            var q = null;
                            k && (q = Ra(k));
                            k = m;
                            p = '\n    in ' + (p || 'Unknown') + (k ? ' (at ' + k.fileName.replace(/^.*[\\\/]/, '') + ':' + k.lineNumber + ')' : q ? ' (created by ' + q + ')' : '');
                            break a;
                        default:
                            p = '';
                        }
                    h += p;
                    g = g['return'];
                } while (g);
                g = h;
                a = Ra(a);
                null === P && (P = new Map());
                b = {
                    componentName: a,
                    componentStack: g,
                    error: b,
                    errorBoundary: d ? c.stateNode : null,
                    errorBoundaryFound: d,
                    errorBoundaryName: f,
                    willRetry: e
                };
                P.set(c, b);
                try {
                    console.error(b.error);
                } catch (Wi) {
                    console.error(Wi);
                }
                Hd ? (null === va && (va = new Set()), va.add(c)) : H(c);
                return c;
            }
            null === Ja && (Ja = b);
            return null;
        }
        function S(a) {
            return null !== Ka && (Ka.has(a) || null !== a.alternate && Ka.has(a.alternate));
        }
        function D(a, b) {
            return y(a, b, !1);
        }
        function y(a, b) {
            oc > Xi && (Ya = !0, w('185'));
            !Da && b <= z && (I = null);
            for (var c = !0; null !== a && c;) {
                c = !1;
                if (a.pendingWorkPriority === T || a.pendingWorkPriority > b)
                    c = !0, a.pendingWorkPriority = b;
                null !== a.alternate && (a.alternate.pendingWorkPriority === T || a.alternate.pendingWorkPriority > b) && (c = !0, a.alternate.pendingWorkPriority = b);
                if (null === a['return'])
                    if (a.tag === bh) {
                        var d = a.stateNode;
                        b === T || d.isScheduled || (d.isScheduled = !0, zb ? zb.nextScheduledRoot = d : ma = d, zb = d);
                        if (!Da)
                            switch (b) {
                            case Og:
                                pc ? p(Og, null) : p(U, null);
                                break;
                            case U:
                                W ? void 0 : w('186');
                                break;
                            default:
                                Bb || ($f(g), Bb = !0);
                            }
                    } else
                        break;
                a = a['return'];
            }
        }
        function B(a, b) {
            var c = O;
            c === T && (c = !Yi || a.internalContextTag & Sg || b ? Qg : Og);
            return c === Og && (Da || W) ? U : c;
        }
        function H(a) {
            y(a, U, !0);
        }
        var C = Ag(a), Ca = Hg(a), r = C.popHostContainer, m = C.popHostContext, t = C.resetHostContainer, v = Lf(a, C, Ca, D, B), V = v.beginWork, ld = v.beginFailedWork, Lh = eg(a, C, Ca).completeWork;
        C = vg(a, x);
        var q = C.commitPlacement, Mh = C.commitDeletion, vf = C.commitWork, Nh = C.commitLifeCycles, Oh = C.commitAttachRef, Ph = C.commitDetachRef, $f = a.scheduleDeferredCallback, Yi = a.useSyncScheduling, Ui = a.prepareForCommit, Vi = a.resetAfterCommit, O = T, Da = !1, Ab = !1, W = !1, pc = !1, I = null, z = T, u = null, na = null, ma = null, zb = null, Bb = !1, P = null, Ka = null, va = null, Ja = null, Ya = !1, Hd = !1, Id = !1, Xi = 1000, oc = 0, nc = null;
        return {
            scheduleUpdate: D,
            getPriorityContext: B,
            batchedUpdates: function (a, b) {
                var c = W;
                W = !0;
                try {
                    return a(b);
                } finally {
                    W = c, Da || W || p(U, null);
                }
            },
            unbatchedUpdates: function (a) {
                var b = pc, c = W;
                pc = W;
                W = !1;
                try {
                    return a();
                } finally {
                    W = c, pc = b;
                }
            },
            flushSync: function (a) {
                var b = W, c = O;
                W = !0;
                O = Og;
                try {
                    return a();
                } finally {
                    W = b, O = c, Da ? w('187') : void 0, p(U, null);
                }
            },
            deferredUpdates: function (a) {
                var b = O;
                O = Qg;
                try {
                    return a();
                } finally {
                    O = b;
                }
            }
        };
    }
    function ih() {
        w('196');
    }
    function jh(a) {
        if (!a)
            return da;
        a = Pa.get(a);
        return 'number' === typeof a.tag ? ih(a) : a._processChildContext(a._context);
    }
    jh._injectFiber = function (a) {
        ih = a;
    };
    var kh = ud.addTopLevelUpdate, lh = R.findCurrentUnmaskedContext, mh = R.isContextProvider, nh = R.processChildContext, oh = E.HostComponent, ph = bb.findCurrentHostFiber, qh = bb.findCurrentHostFiberWithNoPortals;
    jh._injectFiber(function (a) {
        var b = lh(a);
        return mh(a) ? nh(a, b, !1) : b;
    });
    var rh = F.TEXT_NODE;
    function sh(a) {
        for (; a && a.firstChild;)
            a = a.firstChild;
        return a;
    }
    function th(a, b) {
        var c = sh(a);
        a = 0;
        for (var d; c;) {
            if (c.nodeType === rh) {
                d = a + c.textContent.length;
                if (a <= b && d >= b)
                    return {
                        node: c,
                        offset: b - a
                    };
                a = d;
            }
            a: {
                for (; c;) {
                    if (c.nextSibling) {
                        c = c.nextSibling;
                        break a;
                    }
                    c = c.parentNode;
                }
                c = void 0;
            }
            c = sh(c);
        }
    }
    var uh = null;
    function vh() {
        !uh && l.canUseDOM && (uh = 'textContent' in document.documentElement ? 'textContent' : 'innerText');
        return uh;
    }
    var wh = {
            getOffsets: function (a) {
                var b = window.getSelection && window.getSelection();
                if (!b || 0 === b.rangeCount)
                    return null;
                var c = b.anchorNode, d = b.anchorOffset, e = b.focusNode, f = b.focusOffset, g = b.getRangeAt(0);
                try {
                    g.startContainer.nodeType, g.endContainer.nodeType;
                } catch (k) {
                    return null;
                }
                b = b.anchorNode === b.focusNode && b.anchorOffset === b.focusOffset ? 0 : g.toString().length;
                var h = g.cloneRange();
                h.selectNodeContents(a);
                h.setEnd(g.startContainer, g.startOffset);
                a = h.startContainer === h.endContainer && h.startOffset === h.endOffset ? 0 : h.toString().length;
                g = a + b;
                b = document.createRange();
                b.setStart(c, d);
                b.setEnd(e, f);
                c = b.collapsed;
                return {
                    start: c ? g : a,
                    end: c ? a : g
                };
            },
            setOffsets: function (a, b) {
                if (window.getSelection) {
                    var c = window.getSelection(), d = a[vh()].length, e = Math.min(b.start, d);
                    b = void 0 === b.end ? e : Math.min(b.end, d);
                    !c.extend && e > b && (d = b, b = e, e = d);
                    d = th(a, e);
                    a = th(a, b);
                    if (d && a) {
                        var f = document.createRange();
                        f.setStart(d.node, d.offset);
                        c.removeAllRanges();
                        e > b ? (c.addRange(f), c.extend(a.node, a.offset)) : (f.setEnd(a.node, a.offset), c.addRange(f));
                    }
                }
            }
        }, xh = F.ELEMENT_NODE, yh = {
            hasSelectionCapabilities: function (a) {
                var b = a && a.nodeName && a.nodeName.toLowerCase();
                return b && ('input' === b && 'text' === a.type || 'textarea' === b || 'true' === a.contentEditable);
            },
            getSelectionInformation: function () {
                var a = ia();
                return {
                    focusedElem: a,
                    selectionRange: yh.hasSelectionCapabilities(a) ? yh.getSelection(a) : null
                };
            },
            restoreSelection: function (a) {
                var b = ia(), c = a.focusedElem;
                a = a.selectionRange;
                if (b !== c && fa(document.documentElement, c)) {
                    yh.hasSelectionCapabilities(c) && yh.setSelection(c, a);
                    b = [];
                    for (a = c; a = a.parentNode;)
                        a.nodeType === xh && b.push({
                            element: a,
                            left: a.scrollLeft,
                            top: a.scrollTop
                        });
                    ha(c);
                    for (c = 0; c < b.length; c++)
                        a = b[c], a.element.scrollLeft = a.left, a.element.scrollTop = a.top;
                }
            },
            getSelection: function (a) {
                return ('selectionStart' in a ? {
                    start: a.selectionStart,
                    end: a.selectionEnd
                } : wh.getOffsets(a)) || {
                    start: 0,
                    end: 0
                };
            },
            setSelection: function (a, b) {
                var c = b.start, d = b.end;
                void 0 === d && (d = c);
                'selectionStart' in a ? (a.selectionStart = c, a.selectionEnd = Math.min(d, a.value.length)) : wh.setOffsets(a, b);
            }
        }, zh = yh, Ah = F.ELEMENT_NODE;
    function Bh() {
        w('211');
    }
    function Ch() {
        w('212');
    }
    function Dh(a) {
        if (null == a)
            return null;
        if (a.nodeType === Ah)
            return a;
        var b = Pa.get(a);
        if (b)
            return 'number' === typeof b.tag ? Bh(b) : Ch(b);
        'function' === typeof a.render ? w('188') : w('213', Object.keys(a));
    }
    Dh._injectFiber = function (a) {
        Bh = a;
    };
    Dh._injectStack = function (a) {
        Ch = a;
    };
    var Eh = E.HostComponent;
    function Fh(a) {
        if (void 0 !== a._hostParent)
            return a._hostParent;
        if ('number' === typeof a.tag) {
            do
                a = a['return'];
            while (a && a.tag !== Eh);
            if (a)
                return a;
        }
        return null;
    }
    function Gh(a, b) {
        for (var c = 0, d = a; d; d = Fh(d))
            c++;
        d = 0;
        for (var e = b; e; e = Fh(e))
            d++;
        for (; 0 < c - d;)
            a = Fh(a), c--;
        for (; 0 < d - c;)
            b = Fh(b), d--;
        for (; c--;) {
            if (a === b || a === b.alternate)
                return a;
            a = Fh(a);
            b = Fh(b);
        }
        return null;
    }
    var Hh = {
            isAncestor: function (a, b) {
                for (; b;) {
                    if (a === b || a === b.alternate)
                        return !0;
                    b = Fh(b);
                }
                return !1;
            },
            getLowestCommonAncestor: Gh,
            getParentInstance: function (a) {
                return Fh(a);
            },
            traverseTwoPhase: function (a, b, c) {
                for (var d = []; a;)
                    d.push(a), a = Fh(a);
                for (a = d.length; 0 < a--;)
                    b(d[a], 'captured', c);
                for (a = 0; a < d.length; a++)
                    b(d[a], 'bubbled', c);
            },
            traverseEnterLeave: function (a, b, c, d, e) {
                for (var f = a && b ? Gh(a, b) : null, g = []; a && a !== f;)
                    g.push(a), a = Fh(a);
                for (a = []; b && b !== f;)
                    a.push(b), b = Fh(b);
                for (b = 0; b < g.length; b++)
                    c(g[b], 'bubbled', d);
                for (b = a.length; 0 < b--;)
                    c(a[b], 'captured', e);
            }
        }, Ih = Jb.getListener;
    function Jh(a, b, c) {
        if (b = Ih(a, c.dispatchConfig.phasedRegistrationNames[b]))
            c._dispatchListeners = Cb(c._dispatchListeners, b), c._dispatchInstances = Cb(c._dispatchInstances, a);
    }
    function Kh(a) {
        a && a.dispatchConfig.phasedRegistrationNames && Hh.traverseTwoPhase(a._targetInst, Jh, a);
    }
    function Qh(a) {
        if (a && a.dispatchConfig.phasedRegistrationNames) {
            var b = a._targetInst;
            b = b ? Hh.getParentInstance(b) : null;
            Hh.traverseTwoPhase(b, Jh, a);
        }
    }
    function Rh(a, b, c) {
        a && c && c.dispatchConfig.registrationName && (b = Ih(a, c.dispatchConfig.registrationName)) && (c._dispatchListeners = Cb(c._dispatchListeners, b), c._dispatchInstances = Cb(c._dispatchInstances, a));
    }
    function Sh(a) {
        a && a.dispatchConfig.registrationName && Rh(a._targetInst, null, a);
    }
    var Th = {
            accumulateTwoPhaseDispatches: function (a) {
                Db(a, Kh);
            },
            accumulateTwoPhaseDispatchesSkipTarget: function (a) {
                Db(a, Qh);
            },
            accumulateDirectDispatches: function (a) {
                Db(a, Sh);
            },
            accumulateEnterLeaveDispatches: function (a, b, c, d) {
                Hh.traverseEnterLeave(c, d, Rh, a, b);
            }
        }, X = {
            _root: null,
            _startText: null,
            _fallbackText: null
        }, Uh = {
            initialize: function (a) {
                X._root = a;
                X._startText = Uh.getText();
                return !0;
            },
            reset: function () {
                X._root = null;
                X._startText = null;
                X._fallbackText = null;
            },
            getData: function () {
                if (X._fallbackText)
                    return X._fallbackText;
                var a, b = X._startText, c = b.length, d, e = Uh.getText(), f = e.length;
                for (a = 0; a < c && b[a] === e[a]; a++);
                var g = c - a;
                for (d = 1; d <= g && b[c - d] === e[f - d]; d++);
                X._fallbackText = e.slice(a, 1 < d ? 1 - d : void 0);
                return X._fallbackText;
            },
            getText: function () {
                return 'value' in X._root ? X._root.value : X._root[vh()];
            }
        }, Vh = Uh, Wh = 'dispatchConfig _targetInst nativeEvent isDefaultPrevented isPropagationStopped _dispatchListeners _dispatchInstances'.split(' '), Xh = {
            type: null,
            target: null,
            currentTarget: ca.thatReturnsNull,
            eventPhase: null,
            bubbles: null,
            cancelable: null,
            timeStamp: function (a) {
                return a.timeStamp || Date.now();
            },
            defaultPrevented: null,
            isTrusted: null
        };
    function Y(a, b, c, d) {
        this.dispatchConfig = a;
        this._targetInst = b;
        this.nativeEvent = c;
        a = this.constructor.Interface;
        for (var e in a)
            a.hasOwnProperty(e) && ((b = a[e]) ? this[e] = b(c) : 'target' === e ? this.target = d : this[e] = c[e]);
        this.isDefaultPrevented = (null != c.defaultPrevented ? c.defaultPrevented : !1 === c.returnValue) ? ca.thatReturnsTrue : ca.thatReturnsFalse;
        this.isPropagationStopped = ca.thatReturnsFalse;
        return this;
    }
    n(Y.prototype, {
        preventDefault: function () {
            this.defaultPrevented = !0;
            var a = this.nativeEvent;
            a && (a.preventDefault ? a.preventDefault() : 'unknown' !== typeof a.returnValue && (a.returnValue = !1), this.isDefaultPrevented = ca.thatReturnsTrue);
        },
        stopPropagation: function () {
            var a = this.nativeEvent;
            a && (a.stopPropagation ? a.stopPropagation() : 'unknown' !== typeof a.cancelBubble && (a.cancelBubble = !0), this.isPropagationStopped = ca.thatReturnsTrue);
        },
        persist: function () {
            this.isPersistent = ca.thatReturnsTrue;
        },
        isPersistent: ca.thatReturnsFalse,
        destructor: function () {
            var a = this.constructor.Interface, b;
            for (b in a)
                this[b] = null;
            for (a = 0; a < Wh.length; a++)
                this[Wh[a]] = null;
        }
    });
    Y.Interface = Xh;
    Y.augmentClass = function (a, b) {
        function c() {
        }
        c.prototype = this.prototype;
        var d = new c();
        n(d, a.prototype);
        a.prototype = d;
        a.prototype.constructor = a;
        a.Interface = n({}, this.Interface, b);
        a.augmentClass = this.augmentClass;
        Yh(a);
    };
    Yh(Y);
    function Zh(a, b, c, d) {
        if (this.eventPool.length) {
            var e = this.eventPool.pop();
            this.call(e, a, b, c, d);
            return e;
        }
        return new this(a, b, c, d);
    }
    function $h(a) {
        a instanceof this ? void 0 : w('223');
        a.destructor();
        10 > this.eventPool.length && this.eventPool.push(a);
    }
    function Yh(a) {
        a.eventPool = [];
        a.getPooled = Zh;
        a.release = $h;
    }
    function ai(a, b, c, d) {
        return Y.call(this, a, b, c, d);
    }
    Y.augmentClass(ai, { data: null });
    function bi(a, b, c, d) {
        return Y.call(this, a, b, c, d);
    }
    Y.augmentClass(bi, { data: null });
    var ci = [
            9,
            13,
            27,
            32
        ], di = l.canUseDOM && 'CompositionEvent' in window, ei = null;
    l.canUseDOM && 'documentMode' in document && (ei = document.documentMode);
    var fi;
    if (fi = l.canUseDOM && 'TextEvent' in window && !ei) {
        var gi = window.opera;
        fi = !('object' === typeof gi && 'function' === typeof gi.version && 12 >= parseInt(gi.version(), 10));
    }
    var hi = fi, ii = l.canUseDOM && (!di || ei && 8 < ei && 11 >= ei), ji = String.fromCharCode(32), ki = {
            beforeInput: {
                phasedRegistrationNames: {
                    bubbled: 'onBeforeInput',
                    captured: 'onBeforeInputCapture'
                },
                dependencies: [
                    'topCompositionEnd',
                    'topKeyPress',
                    'topTextInput',
                    'topPaste'
                ]
            },
            compositionEnd: {
                phasedRegistrationNames: {
                    bubbled: 'onCompositionEnd',
                    captured: 'onCompositionEndCapture'
                },
                dependencies: 'topBlur topCompositionEnd topKeyDown topKeyPress topKeyUp topMouseDown'.split(' ')
            },
            compositionStart: {
                phasedRegistrationNames: {
                    bubbled: 'onCompositionStart',
                    captured: 'onCompositionStartCapture'
                },
                dependencies: 'topBlur topCompositionStart topKeyDown topKeyPress topKeyUp topMouseDown'.split(' ')
            },
            compositionUpdate: {
                phasedRegistrationNames: {
                    bubbled: 'onCompositionUpdate',
                    captured: 'onCompositionUpdateCapture'
                },
                dependencies: 'topBlur topCompositionUpdate topKeyDown topKeyPress topKeyUp topMouseDown'.split(' ')
            }
        }, li = !1;
    function mi(a, b) {
        switch (a) {
        case 'topKeyUp':
            return -1 !== ci.indexOf(b.keyCode);
        case 'topKeyDown':
            return 229 !== b.keyCode;
        case 'topKeyPress':
        case 'topMouseDown':
        case 'topBlur':
            return !0;
        default:
            return !1;
        }
    }
    function ni(a) {
        a = a.detail;
        return 'object' === typeof a && 'data' in a ? a.data : null;
    }
    var oi = !1;
    function pi(a, b) {
        switch (a) {
        case 'topCompositionEnd':
            return ni(b);
        case 'topKeyPress':
            if (32 !== b.which)
                return null;
            li = !0;
            return ji;
        case 'topTextInput':
            return a = b.data, a === ji && li ? null : a;
        default:
            return null;
        }
    }
    function qi(a, b) {
        if (oi)
            return 'topCompositionEnd' === a || !di && mi(a, b) ? (a = Vh.getData(), Vh.reset(), oi = !1, a) : null;
        switch (a) {
        case 'topPaste':
            return null;
        case 'topKeyPress':
            if (!(b.ctrlKey || b.altKey || b.metaKey) || b.ctrlKey && b.altKey) {
                if (b.char && 1 < b.char.length)
                    return b.char;
                if (b.which)
                    return String.fromCharCode(b.which);
            }
            return null;
        case 'topCompositionEnd':
            return ii ? null : b.data;
        default:
            return null;
        }
    }
    var ri = {
            eventTypes: ki,
            extractEvents: function (a, b, c, d) {
                var e;
                if (di)
                    b: {
                        switch (a) {
                        case 'topCompositionStart':
                            var f = ki.compositionStart;
                            break b;
                        case 'topCompositionEnd':
                            f = ki.compositionEnd;
                            break b;
                        case 'topCompositionUpdate':
                            f = ki.compositionUpdate;
                            break b;
                        }
                        f = void 0;
                    }
                else
                    oi ? mi(a, c) && (f = ki.compositionEnd) : 'topKeyDown' === a && 229 === c.keyCode && (f = ki.compositionStart);
                f ? (ii && (oi || f !== ki.compositionStart ? f === ki.compositionEnd && oi && (e = Vh.getData()) : oi = Vh.initialize(d)), f = ai.getPooled(f, b, c, d), e ? f.data = e : (e = ni(c), null !== e && (f.data = e)), Th.accumulateTwoPhaseDispatches(f), e = f) : e = null;
                (a = hi ? pi(a, c) : qi(a, c)) ? (b = bi.getPooled(ki.beforeInput, b, c, d), b.data = a, Th.accumulateTwoPhaseDispatches(b)) : b = null;
                return [
                    e,
                    b
                ];
            }
        }, si = {
            color: !0,
            date: !0,
            datetime: !0,
            'datetime-local': !0,
            email: !0,
            month: !0,
            number: !0,
            password: !0,
            range: !0,
            search: !0,
            tel: !0,
            text: !0,
            time: !0,
            url: !0,
            week: !0
        };
    function ti(a) {
        var b = a && a.nodeName && a.nodeName.toLowerCase();
        return 'input' === b ? !!si[a.type] : 'textarea' === b ? !0 : !1;
    }
    var ui = {
        change: {
            phasedRegistrationNames: {
                bubbled: 'onChange',
                captured: 'onChangeCapture'
            },
            dependencies: 'topBlur topChange topClick topFocus topInput topKeyDown topKeyUp topSelectionChange'.split(' ')
        }
    };
    function vi(a, b, c) {
        a = Y.getPooled(ui.change, a, b, c);
        a.type = 'change';
        nb.enqueueStateRestore(c);
        Th.accumulateTwoPhaseDispatches(a);
        return a;
    }
    var wi = null, xi = null;
    function yi(a) {
        Jb.enqueueEvents(a);
        Jb.processEventQueue(!1);
    }
    function zi(a) {
        var b = G.getNodeFromInstance(a);
        if (Bc.updateValueIfChanged(b))
            return a;
    }
    function Ai(a, b) {
        if ('topChange' === a)
            return b;
    }
    var Bi = !1;
    l.canUseDOM && (Bi = Lb('input') && (!document.documentMode || 9 < document.documentMode));
    function Ci() {
        wi && (wi.detachEvent('onpropertychange', Di), xi = wi = null);
    }
    function Di(a) {
        'value' === a.propertyName && zi(xi) && (a = vi(xi, a, ub(a)), sb.batchedUpdates(yi, a));
    }
    function Ei(a, b, c) {
        'topFocus' === a ? (Ci(), wi = b, xi = c, wi.attachEvent('onpropertychange', Di)) : 'topBlur' === a && Ci();
    }
    function Fi(a) {
        if ('topSelectionChange' === a || 'topKeyUp' === a || 'topKeyDown' === a)
            return zi(xi);
    }
    function Gi(a, b) {
        if ('topClick' === a)
            return zi(b);
    }
    function Hi(a, b) {
        if ('topInput' === a || 'topChange' === a)
            return zi(b);
    }
    var Ii = {
        eventTypes: ui,
        _isInputEventSupported: Bi,
        extractEvents: function (a, b, c, d) {
            var e = b ? G.getNodeFromInstance(b) : window, f = e.nodeName && e.nodeName.toLowerCase();
            if ('select' === f || 'input' === f && 'file' === e.type)
                var g = Ai;
            else if (ti(e))
                if (Bi)
                    g = Hi;
                else {
                    g = Fi;
                    var h = Ei;
                }
            else
                f = e.nodeName, !f || 'input' !== f.toLowerCase() || 'checkbox' !== e.type && 'radio' !== e.type || (g = Gi);
            if (g && (g = g(a, b)))
                return vi(g, c, d);
            h && h(a, e, b);
            'topBlur' === a && null != b && (a = b._wrapperState || e._wrapperState) && a.controlled && 'number' === e.type && (a = '' + e.value, e.getAttribute('value') !== a && e.setAttribute('value', a));
        }
    };
    function Ji(a, b, c, d) {
        return Y.call(this, a, b, c, d);
    }
    Y.augmentClass(Ji, {
        view: function (a) {
            if (a.view)
                return a.view;
            a = ub(a);
            return a.window === a ? a : (a = a.ownerDocument) ? a.defaultView || a.parentWindow : window;
        },
        detail: function (a) {
            return a.detail || 0;
        }
    });
    var Ki = {
        Alt: 'altKey',
        Control: 'ctrlKey',
        Meta: 'metaKey',
        Shift: 'shiftKey'
    };
    function Li(a) {
        var b = this.nativeEvent;
        return b.getModifierState ? b.getModifierState(a) : (a = Ki[a]) ? !!b[a] : !1;
    }
    function Mi() {
        return Li;
    }
    function Ni(a, b, c, d) {
        return Y.call(this, a, b, c, d);
    }
    Ji.augmentClass(Ni, {
        screenX: null,
        screenY: null,
        clientX: null,
        clientY: null,
        pageX: null,
        pageY: null,
        ctrlKey: null,
        shiftKey: null,
        altKey: null,
        metaKey: null,
        getModifierState: Mi,
        button: null,
        buttons: null,
        relatedTarget: function (a) {
            return a.relatedTarget || (a.fromElement === a.srcElement ? a.toElement : a.fromElement);
        }
    });
    var Oi = {
            mouseEnter: {
                registrationName: 'onMouseEnter',
                dependencies: [
                    'topMouseOut',
                    'topMouseOver'
                ]
            },
            mouseLeave: {
                registrationName: 'onMouseLeave',
                dependencies: [
                    'topMouseOut',
                    'topMouseOver'
                ]
            }
        }, Pi = {
            eventTypes: Oi,
            extractEvents: function (a, b, c, d) {
                if ('topMouseOver' === a && (c.relatedTarget || c.fromElement) || 'topMouseOut' !== a && 'topMouseOver' !== a)
                    return null;
                var e = d.window === d ? d : (e = d.ownerDocument) ? e.defaultView || e.parentWindow : window;
                'topMouseOut' === a ? (a = b, b = (b = c.relatedTarget || c.toElement) ? G.getClosestInstanceFromNode(b) : null) : a = null;
                if (a === b)
                    return null;
                var f = null == a ? e : G.getNodeFromInstance(a);
                e = null == b ? e : G.getNodeFromInstance(b);
                var g = Ni.getPooled(Oi.mouseLeave, a, c, d);
                g.type = 'mouseleave';
                g.target = f;
                g.relatedTarget = e;
                c = Ni.getPooled(Oi.mouseEnter, b, c, d);
                c.type = 'mouseenter';
                c.target = e;
                c.relatedTarget = f;
                Th.accumulateEnterLeaveDispatches(g, c, a, b);
                return [
                    g,
                    c
                ];
            }
        }, Qi = F.DOCUMENT_NODE, Ri = l.canUseDOM && 'documentMode' in document && 11 >= document.documentMode, Si = {
            select: {
                phasedRegistrationNames: {
                    bubbled: 'onSelect',
                    captured: 'onSelectCapture'
                },
                dependencies: 'topBlur topContextMenu topFocus topKeyDown topKeyUp topMouseDown topMouseUp topSelectionChange'.split(' ')
            }
        }, Ti = null, Zi = null, $i = null, aj = !1, bj = M.isListeningToAllDependencies;
    function cj(a, b) {
        if (aj || null == Ti || Ti !== ia())
            return null;
        var c = Ti;
        'selectionStart' in c && zh.hasSelectionCapabilities(c) ? c = {
            start: c.selectionStart,
            end: c.selectionEnd
        } : window.getSelection ? (c = window.getSelection(), c = {
            anchorNode: c.anchorNode,
            anchorOffset: c.anchorOffset,
            focusNode: c.focusNode,
            focusOffset: c.focusOffset
        }) : c = void 0;
        return $i && ea($i, c) ? null : ($i = c, a = Y.getPooled(Si.select, Zi, a, b), a.type = 'select', a.target = Ti, Th.accumulateTwoPhaseDispatches(a), a);
    }
    var dj = {
        eventTypes: Si,
        extractEvents: function (a, b, c, d) {
            var e = d.window === d ? d.document : d.nodeType === Qi ? d : d.ownerDocument;
            if (!e || !bj('onSelect', e))
                return null;
            e = b ? G.getNodeFromInstance(b) : window;
            switch (a) {
            case 'topFocus':
                if (ti(e) || 'true' === e.contentEditable)
                    Ti = e, Zi = b, $i = null;
                break;
            case 'topBlur':
                $i = Zi = Ti = null;
                break;
            case 'topMouseDown':
                aj = !0;
                break;
            case 'topContextMenu':
            case 'topMouseUp':
                return aj = !1, cj(c, d);
            case 'topSelectionChange':
                if (Ri)
                    break;
            case 'topKeyDown':
            case 'topKeyUp':
                return cj(c, d);
            }
            return null;
        }
    };
    function ej(a, b, c, d) {
        return Y.call(this, a, b, c, d);
    }
    Y.augmentClass(ej, {
        animationName: null,
        elapsedTime: null,
        pseudoElement: null
    });
    function fj(a, b, c, d) {
        return Y.call(this, a, b, c, d);
    }
    Y.augmentClass(fj, {
        clipboardData: function (a) {
            return 'clipboardData' in a ? a.clipboardData : window.clipboardData;
        }
    });
    function gj(a, b, c, d) {
        return Y.call(this, a, b, c, d);
    }
    Ji.augmentClass(gj, { relatedTarget: null });
    function hj(a) {
        var b = a.keyCode;
        'charCode' in a ? (a = a.charCode, 0 === a && 13 === b && (a = 13)) : a = b;
        return 32 <= a || 13 === a ? a : 0;
    }
    var ij = {
            Esc: 'Escape',
            Spacebar: ' ',
            Left: 'ArrowLeft',
            Up: 'ArrowUp',
            Right: 'ArrowRight',
            Down: 'ArrowDown',
            Del: 'Delete',
            Win: 'OS',
            Menu: 'ContextMenu',
            Apps: 'ContextMenu',
            Scroll: 'ScrollLock',
            MozPrintableKey: 'Unidentified'
        }, jj = {
            8: 'Backspace',
            9: 'Tab',
            12: 'Clear',
            13: 'Enter',
            16: 'Shift',
            17: 'Control',
            18: 'Alt',
            19: 'Pause',
            20: 'CapsLock',
            27: 'Escape',
            32: ' ',
            33: 'PageUp',
            34: 'PageDown',
            35: 'End',
            36: 'Home',
            37: 'ArrowLeft',
            38: 'ArrowUp',
            39: 'ArrowRight',
            40: 'ArrowDown',
            45: 'Insert',
            46: 'Delete',
            112: 'F1',
            113: 'F2',
            114: 'F3',
            115: 'F4',
            116: 'F5',
            117: 'F6',
            118: 'F7',
            119: 'F8',
            120: 'F9',
            121: 'F10',
            122: 'F11',
            123: 'F12',
            144: 'NumLock',
            145: 'ScrollLock',
            224: 'Meta'
        };
    function kj(a, b, c, d) {
        return Y.call(this, a, b, c, d);
    }
    Ji.augmentClass(kj, {
        key: function (a) {
            if (a.key) {
                var b = ij[a.key] || a.key;
                if ('Unidentified' !== b)
                    return b;
            }
            return 'keypress' === a.type ? (a = hj(a), 13 === a ? 'Enter' : String.fromCharCode(a)) : 'keydown' === a.type || 'keyup' === a.type ? jj[a.keyCode] || 'Unidentified' : '';
        },
        location: null,
        ctrlKey: null,
        shiftKey: null,
        altKey: null,
        metaKey: null,
        repeat: null,
        locale: null,
        getModifierState: Mi,
        charCode: function (a) {
            return 'keypress' === a.type ? hj(a) : 0;
        },
        keyCode: function (a) {
            return 'keydown' === a.type || 'keyup' === a.type ? a.keyCode : 0;
        },
        which: function (a) {
            return 'keypress' === a.type ? hj(a) : 'keydown' === a.type || 'keyup' === a.type ? a.keyCode : 0;
        }
    });
    function lj(a, b, c, d) {
        return Y.call(this, a, b, c, d);
    }
    Ni.augmentClass(lj, { dataTransfer: null });
    function mj(a, b, c, d) {
        return Y.call(this, a, b, c, d);
    }
    Ji.augmentClass(mj, {
        touches: null,
        targetTouches: null,
        changedTouches: null,
        altKey: null,
        metaKey: null,
        ctrlKey: null,
        shiftKey: null,
        getModifierState: Mi
    });
    function nj(a, b, c, d) {
        return Y.call(this, a, b, c, d);
    }
    Y.augmentClass(nj, {
        propertyName: null,
        elapsedTime: null,
        pseudoElement: null
    });
    function oj(a, b, c, d) {
        return Y.call(this, a, b, c, d);
    }
    Ni.augmentClass(oj, {
        deltaX: function (a) {
            return 'deltaX' in a ? a.deltaX : 'wheelDeltaX' in a ? -a.wheelDeltaX : 0;
        },
        deltaY: function (a) {
            return 'deltaY' in a ? a.deltaY : 'wheelDeltaY' in a ? -a.wheelDeltaY : 'wheelDelta' in a ? -a.wheelDelta : 0;
        },
        deltaZ: null,
        deltaMode: null
    });
    var pj = {}, qj = {};
    'abort animationEnd animationIteration animationStart blur cancel canPlay canPlayThrough click close contextMenu copy cut doubleClick drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error focus input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing progress rateChange reset scroll seeked seeking stalled submit suspend timeUpdate toggle touchCancel touchEnd touchMove touchStart transitionEnd volumeChange waiting wheel'.split(' ').forEach(function (a) {
        var b = a[0].toUpperCase() + a.slice(1), c = 'on' + b;
        b = 'top' + b;
        c = {
            phasedRegistrationNames: {
                bubbled: c,
                captured: c + 'Capture'
            },
            dependencies: [b]
        };
        pj[a] = c;
        qj[b] = c;
    });
    var rj = {
        eventTypes: pj,
        extractEvents: function (a, b, c, d) {
            var e = qj[a];
            if (!e)
                return null;
            switch (a) {
            case 'topAbort':
            case 'topCancel':
            case 'topCanPlay':
            case 'topCanPlayThrough':
            case 'topClose':
            case 'topDurationChange':
            case 'topEmptied':
            case 'topEncrypted':
            case 'topEnded':
            case 'topError':
            case 'topInput':
            case 'topInvalid':
            case 'topLoad':
            case 'topLoadedData':
            case 'topLoadedMetadata':
            case 'topLoadStart':
            case 'topPause':
            case 'topPlay':
            case 'topPlaying':
            case 'topProgress':
            case 'topRateChange':
            case 'topReset':
            case 'topSeeked':
            case 'topSeeking':
            case 'topStalled':
            case 'topSubmit':
            case 'topSuspend':
            case 'topTimeUpdate':
            case 'topToggle':
            case 'topVolumeChange':
            case 'topWaiting':
                var f = Y;
                break;
            case 'topKeyPress':
                if (0 === hj(c))
                    return null;
            case 'topKeyDown':
            case 'topKeyUp':
                f = kj;
                break;
            case 'topBlur':
            case 'topFocus':
                f = gj;
                break;
            case 'topClick':
                if (2 === c.button)
                    return null;
            case 'topDoubleClick':
            case 'topMouseDown':
            case 'topMouseMove':
            case 'topMouseUp':
            case 'topMouseOut':
            case 'topMouseOver':
            case 'topContextMenu':
                f = Ni;
                break;
            case 'topDrag':
            case 'topDragEnd':
            case 'topDragEnter':
            case 'topDragExit':
            case 'topDragLeave':
            case 'topDragOver':
            case 'topDragStart':
            case 'topDrop':
                f = lj;
                break;
            case 'topTouchCancel':
            case 'topTouchEnd':
            case 'topTouchMove':
            case 'topTouchStart':
                f = mj;
                break;
            case 'topAnimationEnd':
            case 'topAnimationIteration':
            case 'topAnimationStart':
                f = ej;
                break;
            case 'topTransitionEnd':
                f = nj;
                break;
            case 'topScroll':
                f = Ji;
                break;
            case 'topWheel':
                f = oj;
                break;
            case 'topCopy':
            case 'topCut':
            case 'topPaste':
                f = fj;
            }
            f ? void 0 : w('86', a);
            a = f.getPooled(e, b, c, d);
            Th.accumulateTwoPhaseDispatches(a);
            return a;
        }
    };
    L.setHandleTopLevel(M.handleTopLevel);
    Jb.injection.injectEventPluginOrder('ResponderEventPlugin SimpleEventPlugin TapEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin'.split(' '));
    ib.injection.injectComponentTree(G);
    Jb.injection.injectEventPluginsByName({
        SimpleEventPlugin: rj,
        EnterLeaveEventPlugin: Pi,
        ChangeEventPlugin: Ii,
        SelectEventPlugin: dj,
        BeforeInputEventPlugin: ri
    });
    var sj = A.injection.MUST_USE_PROPERTY, Z = A.injection.HAS_BOOLEAN_VALUE, tj = A.injection.HAS_NUMERIC_VALUE, uj = A.injection.HAS_POSITIVE_NUMERIC_VALUE, vj = A.injection.HAS_STRING_BOOLEAN_VALUE, wj = {
            Properties: {
                allowFullScreen: Z,
                allowTransparency: vj,
                async: Z,
                autoPlay: Z,
                capture: Z,
                checked: sj | Z,
                cols: uj,
                contentEditable: vj,
                controls: Z,
                'default': Z,
                defer: Z,
                disabled: Z,
                download: A.injection.HAS_OVERLOADED_BOOLEAN_VALUE,
                draggable: vj,
                formNoValidate: Z,
                hidden: Z,
                loop: Z,
                multiple: sj | Z,
                muted: sj | Z,
                noValidate: Z,
                open: Z,
                playsInline: Z,
                readOnly: Z,
                required: Z,
                reversed: Z,
                rows: uj,
                rowSpan: tj,
                scoped: Z,
                seamless: Z,
                selected: sj | Z,
                size: uj,
                start: tj,
                span: uj,
                spellCheck: vj,
                style: 0,
                itemScope: Z,
                acceptCharset: 0,
                className: 0,
                htmlFor: 0,
                httpEquiv: 0,
                value: vj
            },
            DOMAttributeNames: {
                acceptCharset: 'accept-charset',
                className: 'class',
                htmlFor: 'for',
                httpEquiv: 'http-equiv'
            },
            DOMMutationMethods: {
                value: function (a, b) {
                    if (null == b)
                        return a.removeAttribute('value');
                    'number' !== a.type || !1 === a.hasAttribute('value') ? a.setAttribute('value', '' + b) : a.validity && !a.validity.badInput && a.ownerDocument.activeElement !== a && a.setAttribute('value', '' + b);
                }
            }
        }, xj = A.injection.HAS_STRING_BOOLEAN_VALUE, yj = {
            xlink: 'http://www.w3.org/1999/xlink',
            xml: 'http://www.w3.org/XML/1998/namespace'
        }, zj = {
            Properties: {
                autoReverse: xj,
                externalResourcesRequired: xj,
                preserveAlpha: xj
            },
            DOMAttributeNames: {
                autoReverse: 'autoReverse',
                externalResourcesRequired: 'externalResourcesRequired',
                preserveAlpha: 'preserveAlpha'
            },
            DOMAttributeNamespaces: {
                xlinkActuate: yj.xlink,
                xlinkArcrole: yj.xlink,
                xlinkHref: yj.xlink,
                xlinkRole: yj.xlink,
                xlinkShow: yj.xlink,
                xlinkTitle: yj.xlink,
                xlinkType: yj.xlink,
                xmlBase: yj.xml,
                xmlLang: yj.xml,
                xmlSpace: yj.xml
            }
        }, Aj = /[\-\:]([a-z])/g;
    function Bj(a) {
        return a[1].toUpperCase();
    }
    'accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode x-height xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type xml:base xmlns:xlink xml:lang xml:space'.split(' ').forEach(function (a) {
        var b = a.replace(Aj, Bj);
        zj.Properties[b] = 0;
        zj.DOMAttributeNames[b] = a;
    });
    A.injection.injectDOMPropertyConfig(wj);
    A.injection.injectDOMPropertyConfig(zj);
    var Cj = ig.injectInternals, Dj = F.ELEMENT_NODE, Ej = F.TEXT_NODE, Fj = F.COMMENT_NODE, Gj = F.DOCUMENT_NODE, Hj = F.DOCUMENT_FRAGMENT_NODE, Ij = A.ROOT_ATTRIBUTE_NAME, Jj = ka.getChildNamespace, Kj = N.createElement, Lj = N.createTextNode, Mj = N.setInitialProperties, Nj = N.diffProperties, Oj = N.updateProperties, Pj = N.diffHydratedProperties, Qj = N.diffHydratedText, Rj = N.warnForDeletedHydratableElement, Sj = N.warnForDeletedHydratableText, Tj = N.warnForInsertedHydratedElement, Uj = N.warnForInsertedHydratedText, Vj = G.precacheFiberNode, Wj = G.updateFiberProps;
    nb.injection.injectFiberControlledHostComponent(N);
    Dh._injectFiber(function (a) {
        return Xj.findHostInstance(a);
    });
    var Yj = null, Zj = null;
    function ak(a) {
        return !(!a || a.nodeType !== Dj && a.nodeType !== Gj && a.nodeType !== Hj && (a.nodeType !== Fj || ' react-mount-point-unstable ' !== a.nodeValue));
    }
    function bk(a) {
        a = a ? a.nodeType === Gj ? a.documentElement : a.firstChild : null;
        return !(!a || a.nodeType !== Dj || !a.hasAttribute(Ij));
    }
    var Xj = function (a) {
        var b = a.getPublicInstance;
        a = hh(a);
        var c = a.scheduleUpdate, d = a.getPriorityContext;
        return {
            createContainer: function (a) {
                var b = ee();
                a = {
                    current: b,
                    containerInfo: a,
                    isScheduled: !1,
                    nextScheduledRoot: null,
                    context: null,
                    pendingContext: null
                };
                return b.stateNode = a;
            },
            updateContainer: function (a, b, g, h) {
                var e = b.current;
                g = jh(g);
                null === b.context ? b.context = g : b.pendingContext = g;
                b = h;
                h = d(e, ed.enableAsyncSubtreeAPI && null != a && null != a.type && null != a.type.prototype && !0 === a.type.prototype.unstable_isAsyncReactComponent);
                a = { element: a };
                kh(e, a, void 0 === b ? null : b, h);
                c(e, h);
            },
            batchedUpdates: a.batchedUpdates,
            unbatchedUpdates: a.unbatchedUpdates,
            deferredUpdates: a.deferredUpdates,
            flushSync: a.flushSync,
            getPublicRootInstance: function (a) {
                a = a.current;
                if (!a.child)
                    return null;
                switch (a.child.tag) {
                case oh:
                    return b(a.child.stateNode);
                default:
                    return a.child.stateNode;
                }
            },
            findHostInstance: function (a) {
                a = ph(a);
                return null === a ? null : a.stateNode;
            },
            findHostInstanceWithNoPortals: function (a) {
                a = qh(a);
                return null === a ? null : a.stateNode;
            }
        };
    }({
        getRootHostContext: function (a) {
            if (a.nodeType === Gj)
                a = (a = a.documentElement) ? a.namespaceURI : Jj(null, '');
            else {
                var b = a.nodeType === Fj ? a.parentNode : a;
                a = b.namespaceURI || null;
                b = b.tagName;
                a = Jj(a, b);
            }
            return a;
        },
        getChildHostContext: function (a, b) {
            return Jj(a, b);
        },
        getPublicInstance: function (a) {
            return a;
        },
        prepareForCommit: function () {
            Yj = M.isEnabled();
            Zj = zh.getSelectionInformation();
            M.setEnabled(!1);
        },
        resetAfterCommit: function () {
            zh.restoreSelection(Zj);
            Zj = null;
            M.setEnabled(Yj);
            Yj = null;
        },
        createInstance: function (a, b, c, d, e) {
            a = Kj(a, b, c, d);
            Vj(e, a);
            Wj(a, b);
            return a;
        },
        appendInitialChild: function (a, b) {
            a.appendChild(b);
        },
        finalizeInitialChildren: function (a, b, c, d) {
            Mj(a, b, c, d);
            a: {
                switch (b) {
                case 'button':
                case 'input':
                case 'select':
                case 'textarea':
                    a = !!c.autoFocus;
                    break a;
                }
                a = !1;
            }
            return a;
        },
        prepareUpdate: function (a, b, c, d, e) {
            return Nj(a, b, c, d, e);
        },
        commitMount: function (a) {
            a.focus();
        },
        commitUpdate: function (a, b, c, d, e) {
            Wj(a, e);
            Oj(a, b, c, d, e);
        },
        shouldSetTextContent: function (a, b) {
            return 'textarea' === a || 'string' === typeof b.children || 'number' === typeof b.children || 'object' === typeof b.dangerouslySetInnerHTML && null !== b.dangerouslySetInnerHTML && 'string' === typeof b.dangerouslySetInnerHTML.__html;
        },
        resetTextContent: function (a) {
            a.textContent = '';
        },
        shouldDeprioritizeSubtree: function (a, b) {
            return !!b.hidden;
        },
        createTextInstance: function (a, b, c, d) {
            a = Lj(a, b);
            Vj(d, a);
            return a;
        },
        commitTextUpdate: function (a, b, c) {
            a.nodeValue = c;
        },
        appendChild: function (a, b) {
            a.appendChild(b);
        },
        appendChildToContainer: function (a, b) {
            a.nodeType === Fj ? a.parentNode.insertBefore(b, a) : a.appendChild(b);
        },
        insertBefore: function (a, b, c) {
            a.insertBefore(b, c);
        },
        insertInContainerBefore: function (a, b, c) {
            a.nodeType === Fj ? a.parentNode.insertBefore(b, c) : a.insertBefore(b, c);
        },
        removeChild: function (a, b) {
            a.removeChild(b);
        },
        removeChildFromContainer: function (a, b) {
            a.nodeType === Fj ? a.parentNode.removeChild(b) : a.removeChild(b);
        },
        canHydrateInstance: function (a, b) {
            return a.nodeType === Dj && b === a.nodeName.toLowerCase();
        },
        canHydrateTextInstance: function (a, b) {
            return '' === b ? !1 : a.nodeType === Ej;
        },
        getNextHydratableSibling: function (a) {
            for (a = a.nextSibling; a && a.nodeType !== Dj && a.nodeType !== Ej;)
                a = a.nextSibling;
            return a;
        },
        getFirstHydratableChild: function (a) {
            for (a = a.firstChild; a && a.nodeType !== Dj && a.nodeType !== Ej;)
                a = a.nextSibling;
            return a;
        },
        hydrateInstance: function (a, b, c, d, e, f) {
            Vj(f, a);
            Wj(a, c);
            return Pj(a, b, c, e, d);
        },
        hydrateTextInstance: function (a, b, c) {
            Vj(c, a);
            return Qj(a, b);
        },
        didNotHydrateInstance: function (a, b) {
            1 === b.nodeType ? Rj(a, b) : Sj(a, b);
        },
        didNotFindHydratableInstance: function (a, b, c) {
            Tj(a, b, c);
        },
        didNotFindHydratableTextInstance: function (a, b) {
            Uj(a, b);
        },
        scheduleDeferredCallback: dd.rIC,
        useSyncScheduling: !0
    });
    sb.injection.injectFiberBatchedUpdates(Xj.batchedUpdates);
    function ck(a, b, c, d, e) {
        ak(c) ? void 0 : w('200');
        var f = c._reactRootContainer;
        if (f)
            Xj.updateContainer(b, f, a, e);
        else {
            if (!d && !bk(c))
                for (d = void 0; d = c.lastChild;)
                    c.removeChild(d);
            var g = Xj.createContainer(c);
            f = c._reactRootContainer = g;
            Xj.unbatchedUpdates(function () {
                Xj.updateContainer(b, g, a, e);
            });
        }
        return Xj.getPublicRootInstance(f);
    }
    function dk(a, b) {
        var c = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null;
        ak(b) ? void 0 : w('200');
        return ne.createPortal(a, b, null, c);
    }
    var ek = {
        createPortal: dk,
        hydrate: function (a, b, c) {
            return ck(null, a, b, !0, c);
        },
        render: function (a, b, c) {
            return ck(null, a, b, !1, c);
        },
        unstable_renderSubtreeIntoContainer: function (a, b, c, d) {
            null != a && Pa.has(a) ? void 0 : w('38');
            return ck(a, b, c, !1, d);
        },
        unmountComponentAtNode: function (a) {
            ak(a) ? void 0 : w('40');
            return a._reactRootContainer ? (Xj.unbatchedUpdates(function () {
                ck(null, null, a, !1, function () {
                    a._reactRootContainer = null;
                });
            }), !0) : !1;
        },
        findDOMNode: Dh,
        unstable_createPortal: dk,
        unstable_batchedUpdates: sb.batchedUpdates,
        unstable_deferredUpdates: Xj.deferredUpdates,
        flushSync: Xj.flushSync,
        __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
            EventPluginHub: Jb,
            EventPluginRegistry: sa,
            EventPropagators: Th,
            ReactControlledComponent: nb,
            ReactDOMComponentTree: G,
            ReactDOMEventListener: L
        }
    };
    Cj({
        findFiberByHostInstance: G.getClosestInstanceFromNode,
        findHostInstanceByFiber: Xj.findHostInstance,
        bundleType: 0,
        version: '16.0.0',
        rendererPackageName: 'react-dom'
    });
    module.exports = ek;
});
/*fbjs@0.8.16#lib/hyphenate*/
define('fbjs@0.8.16#lib/hyphenate', function (require, exports, module) {
    'use strict';
    var _uppercasePattern = /([A-Z])/g;
    function hyphenate(string) {
        return string.replace(_uppercasePattern, '-$1').toLowerCase();
    }
    module.exports = hyphenate;
});
/*fbjs@0.8.16#lib/hyphenateStyleName*/
define('fbjs@0.8.16#lib/hyphenateStyleName', [
    'require',
    'exports',
    'module',
    './hyphenate'
], function (require, exports, module) {
    'use strict';
    var hyphenate = require('./hyphenate');
    var msPattern = /^ms-/;
    function hyphenateStyleName(string) {
        return hyphenate(string).replace(msPattern, '-ms-');
    }
    module.exports = hyphenateStyleName;
});
/*fbjs@0.8.16#lib/camelize*/
define('fbjs@0.8.16#lib/camelize', function (require, exports, module) {
    'use strict';
    var _hyphenPattern = /-(.)/g;
    function camelize(string) {
        return string.replace(_hyphenPattern, function (_, character) {
            return character.toUpperCase();
        });
    }
    module.exports = camelize;
});
/*fbjs@0.8.16#lib/camelizeStyleName*/
define('fbjs@0.8.16#lib/camelizeStyleName', [
    'require',
    'exports',
    'module',
    './camelize'
], function (require, exports, module) {
    'use strict';
    var camelize = require('./camelize');
    var msPattern = /^-ms-/;
    function camelizeStyleName(string) {
        return camelize(string.replace(msPattern, 'ms-'));
    }
    module.exports = camelizeStyleName;
});
/*fbjs@0.8.16#lib/performance*/
define('fbjs@0.8.16#lib/performance', [
    'require',
    'exports',
    'module',
    './ExecutionEnvironment'
], function (require, exports, module) {
    'use strict';
    var ExecutionEnvironment = require('./ExecutionEnvironment');
    var performance;
    if (ExecutionEnvironment.canUseDOM) {
        performance = window.performance || window.msPerformance || window.webkitPerformance;
    }
    module.exports = performance || {};
});
/*fbjs@0.8.16#lib/performanceNow*/
define('fbjs@0.8.16#lib/performanceNow', [
    'require',
    'exports',
    'module',
    './performance'
], function (require, exports, module) {
    'use strict';
    var performance = require('./performance');
    var performanceNow;
    if (performance.now) {
        performanceNow = function performanceNow() {
            return performance.now();
        };
    } else {
        performanceNow = function performanceNow() {
            return Date.now();
        };
    }
    module.exports = performanceNow;
});
/*prop-types@15.6.0#factoryWithTypeCheckers*/
define('prop-types@15.6.0#factoryWithTypeCheckers', [
    'require',
    'exports',
    'module',
    'fbjs/lib/emptyFunction',
    'fbjs/lib/invariant',
    'fbjs/lib/warning',
    'object-assign',
    './lib/ReactPropTypesSecret',
    './checkPropTypes'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var emptyFunction = require('fbjs/lib/emptyFunction');
        var invariant = require('fbjs/lib/invariant');
        var warning = require('fbjs/lib/warning');
        var assign = require('object-assign');
        var ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');
        var checkPropTypes = require('./checkPropTypes');
        module.exports = function (isValidElement, throwOnDirectAccess) {
            var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
            var FAUX_ITERATOR_SYMBOL = '@@iterator';
            function getIteratorFn(maybeIterable) {
                var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
                if (typeof iteratorFn === 'function') {
                    return iteratorFn;
                }
            }
            var ANONYMOUS = '<<anonymous>>';
            var ReactPropTypes = {
                array: createPrimitiveTypeChecker('array'),
                bool: createPrimitiveTypeChecker('boolean'),
                func: createPrimitiveTypeChecker('function'),
                number: createPrimitiveTypeChecker('number'),
                object: createPrimitiveTypeChecker('object'),
                string: createPrimitiveTypeChecker('string'),
                symbol: createPrimitiveTypeChecker('symbol'),
                any: createAnyTypeChecker(),
                arrayOf: createArrayOfTypeChecker,
                element: createElementTypeChecker(),
                instanceOf: createInstanceTypeChecker,
                node: createNodeChecker(),
                objectOf: createObjectOfTypeChecker,
                oneOf: createEnumTypeChecker,
                oneOfType: createUnionTypeChecker,
                shape: createShapeTypeChecker,
                exact: createStrictShapeTypeChecker
            };
            function is(x, y) {
                if (x === y) {
                    return x !== 0 || 1 / x === 1 / y;
                } else {
                    return x !== x && y !== y;
                }
            }
            function PropTypeError(message) {
                this.message = message;
                this.stack = '';
            }
            PropTypeError.prototype = Error.prototype;
            function createChainableTypeChecker(validate) {
                if (process.env.NODE_ENV !== 'production') {
                    var manualPropTypeCallCache = {};
                    var manualPropTypeWarningCount = 0;
                }
                function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
                    componentName = componentName || ANONYMOUS;
                    propFullName = propFullName || propName;
                    if (secret !== ReactPropTypesSecret) {
                        if (throwOnDirectAccess) {
                            invariant(false, 'Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use `PropTypes.checkPropTypes()` to call them. ' + 'Read more at http://fb.me/use-check-prop-types');
                        } else if (process.env.NODE_ENV !== 'production' && typeof console !== 'undefined') {
                            var cacheKey = componentName + ':' + propName;
                            if (!manualPropTypeCallCache[cacheKey] && manualPropTypeWarningCount < 3) {
                                warning(false, 'You are manually calling a React.PropTypes validation ' + 'function for the `%s` prop on `%s`. This is deprecated ' + 'and will throw in the standalone `prop-types` package. ' + 'You may be seeing this warning due to a third-party PropTypes ' + 'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.', propFullName, componentName);
                                manualPropTypeCallCache[cacheKey] = true;
                                manualPropTypeWarningCount++;
                            }
                        }
                    }
                    if (props[propName] == null) {
                        if (isRequired) {
                            if (props[propName] === null) {
                                return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
                            }
                            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
                        }
                        return null;
                    } else {
                        return validate(props, propName, componentName, location, propFullName);
                    }
                }
                var chainedCheckType = checkType.bind(null, false);
                chainedCheckType.isRequired = checkType.bind(null, true);
                return chainedCheckType;
            }
            function createPrimitiveTypeChecker(expectedType) {
                function validate(props, propName, componentName, location, propFullName, secret) {
                    var propValue = props[propName];
                    var propType = getPropType(propValue);
                    if (propType !== expectedType) {
                        var preciseType = getPreciseType(propValue);
                        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
                    }
                    return null;
                }
                return createChainableTypeChecker(validate);
            }
            function createAnyTypeChecker() {
                return createChainableTypeChecker(emptyFunction.thatReturnsNull);
            }
            function createArrayOfTypeChecker(typeChecker) {
                function validate(props, propName, componentName, location, propFullName) {
                    if (typeof typeChecker !== 'function') {
                        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
                    }
                    var propValue = props[propName];
                    if (!Array.isArray(propValue)) {
                        var propType = getPropType(propValue);
                        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
                    }
                    for (var i = 0; i < propValue.length; i++) {
                        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
                        if (error instanceof Error) {
                            return error;
                        }
                    }
                    return null;
                }
                return createChainableTypeChecker(validate);
            }
            function createElementTypeChecker() {
                function validate(props, propName, componentName, location, propFullName) {
                    var propValue = props[propName];
                    if (!isValidElement(propValue)) {
                        var propType = getPropType(propValue);
                        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
                    }
                    return null;
                }
                return createChainableTypeChecker(validate);
            }
            function createInstanceTypeChecker(expectedClass) {
                function validate(props, propName, componentName, location, propFullName) {
                    if (!(props[propName] instanceof expectedClass)) {
                        var expectedClassName = expectedClass.name || ANONYMOUS;
                        var actualClassName = getClassName(props[propName]);
                        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
                    }
                    return null;
                }
                return createChainableTypeChecker(validate);
            }
            function createEnumTypeChecker(expectedValues) {
                if (!Array.isArray(expectedValues)) {
                    process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOf, expected an instance of array.') : void 0;
                    return emptyFunction.thatReturnsNull;
                }
                function validate(props, propName, componentName, location, propFullName) {
                    var propValue = props[propName];
                    for (var i = 0; i < expectedValues.length; i++) {
                        if (is(propValue, expectedValues[i])) {
                            return null;
                        }
                    }
                    var valuesString = JSON.stringify(expectedValues);
                    return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
                }
                return createChainableTypeChecker(validate);
            }
            function createObjectOfTypeChecker(typeChecker) {
                function validate(props, propName, componentName, location, propFullName) {
                    if (typeof typeChecker !== 'function') {
                        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
                    }
                    var propValue = props[propName];
                    var propType = getPropType(propValue);
                    if (propType !== 'object') {
                        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
                    }
                    for (var key in propValue) {
                        if (propValue.hasOwnProperty(key)) {
                            var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
                            if (error instanceof Error) {
                                return error;
                            }
                        }
                    }
                    return null;
                }
                return createChainableTypeChecker(validate);
            }
            function createUnionTypeChecker(arrayOfTypeCheckers) {
                if (!Array.isArray(arrayOfTypeCheckers)) {
                    process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
                    return emptyFunction.thatReturnsNull;
                }
                for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
                    var checker = arrayOfTypeCheckers[i];
                    if (typeof checker !== 'function') {
                        warning(false, 'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' + 'received %s at index %s.', getPostfixForTypeWarning(checker), i);
                        return emptyFunction.thatReturnsNull;
                    }
                }
                function validate(props, propName, componentName, location, propFullName) {
                    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
                        var checker = arrayOfTypeCheckers[i];
                        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
                            return null;
                        }
                    }
                    return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
                }
                return createChainableTypeChecker(validate);
            }
            function createNodeChecker() {
                function validate(props, propName, componentName, location, propFullName) {
                    if (!isNode(props[propName])) {
                        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
                    }
                    return null;
                }
                return createChainableTypeChecker(validate);
            }
            function createShapeTypeChecker(shapeTypes) {
                function validate(props, propName, componentName, location, propFullName) {
                    var propValue = props[propName];
                    var propType = getPropType(propValue);
                    if (propType !== 'object') {
                        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
                    }
                    for (var key in shapeTypes) {
                        var checker = shapeTypes[key];
                        if (!checker) {
                            continue;
                        }
                        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
                        if (error) {
                            return error;
                        }
                    }
                    return null;
                }
                return createChainableTypeChecker(validate);
            }
            function createStrictShapeTypeChecker(shapeTypes) {
                function validate(props, propName, componentName, location, propFullName) {
                    var propValue = props[propName];
                    var propType = getPropType(propValue);
                    if (propType !== 'object') {
                        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
                    }
                    var allKeys = assign({}, props[propName], shapeTypes);
                    for (var key in allKeys) {
                        var checker = shapeTypes[key];
                        if (!checker) {
                            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' + '\nBad object: ' + JSON.stringify(props[propName], null, '  ') + '\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  '));
                        }
                        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
                        if (error) {
                            return error;
                        }
                    }
                    return null;
                }
                return createChainableTypeChecker(validate);
            }
            function isNode(propValue) {
                switch (typeof propValue) {
                case 'number':
                case 'string':
                case 'undefined':
                    return true;
                case 'boolean':
                    return !propValue;
                case 'object':
                    if (Array.isArray(propValue)) {
                        return propValue.every(isNode);
                    }
                    if (propValue === null || isValidElement(propValue)) {
                        return true;
                    }
                    var iteratorFn = getIteratorFn(propValue);
                    if (iteratorFn) {
                        var iterator = iteratorFn.call(propValue);
                        var step;
                        if (iteratorFn !== propValue.entries) {
                            while (!(step = iterator.next()).done) {
                                if (!isNode(step.value)) {
                                    return false;
                                }
                            }
                        } else {
                            while (!(step = iterator.next()).done) {
                                var entry = step.value;
                                if (entry) {
                                    if (!isNode(entry[1])) {
                                        return false;
                                    }
                                }
                            }
                        }
                    } else {
                        return false;
                    }
                    return true;
                default:
                    return false;
                }
            }
            function isSymbol(propType, propValue) {
                if (propType === 'symbol') {
                    return true;
                }
                if (propValue['@@toStringTag'] === 'Symbol') {
                    return true;
                }
                if (typeof Symbol === 'function' && propValue instanceof Symbol) {
                    return true;
                }
                return false;
            }
            function getPropType(propValue) {
                var propType = typeof propValue;
                if (Array.isArray(propValue)) {
                    return 'array';
                }
                if (propValue instanceof RegExp) {
                    return 'object';
                }
                if (isSymbol(propType, propValue)) {
                    return 'symbol';
                }
                return propType;
            }
            function getPreciseType(propValue) {
                if (typeof propValue === 'undefined' || propValue === null) {
                    return '' + propValue;
                }
                var propType = getPropType(propValue);
                if (propType === 'object') {
                    if (propValue instanceof Date) {
                        return 'date';
                    } else if (propValue instanceof RegExp) {
                        return 'regexp';
                    }
                }
                return propType;
            }
            function getPostfixForTypeWarning(value) {
                var type = getPreciseType(value);
                switch (type) {
                case 'array':
                case 'object':
                    return 'an ' + type;
                case 'boolean':
                case 'date':
                case 'regexp':
                    return 'a ' + type;
                default:
                    return type;
                }
            }
            function getClassName(propValue) {
                if (!propValue.constructor || !propValue.constructor.name) {
                    return ANONYMOUS;
                }
                return propValue.constructor.name;
            }
            ReactPropTypes.checkPropTypes = checkPropTypes;
            ReactPropTypes.PropTypes = ReactPropTypes;
            return ReactPropTypes;
        };
    }(function () {
        return this;
    }(), require, exports, module));
});
/*prop-types@15.6.0#factoryWithThrowingShims*/
define('prop-types@15.6.0#factoryWithThrowingShims', [
    'require',
    'exports',
    'module',
    'fbjs/lib/emptyFunction',
    'fbjs/lib/invariant',
    './lib/ReactPropTypesSecret'
], function (require, exports, module) {
    'use strict';
    var emptyFunction = require('fbjs/lib/emptyFunction');
    var invariant = require('fbjs/lib/invariant');
    var ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');
    module.exports = function () {
        function shim(props, propName, componentName, location, propFullName, secret) {
            if (secret === ReactPropTypesSecret) {
                return;
            }
            invariant(false, 'Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use PropTypes.checkPropTypes() to call them. ' + 'Read more at http://fb.me/use-check-prop-types');
        }
        ;
        shim.isRequired = shim;
        function getShim() {
            return shim;
        }
        ;
        var ReactPropTypes = {
            array: shim,
            bool: shim,
            func: shim,
            number: shim,
            object: shim,
            string: shim,
            symbol: shim,
            any: shim,
            arrayOf: getShim,
            element: shim,
            instanceOf: getShim,
            node: shim,
            objectOf: getShim,
            oneOf: getShim,
            oneOfType: getShim,
            shape: getShim,
            exact: getShim
        };
        ReactPropTypes.checkPropTypes = emptyFunction;
        ReactPropTypes.PropTypes = ReactPropTypes;
        return ReactPropTypes;
    };
});
/*prop-types@15.6.0#index*/
define('prop-types@15.6.0#index', [
    'require',
    'exports',
    'module',
    './factoryWithTypeCheckers',
    './factoryWithThrowingShims'
], function (require, exports, module) {
    if (process.env.NODE_ENV !== 'production') {
        var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol.for && Symbol.for('react.element') || 60103;
        var isValidElement = function (object) {
            return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        };
        var throwOnDirectAccess = true;
        module.exports = require('./factoryWithTypeCheckers')(isValidElement, throwOnDirectAccess);
    } else {
        module.exports = require('./factoryWithThrowingShims')();
    }
});
/*react-dom@16.0.0#cjs/react-dom.development*/
define('react-dom@16.0.0#cjs/react-dom.development', [
    'require',
    'exports',
    'module',
    'react',
    'fbjs/lib/invariant',
    'fbjs/lib/ExecutionEnvironment',
    'object-assign',
    'fbjs/lib/EventListener',
    'fbjs/lib/warning',
    'fbjs/lib/hyphenateStyleName',
    'fbjs/lib/emptyFunction',
    'fbjs/lib/camelizeStyleName',
    'fbjs/lib/performanceNow',
    'prop-types',
    'fbjs/lib/emptyObject',
    'prop-types/checkPropTypes',
    'fbjs/lib/shallowEqual',
    'fbjs/lib/containsNode',
    'fbjs/lib/focusNode',
    'fbjs/lib/getActiveElement'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        if (process.env.NODE_ENV !== 'production') {
            (function () {
                'use strict';
                var react = require('react');
                var invariant = require('fbjs/lib/invariant');
                var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
                var _assign = require('object-assign');
                var EventListener = require('fbjs/lib/EventListener');
                var require$$0 = require('fbjs/lib/warning');
                var hyphenateStyleName = require('fbjs/lib/hyphenateStyleName');
                var emptyFunction = require('fbjs/lib/emptyFunction');
                var camelizeStyleName = require('fbjs/lib/camelizeStyleName');
                var performanceNow = require('fbjs/lib/performanceNow');
                var propTypes = require('prop-types');
                var emptyObject = require('fbjs/lib/emptyObject');
                var checkPropTypes = require('prop-types/checkPropTypes');
                var shallowEqual = require('fbjs/lib/shallowEqual');
                var containsNode = require('fbjs/lib/containsNode');
                var focusNode = require('fbjs/lib/focusNode');
                var getActiveElement = require('fbjs/lib/getActiveElement');
                !react ? invariant(false, 'ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM.') : void 0;
                var HTML_NAMESPACE = 'http://www.w3.org/1999/xhtml';
                var MATH_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';
                var SVG_NAMESPACE = 'http://www.w3.org/2000/svg';
                var Namespaces = {
                    html: HTML_NAMESPACE,
                    mathml: MATH_NAMESPACE,
                    svg: SVG_NAMESPACE
                };
                function getIntrinsicNamespace(type) {
                    switch (type) {
                    case 'svg':
                        return SVG_NAMESPACE;
                    case 'math':
                        return MATH_NAMESPACE;
                    default:
                        return HTML_NAMESPACE;
                    }
                }
                function getChildNamespace$1(parentNamespace, type) {
                    if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
                        return getIntrinsicNamespace(type);
                    }
                    if (parentNamespace === SVG_NAMESPACE && type === 'foreignObject') {
                        return HTML_NAMESPACE;
                    }
                    return parentNamespace;
                }
                var Namespaces_1 = Namespaces;
                var getIntrinsicNamespace_1 = getIntrinsicNamespace;
                var getChildNamespace_1 = getChildNamespace$1;
                var DOMNamespaces = {
                    Namespaces: Namespaces_1,
                    getIntrinsicNamespace: getIntrinsicNamespace_1,
                    getChildNamespace: getChildNamespace_1
                };
                var eventPluginOrder = null;
                var namesToPlugins = {};
                function recomputePluginOrdering() {
                    if (!eventPluginOrder) {
                        return;
                    }
                    for (var pluginName in namesToPlugins) {
                        var pluginModule = namesToPlugins[pluginName];
                        var pluginIndex = eventPluginOrder.indexOf(pluginName);
                        !(pluginIndex > -1) ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.', pluginName) : void 0;
                        if (EventPluginRegistry.plugins[pluginIndex]) {
                            continue;
                        }
                        !pluginModule.extractEvents ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.', pluginName) : void 0;
                        EventPluginRegistry.plugins[pluginIndex] = pluginModule;
                        var publishedEvents = pluginModule.eventTypes;
                        for (var eventName in publishedEvents) {
                            !publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName) ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : void 0;
                        }
                    }
                }
                function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
                    !!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName) ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.', eventName) : void 0;
                    EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;
                    var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
                    if (phasedRegistrationNames) {
                        for (var phaseName in phasedRegistrationNames) {
                            if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
                                var phasedRegistrationName = phasedRegistrationNames[phaseName];
                                publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
                            }
                        }
                        return true;
                    } else if (dispatchConfig.registrationName) {
                        publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);
                        return true;
                    }
                    return false;
                }
                function publishRegistrationName(registrationName, pluginModule, eventName) {
                    !!EventPluginRegistry.registrationNameModules[registrationName] ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.', registrationName) : void 0;
                    EventPluginRegistry.registrationNameModules[registrationName] = pluginModule;
                    EventPluginRegistry.registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;
                    {
                        var lowerCasedName = registrationName.toLowerCase();
                        EventPluginRegistry.possibleRegistrationNames[lowerCasedName] = registrationName;
                        if (registrationName === 'onDoubleClick') {
                            EventPluginRegistry.possibleRegistrationNames.ondblclick = registrationName;
                        }
                    }
                }
                var EventPluginRegistry = {
                    plugins: [],
                    eventNameDispatchConfigs: {},
                    registrationNameModules: {},
                    registrationNameDependencies: {},
                    possibleRegistrationNames: {},
                    injectEventPluginOrder: function (injectedEventPluginOrder) {
                        !!eventPluginOrder ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.') : void 0;
                        eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
                        recomputePluginOrdering();
                    },
                    injectEventPluginsByName: function (injectedNamesToPlugins) {
                        var isOrderingDirty = false;
                        for (var pluginName in injectedNamesToPlugins) {
                            if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
                                continue;
                            }
                            var pluginModule = injectedNamesToPlugins[pluginName];
                            if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
                                !!namesToPlugins[pluginName] ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.', pluginName) : void 0;
                                namesToPlugins[pluginName] = pluginModule;
                                isOrderingDirty = true;
                            }
                        }
                        if (isOrderingDirty) {
                            recomputePluginOrdering();
                        }
                    }
                };
                var EventPluginRegistry_1 = EventPluginRegistry;
                var RESERVED_PROPS = {
                    children: true,
                    dangerouslySetInnerHTML: true,
                    autoFocus: true,
                    defaultValue: true,
                    defaultChecked: true,
                    innerHTML: true,
                    suppressContentEditableWarning: true,
                    style: true
                };
                function checkMask(value, bitmask) {
                    return (value & bitmask) === bitmask;
                }
                var DOMPropertyInjection = {
                    MUST_USE_PROPERTY: 1,
                    HAS_BOOLEAN_VALUE: 4,
                    HAS_NUMERIC_VALUE: 8,
                    HAS_POSITIVE_NUMERIC_VALUE: 16 | 8,
                    HAS_OVERLOADED_BOOLEAN_VALUE: 32,
                    HAS_STRING_BOOLEAN_VALUE: 64,
                    injectDOMPropertyConfig: function (domPropertyConfig) {
                        var Injection = DOMPropertyInjection;
                        var Properties = domPropertyConfig.Properties || {};
                        var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};
                        var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
                        var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};
                        for (var propName in Properties) {
                            !!DOMProperty.properties.hasOwnProperty(propName) ? invariant(false, 'injectDOMPropertyConfig(...): You\'re trying to inject DOM property \'%s\' which has already been injected. You may be accidentally injecting the same DOM property config twice, or you may be injecting two configs that have conflicting property names.', propName) : void 0;
                            var lowerCased = propName.toLowerCase();
                            var propConfig = Properties[propName];
                            var propertyInfo = {
                                attributeName: lowerCased,
                                attributeNamespace: null,
                                propertyName: propName,
                                mutationMethod: null,
                                mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),
                                hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),
                                hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),
                                hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),
                                hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE),
                                hasStringBooleanValue: checkMask(propConfig, Injection.HAS_STRING_BOOLEAN_VALUE)
                            };
                            !(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ? invariant(false, 'DOMProperty: Value can be one of boolean, overloaded boolean, or numeric value, but not a combination: %s', propName) : void 0;
                            if (DOMAttributeNames.hasOwnProperty(propName)) {
                                var attributeName = DOMAttributeNames[propName];
                                propertyInfo.attributeName = attributeName;
                            }
                            if (DOMAttributeNamespaces.hasOwnProperty(propName)) {
                                propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];
                            }
                            if (DOMMutationMethods.hasOwnProperty(propName)) {
                                propertyInfo.mutationMethod = DOMMutationMethods[propName];
                            }
                            DOMProperty.properties[propName] = propertyInfo;
                        }
                    }
                };
                var ATTRIBUTE_NAME_START_CHAR = ':A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD';
                var DOMProperty = {
                    ID_ATTRIBUTE_NAME: 'data-reactid',
                    ROOT_ATTRIBUTE_NAME: 'data-reactroot',
                    ATTRIBUTE_NAME_START_CHAR: ATTRIBUTE_NAME_START_CHAR,
                    ATTRIBUTE_NAME_CHAR: ATTRIBUTE_NAME_START_CHAR + '\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040',
                    properties: {},
                    shouldSetAttribute: function (name, value) {
                        if (DOMProperty.isReservedProp(name)) {
                            return false;
                        }
                        if ((name[0] === 'o' || name[0] === 'O') && (name[1] === 'n' || name[1] === 'N')) {
                            return false;
                        }
                        if (value === null) {
                            return true;
                        }
                        switch (typeof value) {
                        case 'boolean':
                            return DOMProperty.shouldAttributeAcceptBooleanValue(name);
                        case 'undefined':
                        case 'number':
                        case 'string':
                        case 'object':
                            return true;
                        default:
                            return false;
                        }
                    },
                    getPropertyInfo: function (name) {
                        return DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
                    },
                    shouldAttributeAcceptBooleanValue: function (name) {
                        if (DOMProperty.isReservedProp(name)) {
                            return true;
                        }
                        var propertyInfo = DOMProperty.getPropertyInfo(name);
                        if (propertyInfo) {
                            return propertyInfo.hasBooleanValue || propertyInfo.hasStringBooleanValue || propertyInfo.hasOverloadedBooleanValue;
                        }
                        var prefix = name.toLowerCase().slice(0, 5);
                        return prefix === 'data-' || prefix === 'aria-';
                    },
                    isReservedProp: function (name) {
                        return RESERVED_PROPS.hasOwnProperty(name);
                    },
                    injection: DOMPropertyInjection
                };
                var DOMProperty_1 = DOMProperty;
                var ReactDOMComponentFlags = { hasCachedChildNodes: 1 << 0 };
                var ReactDOMComponentFlags_1 = ReactDOMComponentFlags;
                var ReactTypeOfWork = {
                    IndeterminateComponent: 0,
                    FunctionalComponent: 1,
                    ClassComponent: 2,
                    HostRoot: 3,
                    HostPortal: 4,
                    HostComponent: 5,
                    HostText: 6,
                    CoroutineComponent: 7,
                    CoroutineHandlerPhase: 8,
                    YieldComponent: 9,
                    Fragment: 10
                };
                var HTMLNodeType = {
                    ELEMENT_NODE: 1,
                    TEXT_NODE: 3,
                    COMMENT_NODE: 8,
                    DOCUMENT_NODE: 9,
                    DOCUMENT_FRAGMENT_NODE: 11
                };
                var HTMLNodeType_1 = HTMLNodeType;
                var HostComponent = ReactTypeOfWork.HostComponent;
                var HostText = ReactTypeOfWork.HostText;
                var ELEMENT_NODE$1 = HTMLNodeType_1.ELEMENT_NODE;
                var COMMENT_NODE$1 = HTMLNodeType_1.COMMENT_NODE;
                var ATTR_NAME = DOMProperty_1.ID_ATTRIBUTE_NAME;
                var Flags = ReactDOMComponentFlags_1;
                var randomKey = Math.random().toString(36).slice(2);
                var internalInstanceKey = '__reactInternalInstance$' + randomKey;
                var internalEventHandlersKey = '__reactEventHandlers$' + randomKey;
                function shouldPrecacheNode(node, nodeID) {
                    return node.nodeType === ELEMENT_NODE$1 && node.getAttribute(ATTR_NAME) === '' + nodeID || node.nodeType === COMMENT_NODE$1 && node.nodeValue === ' react-text: ' + nodeID + ' ' || node.nodeType === COMMENT_NODE$1 && node.nodeValue === ' react-empty: ' + nodeID + ' ';
                }
                function getRenderedHostOrTextFromComponent(component) {
                    var rendered;
                    while (rendered = component._renderedComponent) {
                        component = rendered;
                    }
                    return component;
                }
                function precacheNode(inst, node) {
                    var hostInst = getRenderedHostOrTextFromComponent(inst);
                    hostInst._hostNode = node;
                    node[internalInstanceKey] = hostInst;
                }
                function precacheFiberNode$1(hostInst, node) {
                    node[internalInstanceKey] = hostInst;
                }
                function uncacheNode(inst) {
                    var node = inst._hostNode;
                    if (node) {
                        delete node[internalInstanceKey];
                        inst._hostNode = null;
                    }
                }
                function precacheChildNodes(inst, node) {
                    if (inst._flags & Flags.hasCachedChildNodes) {
                        return;
                    }
                    var children = inst._renderedChildren;
                    var childNode = node.firstChild;
                    outer:
                        for (var name in children) {
                            if (!children.hasOwnProperty(name)) {
                                continue;
                            }
                            var childInst = children[name];
                            var childID = getRenderedHostOrTextFromComponent(childInst)._domID;
                            if (childID === 0) {
                                continue;
                            }
                            for (; childNode !== null; childNode = childNode.nextSibling) {
                                if (shouldPrecacheNode(childNode, childID)) {
                                    precacheNode(childInst, childNode);
                                    continue outer;
                                }
                            }
                            invariant(false, 'Unable to find element with ID %s.', childID);
                        }
                    inst._flags |= Flags.hasCachedChildNodes;
                }
                function getClosestInstanceFromNode(node) {
                    if (node[internalInstanceKey]) {
                        return node[internalInstanceKey];
                    }
                    var parents = [];
                    while (!node[internalInstanceKey]) {
                        parents.push(node);
                        if (node.parentNode) {
                            node = node.parentNode;
                        } else {
                            return null;
                        }
                    }
                    var closest;
                    var inst = node[internalInstanceKey];
                    if (inst.tag === HostComponent || inst.tag === HostText) {
                        return inst;
                    }
                    for (; node && (inst = node[internalInstanceKey]); node = parents.pop()) {
                        closest = inst;
                        if (parents.length) {
                            precacheChildNodes(inst, node);
                        }
                    }
                    return closest;
                }
                function getInstanceFromNode(node) {
                    var inst = node[internalInstanceKey];
                    if (inst) {
                        if (inst.tag === HostComponent || inst.tag === HostText) {
                            return inst;
                        } else if (inst._hostNode === node) {
                            return inst;
                        } else {
                            return null;
                        }
                    }
                    inst = getClosestInstanceFromNode(node);
                    if (inst != null && inst._hostNode === node) {
                        return inst;
                    } else {
                        return null;
                    }
                }
                function getNodeFromInstance(inst) {
                    if (inst.tag === HostComponent || inst.tag === HostText) {
                        return inst.stateNode;
                    }
                    !(inst._hostNode !== undefined) ? invariant(false, 'getNodeFromInstance: Invalid argument.') : void 0;
                    if (inst._hostNode) {
                        return inst._hostNode;
                    }
                    var parents = [];
                    while (!inst._hostNode) {
                        parents.push(inst);
                        !inst._hostParent ? invariant(false, 'React DOM tree root should always have a node reference.') : void 0;
                        inst = inst._hostParent;
                    }
                    for (; parents.length; inst = parents.pop()) {
                        precacheChildNodes(inst, inst._hostNode);
                    }
                    return inst._hostNode;
                }
                function getFiberCurrentPropsFromNode(node) {
                    return node[internalEventHandlersKey] || null;
                }
                function updateFiberProps$1(node, props) {
                    node[internalEventHandlersKey] = props;
                }
                var ReactDOMComponentTree = {
                    getClosestInstanceFromNode: getClosestInstanceFromNode,
                    getInstanceFromNode: getInstanceFromNode,
                    getNodeFromInstance: getNodeFromInstance,
                    precacheChildNodes: precacheChildNodes,
                    precacheNode: precacheNode,
                    uncacheNode: uncacheNode,
                    precacheFiberNode: precacheFiberNode$1,
                    getFiberCurrentPropsFromNode: getFiberCurrentPropsFromNode,
                    updateFiberProps: updateFiberProps$1
                };
                var ReactDOMComponentTree_1 = ReactDOMComponentTree;
                var ReactInstanceMap = {
                    remove: function (key) {
                        key._reactInternalFiber = undefined;
                    },
                    get: function (key) {
                        return key._reactInternalFiber;
                    },
                    has: function (key) {
                        return key._reactInternalFiber !== undefined;
                    },
                    set: function (key, value) {
                        key._reactInternalFiber = value;
                    }
                };
                var ReactInstanceMap_1 = ReactInstanceMap;
                var ReactInternals = react.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
                var ReactGlobalSharedState = { ReactCurrentOwner: ReactInternals.ReactCurrentOwner };
                {
                    _assign(ReactGlobalSharedState, {
                        ReactComponentTreeHook: ReactInternals.ReactComponentTreeHook,
                        ReactDebugCurrentFrame: ReactInternals.ReactDebugCurrentFrame
                    });
                }
                var ReactGlobalSharedState_1 = ReactGlobalSharedState;
                function getComponentName(instanceOrFiber) {
                    if (typeof instanceOrFiber.getName === 'function') {
                        var instance = instanceOrFiber;
                        return instance.getName();
                    }
                    if (typeof instanceOrFiber.tag === 'number') {
                        var fiber = instanceOrFiber;
                        var type = fiber.type;
                        if (typeof type === 'string') {
                            return type;
                        }
                        if (typeof type === 'function') {
                            return type.displayName || type.name;
                        }
                    }
                    return null;
                }
                var getComponentName_1 = getComponentName;
                var ReactTypeOfSideEffect = {
                    NoEffect: 0,
                    PerformedWork: 1,
                    Placement: 2,
                    Update: 4,
                    PlacementAndUpdate: 6,
                    Deletion: 8,
                    ContentReset: 16,
                    Callback: 32,
                    Err: 64,
                    Ref: 128
                };
                var ReactCurrentOwner = ReactGlobalSharedState_1.ReactCurrentOwner;
                {
                    var warning$1 = require$$0;
                }
                var ClassComponent = ReactTypeOfWork.ClassComponent;
                var HostComponent$1 = ReactTypeOfWork.HostComponent;
                var HostRoot$1 = ReactTypeOfWork.HostRoot;
                var HostPortal = ReactTypeOfWork.HostPortal;
                var HostText$1 = ReactTypeOfWork.HostText;
                var NoEffect = ReactTypeOfSideEffect.NoEffect;
                var Placement = ReactTypeOfSideEffect.Placement;
                var MOUNTING = 1;
                var MOUNTED = 2;
                var UNMOUNTED = 3;
                function isFiberMountedImpl(fiber) {
                    var node = fiber;
                    if (!fiber.alternate) {
                        if ((node.effectTag & Placement) !== NoEffect) {
                            return MOUNTING;
                        }
                        while (node['return']) {
                            node = node['return'];
                            if ((node.effectTag & Placement) !== NoEffect) {
                                return MOUNTING;
                            }
                        }
                    } else {
                        while (node['return']) {
                            node = node['return'];
                        }
                    }
                    if (node.tag === HostRoot$1) {
                        return MOUNTED;
                    }
                    return UNMOUNTED;
                }
                var isFiberMounted = function (fiber) {
                    return isFiberMountedImpl(fiber) === MOUNTED;
                };
                var isMounted = function (component) {
                    {
                        var owner = ReactCurrentOwner.current;
                        if (owner !== null && owner.tag === ClassComponent) {
                            var ownerFiber = owner;
                            var instance = ownerFiber.stateNode;
                            warning$1(instance._warnedAboutRefsInRender, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentName_1(ownerFiber) || 'A component');
                            instance._warnedAboutRefsInRender = true;
                        }
                    }
                    var fiber = ReactInstanceMap_1.get(component);
                    if (!fiber) {
                        return false;
                    }
                    return isFiberMountedImpl(fiber) === MOUNTED;
                };
                function assertIsMounted(fiber) {
                    !(isFiberMountedImpl(fiber) === MOUNTED) ? invariant(false, 'Unable to find node on an unmounted component.') : void 0;
                }
                function findCurrentFiberUsingSlowPath(fiber) {
                    var alternate = fiber.alternate;
                    if (!alternate) {
                        var state = isFiberMountedImpl(fiber);
                        !(state !== UNMOUNTED) ? invariant(false, 'Unable to find node on an unmounted component.') : void 0;
                        if (state === MOUNTING) {
                            return null;
                        }
                        return fiber;
                    }
                    var a = fiber;
                    var b = alternate;
                    while (true) {
                        var parentA = a['return'];
                        var parentB = parentA ? parentA.alternate : null;
                        if (!parentA || !parentB) {
                            break;
                        }
                        if (parentA.child === parentB.child) {
                            var child = parentA.child;
                            while (child) {
                                if (child === a) {
                                    assertIsMounted(parentA);
                                    return fiber;
                                }
                                if (child === b) {
                                    assertIsMounted(parentA);
                                    return alternate;
                                }
                                child = child.sibling;
                            }
                            invariant(false, 'Unable to find node on an unmounted component.');
                        }
                        if (a['return'] !== b['return']) {
                            a = parentA;
                            b = parentB;
                        } else {
                            var didFindChild = false;
                            var _child = parentA.child;
                            while (_child) {
                                if (_child === a) {
                                    didFindChild = true;
                                    a = parentA;
                                    b = parentB;
                                    break;
                                }
                                if (_child === b) {
                                    didFindChild = true;
                                    b = parentA;
                                    a = parentB;
                                    break;
                                }
                                _child = _child.sibling;
                            }
                            if (!didFindChild) {
                                _child = parentB.child;
                                while (_child) {
                                    if (_child === a) {
                                        didFindChild = true;
                                        a = parentB;
                                        b = parentA;
                                        break;
                                    }
                                    if (_child === b) {
                                        didFindChild = true;
                                        b = parentB;
                                        a = parentA;
                                        break;
                                    }
                                    _child = _child.sibling;
                                }
                                !didFindChild ? invariant(false, 'Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.') : void 0;
                            }
                        }
                        !(a.alternate === b) ? invariant(false, 'Return fibers should always be each others\' alternates. This error is likely caused by a bug in React. Please file an issue.') : void 0;
                    }
                    !(a.tag === HostRoot$1) ? invariant(false, 'Unable to find node on an unmounted component.') : void 0;
                    if (a.stateNode.current === a) {
                        return fiber;
                    }
                    return alternate;
                }
                var findCurrentFiberUsingSlowPath_1 = findCurrentFiberUsingSlowPath;
                var findCurrentHostFiber = function (parent) {
                    var currentParent = findCurrentFiberUsingSlowPath(parent);
                    if (!currentParent) {
                        return null;
                    }
                    var node = currentParent;
                    while (true) {
                        if (node.tag === HostComponent$1 || node.tag === HostText$1) {
                            return node;
                        } else if (node.child) {
                            node.child['return'] = node;
                            node = node.child;
                            continue;
                        }
                        if (node === currentParent) {
                            return null;
                        }
                        while (!node.sibling) {
                            if (!node['return'] || node['return'] === currentParent) {
                                return null;
                            }
                            node = node['return'];
                        }
                        node.sibling['return'] = node['return'];
                        node = node.sibling;
                    }
                    return null;
                };
                var findCurrentHostFiberWithNoPortals = function (parent) {
                    var currentParent = findCurrentFiberUsingSlowPath(parent);
                    if (!currentParent) {
                        return null;
                    }
                    var node = currentParent;
                    while (true) {
                        if (node.tag === HostComponent$1 || node.tag === HostText$1) {
                            return node;
                        } else if (node.child && node.tag !== HostPortal) {
                            node.child['return'] = node;
                            node = node.child;
                            continue;
                        }
                        if (node === currentParent) {
                            return null;
                        }
                        while (!node.sibling) {
                            if (!node['return'] || node['return'] === currentParent) {
                                return null;
                            }
                            node = node['return'];
                        }
                        node.sibling['return'] = node['return'];
                        node = node.sibling;
                    }
                    return null;
                };
                var ReactFiberTreeReflection = {
                    isFiberMounted: isFiberMounted,
                    isMounted: isMounted,
                    findCurrentFiberUsingSlowPath: findCurrentFiberUsingSlowPath_1,
                    findCurrentHostFiber: findCurrentHostFiber,
                    findCurrentHostFiberWithNoPortals: findCurrentHostFiberWithNoPortals
                };
                var ReactErrorUtils = {
                    _caughtError: null,
                    _hasCaughtError: false,
                    _rethrowError: null,
                    _hasRethrowError: false,
                    injection: {
                        injectErrorUtils: function (injectedErrorUtils) {
                            !(typeof injectedErrorUtils.invokeGuardedCallback === 'function') ? invariant(false, 'Injected invokeGuardedCallback() must be a function.') : void 0;
                            invokeGuardedCallback = injectedErrorUtils.invokeGuardedCallback;
                        }
                    },
                    invokeGuardedCallback: function (name, func, context, a, b, c, d, e, f) {
                        invokeGuardedCallback.apply(ReactErrorUtils, arguments);
                    },
                    invokeGuardedCallbackAndCatchFirstError: function (name, func, context, a, b, c, d, e, f) {
                        ReactErrorUtils.invokeGuardedCallback.apply(this, arguments);
                        if (ReactErrorUtils.hasCaughtError()) {
                            var error = ReactErrorUtils.clearCaughtError();
                            if (!ReactErrorUtils._hasRethrowError) {
                                ReactErrorUtils._hasRethrowError = true;
                                ReactErrorUtils._rethrowError = error;
                            }
                        }
                    },
                    rethrowCaughtError: function () {
                        return rethrowCaughtError.apply(ReactErrorUtils, arguments);
                    },
                    hasCaughtError: function () {
                        return ReactErrorUtils._hasCaughtError;
                    },
                    clearCaughtError: function () {
                        if (ReactErrorUtils._hasCaughtError) {
                            var error = ReactErrorUtils._caughtError;
                            ReactErrorUtils._caughtError = null;
                            ReactErrorUtils._hasCaughtError = false;
                            return error;
                        } else {
                            invariant(false, 'clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.');
                        }
                    }
                };
                var invokeGuardedCallback = function (name, func, context, a, b, c, d, e, f) {
                    ReactErrorUtils._hasCaughtError = false;
                    ReactErrorUtils._caughtError = null;
                    var funcArgs = Array.prototype.slice.call(arguments, 3);
                    try {
                        func.apply(context, funcArgs);
                    } catch (error) {
                        ReactErrorUtils._caughtError = error;
                        ReactErrorUtils._hasCaughtError = true;
                    }
                };
                {
                    if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
                        var fakeNode = document.createElement('react');
                        var invokeGuardedCallbackDev = function (name, func, context, a, b, c, d, e, f) {
                            var didError = true;
                            var funcArgs = Array.prototype.slice.call(arguments, 3);
                            function callCallback() {
                                fakeNode.removeEventListener(evtType, callCallback, false);
                                func.apply(context, funcArgs);
                                didError = false;
                            }
                            var error = void 0;
                            var didSetError = false;
                            var isCrossOriginError = false;
                            function onError(event) {
                                error = event.error;
                                didSetError = true;
                                if (error === null && event.colno === 0 && event.lineno === 0) {
                                    isCrossOriginError = true;
                                }
                            }
                            var evtType = 'react-' + (name ? name : 'invokeguardedcallback');
                            window.addEventListener('error', onError);
                            fakeNode.addEventListener(evtType, callCallback, false);
                            var evt = document.createEvent('Event');
                            evt.initEvent(evtType, false, false);
                            fakeNode.dispatchEvent(evt);
                            if (didError) {
                                if (!didSetError) {
                                    error = new Error('An error was thrown inside one of your components, but React ' + 'doesn\'t know what it was. This is likely due to browser ' + 'flakiness. React does its best to preserve the "Pause on ' + 'exceptions" behavior of the DevTools, which requires some ' + 'DEV-mode only tricks. It\'s possible that these don\'t work in ' + 'your browser. Try triggering the error in production mode, ' + 'or switching to a modern browser. If you suspect that this is ' + 'actually an issue with React, please file an issue.');
                                } else if (isCrossOriginError) {
                                    error = new Error('A cross-origin error was thrown. React doesn\'t have access to ' + 'the actual error object in development. ' + 'See https://fb.me/react-crossorigin-error for more information.');
                                }
                                ReactErrorUtils._hasCaughtError = true;
                                ReactErrorUtils._caughtError = error;
                            } else {
                                ReactErrorUtils._hasCaughtError = false;
                                ReactErrorUtils._caughtError = null;
                            }
                            window.removeEventListener('error', onError);
                        };
                        invokeGuardedCallback = invokeGuardedCallbackDev;
                    }
                }
                var rethrowCaughtError = function () {
                    if (ReactErrorUtils._hasRethrowError) {
                        var error = ReactErrorUtils._rethrowError;
                        ReactErrorUtils._rethrowError = null;
                        ReactErrorUtils._hasRethrowError = false;
                        throw error;
                    }
                };
                var ReactErrorUtils_1 = ReactErrorUtils;
                {
                    var warning$2 = require$$0;
                }
                var ComponentTree;
                var injection = {
                    injectComponentTree: function (Injected) {
                        ComponentTree = Injected;
                        {
                            warning$2(Injected && Injected.getNodeFromInstance && Injected.getInstanceFromNode, 'EventPluginUtils.injection.injectComponentTree(...): Injected ' + 'module is missing getNodeFromInstance or getInstanceFromNode.');
                        }
                    }
                };
                function isEndish(topLevelType) {
                    return topLevelType === 'topMouseUp' || topLevelType === 'topTouchEnd' || topLevelType === 'topTouchCancel';
                }
                function isMoveish(topLevelType) {
                    return topLevelType === 'topMouseMove' || topLevelType === 'topTouchMove';
                }
                function isStartish(topLevelType) {
                    return topLevelType === 'topMouseDown' || topLevelType === 'topTouchStart';
                }
                var validateEventDispatches;
                {
                    validateEventDispatches = function (event) {
                        var dispatchListeners = event._dispatchListeners;
                        var dispatchInstances = event._dispatchInstances;
                        var listenersIsArr = Array.isArray(dispatchListeners);
                        var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;
                        var instancesIsArr = Array.isArray(dispatchInstances);
                        var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;
                        warning$2(instancesIsArr === listenersIsArr && instancesLen === listenersLen, 'EventPluginUtils: Invalid `event`.');
                    };
                }
                function executeDispatch(event, simulated, listener, inst) {
                    var type = event.type || 'unknown-event';
                    event.currentTarget = EventPluginUtils.getNodeFromInstance(inst);
                    ReactErrorUtils_1.invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
                    event.currentTarget = null;
                }
                function executeDispatchesInOrder(event, simulated) {
                    var dispatchListeners = event._dispatchListeners;
                    var dispatchInstances = event._dispatchInstances;
                    {
                        validateEventDispatches(event);
                    }
                    if (Array.isArray(dispatchListeners)) {
                        for (var i = 0; i < dispatchListeners.length; i++) {
                            if (event.isPropagationStopped()) {
                                break;
                            }
                            executeDispatch(event, simulated, dispatchListeners[i], dispatchInstances[i]);
                        }
                    } else if (dispatchListeners) {
                        executeDispatch(event, simulated, dispatchListeners, dispatchInstances);
                    }
                    event._dispatchListeners = null;
                    event._dispatchInstances = null;
                }
                function executeDispatchesInOrderStopAtTrueImpl(event) {
                    var dispatchListeners = event._dispatchListeners;
                    var dispatchInstances = event._dispatchInstances;
                    {
                        validateEventDispatches(event);
                    }
                    if (Array.isArray(dispatchListeners)) {
                        for (var i = 0; i < dispatchListeners.length; i++) {
                            if (event.isPropagationStopped()) {
                                break;
                            }
                            if (dispatchListeners[i](event, dispatchInstances[i])) {
                                return dispatchInstances[i];
                            }
                        }
                    } else if (dispatchListeners) {
                        if (dispatchListeners(event, dispatchInstances)) {
                            return dispatchInstances;
                        }
                    }
                    return null;
                }
                function executeDispatchesInOrderStopAtTrue(event) {
                    var ret = executeDispatchesInOrderStopAtTrueImpl(event);
                    event._dispatchInstances = null;
                    event._dispatchListeners = null;
                    return ret;
                }
                function executeDirectDispatch(event) {
                    {
                        validateEventDispatches(event);
                    }
                    var dispatchListener = event._dispatchListeners;
                    var dispatchInstance = event._dispatchInstances;
                    !!Array.isArray(dispatchListener) ? invariant(false, 'executeDirectDispatch(...): Invalid `event`.') : void 0;
                    event.currentTarget = dispatchListener ? EventPluginUtils.getNodeFromInstance(dispatchInstance) : null;
                    var res = dispatchListener ? dispatchListener(event) : null;
                    event.currentTarget = null;
                    event._dispatchListeners = null;
                    event._dispatchInstances = null;
                    return res;
                }
                function hasDispatches(event) {
                    return !!event._dispatchListeners;
                }
                var EventPluginUtils = {
                    isEndish: isEndish,
                    isMoveish: isMoveish,
                    isStartish: isStartish,
                    executeDirectDispatch: executeDirectDispatch,
                    executeDispatchesInOrder: executeDispatchesInOrder,
                    executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
                    hasDispatches: hasDispatches,
                    getFiberCurrentPropsFromNode: function (node) {
                        return ComponentTree.getFiberCurrentPropsFromNode(node);
                    },
                    getInstanceFromNode: function (node) {
                        return ComponentTree.getInstanceFromNode(node);
                    },
                    getNodeFromInstance: function (node) {
                        return ComponentTree.getNodeFromInstance(node);
                    },
                    injection: injection
                };
                var EventPluginUtils_1 = EventPluginUtils;
                var fiberHostComponent = null;
                var ReactControlledComponentInjection = {
                    injectFiberControlledHostComponent: function (hostComponentImpl) {
                        fiberHostComponent = hostComponentImpl;
                    }
                };
                var restoreTarget = null;
                var restoreQueue = null;
                function restoreStateOfTarget(target) {
                    var internalInstance = EventPluginUtils_1.getInstanceFromNode(target);
                    if (!internalInstance) {
                        return;
                    }
                    if (typeof internalInstance.tag === 'number') {
                        !(fiberHostComponent && typeof fiberHostComponent.restoreControlledState === 'function') ? invariant(false, 'Fiber needs to be injected to handle a fiber target for controlled events. This error is likely caused by a bug in React. Please file an issue.') : void 0;
                        var props = EventPluginUtils_1.getFiberCurrentPropsFromNode(internalInstance.stateNode);
                        fiberHostComponent.restoreControlledState(internalInstance.stateNode, internalInstance.type, props);
                        return;
                    }
                    !(typeof internalInstance.restoreControlledState === 'function') ? invariant(false, 'The internal instance must be a React host component. This error is likely caused by a bug in React. Please file an issue.') : void 0;
                    internalInstance.restoreControlledState();
                }
                var ReactControlledComponent = {
                    injection: ReactControlledComponentInjection,
                    enqueueStateRestore: function (target) {
                        if (restoreTarget) {
                            if (restoreQueue) {
                                restoreQueue.push(target);
                            } else {
                                restoreQueue = [target];
                            }
                        } else {
                            restoreTarget = target;
                        }
                    },
                    restoreStateIfNeeded: function () {
                        if (!restoreTarget) {
                            return;
                        }
                        var target = restoreTarget;
                        var queuedTargets = restoreQueue;
                        restoreTarget = null;
                        restoreQueue = null;
                        restoreStateOfTarget(target);
                        if (queuedTargets) {
                            for (var i = 0; i < queuedTargets.length; i++) {
                                restoreStateOfTarget(queuedTargets[i]);
                            }
                        }
                    }
                };
                var ReactControlledComponent_1 = ReactControlledComponent;
                var stackBatchedUpdates = function (fn, a, b, c, d, e) {
                    return fn(a, b, c, d, e);
                };
                var fiberBatchedUpdates = function (fn, bookkeeping) {
                    return fn(bookkeeping);
                };
                function performFiberBatchedUpdates(fn, bookkeeping) {
                    return fiberBatchedUpdates(fn, bookkeeping);
                }
                function batchedUpdates(fn, bookkeeping) {
                    return stackBatchedUpdates(performFiberBatchedUpdates, fn, bookkeeping);
                }
                var isNestingBatched = false;
                function batchedUpdatesWithControlledComponents(fn, bookkeeping) {
                    if (isNestingBatched) {
                        return batchedUpdates(fn, bookkeeping);
                    }
                    isNestingBatched = true;
                    try {
                        return batchedUpdates(fn, bookkeeping);
                    } finally {
                        isNestingBatched = false;
                        ReactControlledComponent_1.restoreStateIfNeeded();
                    }
                }
                var ReactGenericBatchingInjection = {
                    injectStackBatchedUpdates: function (_batchedUpdates) {
                        stackBatchedUpdates = _batchedUpdates;
                    },
                    injectFiberBatchedUpdates: function (_batchedUpdates) {
                        fiberBatchedUpdates = _batchedUpdates;
                    }
                };
                var ReactGenericBatching = {
                    batchedUpdates: batchedUpdatesWithControlledComponents,
                    injection: ReactGenericBatchingInjection
                };
                var ReactGenericBatching_1 = ReactGenericBatching;
                var TEXT_NODE$1 = HTMLNodeType_1.TEXT_NODE;
                function getEventTarget(nativeEvent) {
                    var target = nativeEvent.target || nativeEvent.srcElement || window;
                    if (target.correspondingUseElement) {
                        target = target.correspondingUseElement;
                    }
                    return target.nodeType === TEXT_NODE$1 ? target.parentNode : target;
                }
                var getEventTarget_1 = getEventTarget;
                var HostRoot = ReactTypeOfWork.HostRoot;
                var CALLBACK_BOOKKEEPING_POOL_SIZE = 10;
                var callbackBookkeepingPool = [];
                function findRootContainerNode(inst) {
                    if (typeof inst.tag === 'number') {
                        while (inst['return']) {
                            inst = inst['return'];
                        }
                        if (inst.tag !== HostRoot) {
                            return null;
                        }
                        return inst.stateNode.containerInfo;
                    } else {
                        while (inst._hostParent) {
                            inst = inst._hostParent;
                        }
                        var rootNode = ReactDOMComponentTree_1.getNodeFromInstance(inst);
                        return rootNode.parentNode;
                    }
                }
                function getTopLevelCallbackBookKeeping(topLevelType, nativeEvent, targetInst) {
                    if (callbackBookkeepingPool.length) {
                        var instance = callbackBookkeepingPool.pop();
                        instance.topLevelType = topLevelType;
                        instance.nativeEvent = nativeEvent;
                        instance.targetInst = targetInst;
                        return instance;
                    }
                    return {
                        topLevelType: topLevelType,
                        nativeEvent: nativeEvent,
                        targetInst: targetInst,
                        ancestors: []
                    };
                }
                function releaseTopLevelCallbackBookKeeping(instance) {
                    instance.topLevelType = null;
                    instance.nativeEvent = null;
                    instance.targetInst = null;
                    instance.ancestors.length = 0;
                    if (callbackBookkeepingPool.length < CALLBACK_BOOKKEEPING_POOL_SIZE) {
                        callbackBookkeepingPool.push(instance);
                    }
                }
                function handleTopLevelImpl(bookKeeping) {
                    var targetInst = bookKeeping.targetInst;
                    var ancestor = targetInst;
                    do {
                        if (!ancestor) {
                            bookKeeping.ancestors.push(ancestor);
                            break;
                        }
                        var root = findRootContainerNode(ancestor);
                        if (!root) {
                            break;
                        }
                        bookKeeping.ancestors.push(ancestor);
                        ancestor = ReactDOMComponentTree_1.getClosestInstanceFromNode(root);
                    } while (ancestor);
                    for (var i = 0; i < bookKeeping.ancestors.length; i++) {
                        targetInst = bookKeeping.ancestors[i];
                        ReactDOMEventListener._handleTopLevel(bookKeeping.topLevelType, targetInst, bookKeeping.nativeEvent, getEventTarget_1(bookKeeping.nativeEvent));
                    }
                }
                var ReactDOMEventListener = {
                    _enabled: true,
                    _handleTopLevel: null,
                    setHandleTopLevel: function (handleTopLevel) {
                        ReactDOMEventListener._handleTopLevel = handleTopLevel;
                    },
                    setEnabled: function (enabled) {
                        ReactDOMEventListener._enabled = !!enabled;
                    },
                    isEnabled: function () {
                        return ReactDOMEventListener._enabled;
                    },
                    trapBubbledEvent: function (topLevelType, handlerBaseName, element) {
                        if (!element) {
                            return null;
                        }
                        return EventListener.listen(element, handlerBaseName, ReactDOMEventListener.dispatchEvent.bind(null, topLevelType));
                    },
                    trapCapturedEvent: function (topLevelType, handlerBaseName, element) {
                        if (!element) {
                            return null;
                        }
                        return EventListener.capture(element, handlerBaseName, ReactDOMEventListener.dispatchEvent.bind(null, topLevelType));
                    },
                    dispatchEvent: function (topLevelType, nativeEvent) {
                        if (!ReactDOMEventListener._enabled) {
                            return;
                        }
                        var nativeEventTarget = getEventTarget_1(nativeEvent);
                        var targetInst = ReactDOMComponentTree_1.getClosestInstanceFromNode(nativeEventTarget);
                        if (targetInst !== null && typeof targetInst.tag === 'number' && !ReactFiberTreeReflection.isFiberMounted(targetInst)) {
                            targetInst = null;
                        }
                        var bookKeeping = getTopLevelCallbackBookKeeping(topLevelType, nativeEvent, targetInst);
                        try {
                            ReactGenericBatching_1.batchedUpdates(handleTopLevelImpl, bookKeeping);
                        } finally {
                            releaseTopLevelCallbackBookKeeping(bookKeeping);
                        }
                    }
                };
                var ReactDOMEventListener_1 = ReactDOMEventListener;
                function accumulateInto(current, next) {
                    !(next != null) ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : void 0;
                    if (current == null) {
                        return next;
                    }
                    if (Array.isArray(current)) {
                        if (Array.isArray(next)) {
                            current.push.apply(current, next);
                            return current;
                        }
                        current.push(next);
                        return current;
                    }
                    if (Array.isArray(next)) {
                        return [current].concat(next);
                    }
                    return [
                        current,
                        next
                    ];
                }
                var accumulateInto_1 = accumulateInto;
                function forEachAccumulated(arr, cb, scope) {
                    if (Array.isArray(arr)) {
                        arr.forEach(cb, scope);
                    } else if (arr) {
                        cb.call(scope, arr);
                    }
                }
                var forEachAccumulated_1 = forEachAccumulated;
                var eventQueue = null;
                var executeDispatchesAndRelease = function (event, simulated) {
                    if (event) {
                        EventPluginUtils_1.executeDispatchesInOrder(event, simulated);
                        if (!event.isPersistent()) {
                            event.constructor.release(event);
                        }
                    }
                };
                var executeDispatchesAndReleaseSimulated = function (e) {
                    return executeDispatchesAndRelease(e, true);
                };
                var executeDispatchesAndReleaseTopLevel = function (e) {
                    return executeDispatchesAndRelease(e, false);
                };
                function isInteractive(tag) {
                    return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
                }
                function shouldPreventMouseEvent(name, type, props) {
                    switch (name) {
                    case 'onClick':
                    case 'onClickCapture':
                    case 'onDoubleClick':
                    case 'onDoubleClickCapture':
                    case 'onMouseDown':
                    case 'onMouseDownCapture':
                    case 'onMouseMove':
                    case 'onMouseMoveCapture':
                    case 'onMouseUp':
                    case 'onMouseUpCapture':
                        return !!(props.disabled && isInteractive(type));
                    default:
                        return false;
                    }
                }
                var EventPluginHub = {
                    injection: {
                        injectEventPluginOrder: EventPluginRegistry_1.injectEventPluginOrder,
                        injectEventPluginsByName: EventPluginRegistry_1.injectEventPluginsByName
                    },
                    getListener: function (inst, registrationName) {
                        var listener;
                        if (typeof inst.tag === 'number') {
                            var stateNode = inst.stateNode;
                            if (!stateNode) {
                                return null;
                            }
                            var props = EventPluginUtils_1.getFiberCurrentPropsFromNode(stateNode);
                            if (!props) {
                                return null;
                            }
                            listener = props[registrationName];
                            if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
                                return null;
                            }
                        } else {
                            var currentElement = inst._currentElement;
                            if (typeof currentElement === 'string' || typeof currentElement === 'number') {
                                return null;
                            }
                            if (!inst._rootNodeID) {
                                return null;
                            }
                            var _props = currentElement.props;
                            listener = _props[registrationName];
                            if (shouldPreventMouseEvent(registrationName, currentElement.type, _props)) {
                                return null;
                            }
                        }
                        !(!listener || typeof listener === 'function') ? invariant(false, 'Expected `%s` listener to be a function, instead got a value of `%s` type.', registrationName, typeof listener) : void 0;
                        return listener;
                    },
                    extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
                        var events;
                        var plugins = EventPluginRegistry_1.plugins;
                        for (var i = 0; i < plugins.length; i++) {
                            var possiblePlugin = plugins[i];
                            if (possiblePlugin) {
                                var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
                                if (extractedEvents) {
                                    events = accumulateInto_1(events, extractedEvents);
                                }
                            }
                        }
                        return events;
                    },
                    enqueueEvents: function (events) {
                        if (events) {
                            eventQueue = accumulateInto_1(eventQueue, events);
                        }
                    },
                    processEventQueue: function (simulated) {
                        var processingEventQueue = eventQueue;
                        eventQueue = null;
                        if (simulated) {
                            forEachAccumulated_1(processingEventQueue, executeDispatchesAndReleaseSimulated);
                        } else {
                            forEachAccumulated_1(processingEventQueue, executeDispatchesAndReleaseTopLevel);
                        }
                        !!eventQueue ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.') : void 0;
                        ReactErrorUtils_1.rethrowCaughtError();
                    }
                };
                var EventPluginHub_1 = EventPluginHub;
                function runEventQueueInBatch(events) {
                    EventPluginHub_1.enqueueEvents(events);
                    EventPluginHub_1.processEventQueue(false);
                }
                var ReactEventEmitterMixin = {
                    handleTopLevel: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
                        var events = EventPluginHub_1.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
                        runEventQueueInBatch(events);
                    }
                };
                var ReactEventEmitterMixin_1 = ReactEventEmitterMixin;
                var useHasFeature;
                if (ExecutionEnvironment.canUseDOM) {
                    useHasFeature = document.implementation && document.implementation.hasFeature && document.implementation.hasFeature('', '') !== true;
                }
                function isEventSupported(eventNameSuffix, capture) {
                    if (!ExecutionEnvironment.canUseDOM || capture && !('addEventListener' in document)) {
                        return false;
                    }
                    var eventName = 'on' + eventNameSuffix;
                    var isSupported = eventName in document;
                    if (!isSupported) {
                        var element = document.createElement('div');
                        element.setAttribute(eventName, 'return;');
                        isSupported = typeof element[eventName] === 'function';
                    }
                    if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
                        isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
                    }
                    return isSupported;
                }
                var isEventSupported_1 = isEventSupported;
                function makePrefixMap(styleProp, eventName) {
                    var prefixes = {};
                    prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
                    prefixes['Webkit' + styleProp] = 'webkit' + eventName;
                    prefixes['Moz' + styleProp] = 'moz' + eventName;
                    prefixes['ms' + styleProp] = 'MS' + eventName;
                    prefixes['O' + styleProp] = 'o' + eventName.toLowerCase();
                    return prefixes;
                }
                var vendorPrefixes = {
                    animationend: makePrefixMap('Animation', 'AnimationEnd'),
                    animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
                    animationstart: makePrefixMap('Animation', 'AnimationStart'),
                    transitionend: makePrefixMap('Transition', 'TransitionEnd')
                };
                var prefixedEventNames = {};
                var style = {};
                if (ExecutionEnvironment.canUseDOM) {
                    style = document.createElement('div').style;
                    if (!('AnimationEvent' in window)) {
                        delete vendorPrefixes.animationend.animation;
                        delete vendorPrefixes.animationiteration.animation;
                        delete vendorPrefixes.animationstart.animation;
                    }
                    if (!('TransitionEvent' in window)) {
                        delete vendorPrefixes.transitionend.transition;
                    }
                }
                function getVendorPrefixedEventName(eventName) {
                    if (prefixedEventNames[eventName]) {
                        return prefixedEventNames[eventName];
                    } else if (!vendorPrefixes[eventName]) {
                        return eventName;
                    }
                    var prefixMap = vendorPrefixes[eventName];
                    for (var styleProp in prefixMap) {
                        if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
                            return prefixedEventNames[eventName] = prefixMap[styleProp];
                        }
                    }
                    return '';
                }
                var getVendorPrefixedEventName_1 = getVendorPrefixedEventName;
                var topLevelTypes$1 = {
                    topAbort: 'abort',
                    topAnimationEnd: getVendorPrefixedEventName_1('animationend') || 'animationend',
                    topAnimationIteration: getVendorPrefixedEventName_1('animationiteration') || 'animationiteration',
                    topAnimationStart: getVendorPrefixedEventName_1('animationstart') || 'animationstart',
                    topBlur: 'blur',
                    topCancel: 'cancel',
                    topCanPlay: 'canplay',
                    topCanPlayThrough: 'canplaythrough',
                    topChange: 'change',
                    topClick: 'click',
                    topClose: 'close',
                    topCompositionEnd: 'compositionend',
                    topCompositionStart: 'compositionstart',
                    topCompositionUpdate: 'compositionupdate',
                    topContextMenu: 'contextmenu',
                    topCopy: 'copy',
                    topCut: 'cut',
                    topDoubleClick: 'dblclick',
                    topDrag: 'drag',
                    topDragEnd: 'dragend',
                    topDragEnter: 'dragenter',
                    topDragExit: 'dragexit',
                    topDragLeave: 'dragleave',
                    topDragOver: 'dragover',
                    topDragStart: 'dragstart',
                    topDrop: 'drop',
                    topDurationChange: 'durationchange',
                    topEmptied: 'emptied',
                    topEncrypted: 'encrypted',
                    topEnded: 'ended',
                    topError: 'error',
                    topFocus: 'focus',
                    topInput: 'input',
                    topKeyDown: 'keydown',
                    topKeyPress: 'keypress',
                    topKeyUp: 'keyup',
                    topLoadedData: 'loadeddata',
                    topLoad: 'load',
                    topLoadedMetadata: 'loadedmetadata',
                    topLoadStart: 'loadstart',
                    topMouseDown: 'mousedown',
                    topMouseMove: 'mousemove',
                    topMouseOut: 'mouseout',
                    topMouseOver: 'mouseover',
                    topMouseUp: 'mouseup',
                    topPaste: 'paste',
                    topPause: 'pause',
                    topPlay: 'play',
                    topPlaying: 'playing',
                    topProgress: 'progress',
                    topRateChange: 'ratechange',
                    topScroll: 'scroll',
                    topSeeked: 'seeked',
                    topSeeking: 'seeking',
                    topSelectionChange: 'selectionchange',
                    topStalled: 'stalled',
                    topSuspend: 'suspend',
                    topTextInput: 'textInput',
                    topTimeUpdate: 'timeupdate',
                    topToggle: 'toggle',
                    topTouchCancel: 'touchcancel',
                    topTouchEnd: 'touchend',
                    topTouchMove: 'touchmove',
                    topTouchStart: 'touchstart',
                    topTransitionEnd: getVendorPrefixedEventName_1('transitionend') || 'transitionend',
                    topVolumeChange: 'volumechange',
                    topWaiting: 'waiting',
                    topWheel: 'wheel'
                };
                var BrowserEventConstants = { topLevelTypes: topLevelTypes$1 };
                var BrowserEventConstants_1 = BrowserEventConstants;
                var topLevelTypes = BrowserEventConstants_1.topLevelTypes;
                var alreadyListeningTo = {};
                var reactTopListenersCounter = 0;
                var topListenersIDKey = '_reactListenersID' + ('' + Math.random()).slice(2);
                function getListeningForDocument(mountAt) {
                    if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
                        mountAt[topListenersIDKey] = reactTopListenersCounter++;
                        alreadyListeningTo[mountAt[topListenersIDKey]] = {};
                    }
                    return alreadyListeningTo[mountAt[topListenersIDKey]];
                }
                var ReactBrowserEventEmitter = _assign({}, ReactEventEmitterMixin_1, {
                    setEnabled: function (enabled) {
                        if (ReactDOMEventListener_1) {
                            ReactDOMEventListener_1.setEnabled(enabled);
                        }
                    },
                    isEnabled: function () {
                        return !!(ReactDOMEventListener_1 && ReactDOMEventListener_1.isEnabled());
                    },
                    listenTo: function (registrationName, contentDocumentHandle) {
                        var mountAt = contentDocumentHandle;
                        var isListening = getListeningForDocument(mountAt);
                        var dependencies = EventPluginRegistry_1.registrationNameDependencies[registrationName];
                        for (var i = 0; i < dependencies.length; i++) {
                            var dependency = dependencies[i];
                            if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
                                if (dependency === 'topWheel') {
                                    if (isEventSupported_1('wheel')) {
                                        ReactDOMEventListener_1.trapBubbledEvent('topWheel', 'wheel', mountAt);
                                    } else if (isEventSupported_1('mousewheel')) {
                                        ReactDOMEventListener_1.trapBubbledEvent('topWheel', 'mousewheel', mountAt);
                                    } else {
                                        ReactDOMEventListener_1.trapBubbledEvent('topWheel', 'DOMMouseScroll', mountAt);
                                    }
                                } else if (dependency === 'topScroll') {
                                    ReactDOMEventListener_1.trapCapturedEvent('topScroll', 'scroll', mountAt);
                                } else if (dependency === 'topFocus' || dependency === 'topBlur') {
                                    ReactDOMEventListener_1.trapCapturedEvent('topFocus', 'focus', mountAt);
                                    ReactDOMEventListener_1.trapCapturedEvent('topBlur', 'blur', mountAt);
                                    isListening.topBlur = true;
                                    isListening.topFocus = true;
                                } else if (dependency === 'topCancel') {
                                    if (isEventSupported_1('cancel', true)) {
                                        ReactDOMEventListener_1.trapCapturedEvent('topCancel', 'cancel', mountAt);
                                    }
                                    isListening.topCancel = true;
                                } else if (dependency === 'topClose') {
                                    if (isEventSupported_1('close', true)) {
                                        ReactDOMEventListener_1.trapCapturedEvent('topClose', 'close', mountAt);
                                    }
                                    isListening.topClose = true;
                                } else if (topLevelTypes.hasOwnProperty(dependency)) {
                                    ReactDOMEventListener_1.trapBubbledEvent(dependency, topLevelTypes[dependency], mountAt);
                                }
                                isListening[dependency] = true;
                            }
                        }
                    },
                    isListeningToAllDependencies: function (registrationName, mountAt) {
                        var isListening = getListeningForDocument(mountAt);
                        var dependencies = EventPluginRegistry_1.registrationNameDependencies[registrationName];
                        for (var i = 0; i < dependencies.length; i++) {
                            var dependency = dependencies[i];
                            if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
                                return false;
                            }
                        }
                        return true;
                    },
                    trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
                        return ReactDOMEventListener_1.trapBubbledEvent(topLevelType, handlerBaseName, handle);
                    },
                    trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
                        return ReactDOMEventListener_1.trapCapturedEvent(topLevelType, handlerBaseName, handle);
                    }
                });
                var ReactBrowserEventEmitter_1 = ReactBrowserEventEmitter;
                var ReactDOMFeatureFlags = {
                    fiberAsyncScheduling: false,
                    useFiber: true
                };
                var ReactDOMFeatureFlags_1 = ReactDOMFeatureFlags;
                var isUnitlessNumber = {
                    animationIterationCount: true,
                    borderImageOutset: true,
                    borderImageSlice: true,
                    borderImageWidth: true,
                    boxFlex: true,
                    boxFlexGroup: true,
                    boxOrdinalGroup: true,
                    columnCount: true,
                    columns: true,
                    flex: true,
                    flexGrow: true,
                    flexPositive: true,
                    flexShrink: true,
                    flexNegative: true,
                    flexOrder: true,
                    gridRow: true,
                    gridRowEnd: true,
                    gridRowSpan: true,
                    gridRowStart: true,
                    gridColumn: true,
                    gridColumnEnd: true,
                    gridColumnSpan: true,
                    gridColumnStart: true,
                    fontWeight: true,
                    lineClamp: true,
                    lineHeight: true,
                    opacity: true,
                    order: true,
                    orphans: true,
                    tabSize: true,
                    widows: true,
                    zIndex: true,
                    zoom: true,
                    fillOpacity: true,
                    floodOpacity: true,
                    stopOpacity: true,
                    strokeDasharray: true,
                    strokeDashoffset: true,
                    strokeMiterlimit: true,
                    strokeOpacity: true,
                    strokeWidth: true
                };
                function prefixKey(prefix, key) {
                    return prefix + key.charAt(0).toUpperCase() + key.substring(1);
                }
                var prefixes = [
                    'Webkit',
                    'ms',
                    'Moz',
                    'O'
                ];
                Object.keys(isUnitlessNumber).forEach(function (prop) {
                    prefixes.forEach(function (prefix) {
                        isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
                    });
                });
                var shorthandPropertyExpansions = {
                    background: {
                        backgroundAttachment: true,
                        backgroundColor: true,
                        backgroundImage: true,
                        backgroundPositionX: true,
                        backgroundPositionY: true,
                        backgroundRepeat: true
                    },
                    backgroundPosition: {
                        backgroundPositionX: true,
                        backgroundPositionY: true
                    },
                    border: {
                        borderWidth: true,
                        borderStyle: true,
                        borderColor: true
                    },
                    borderBottom: {
                        borderBottomWidth: true,
                        borderBottomStyle: true,
                        borderBottomColor: true
                    },
                    borderLeft: {
                        borderLeftWidth: true,
                        borderLeftStyle: true,
                        borderLeftColor: true
                    },
                    borderRight: {
                        borderRightWidth: true,
                        borderRightStyle: true,
                        borderRightColor: true
                    },
                    borderTop: {
                        borderTopWidth: true,
                        borderTopStyle: true,
                        borderTopColor: true
                    },
                    font: {
                        fontStyle: true,
                        fontVariant: true,
                        fontWeight: true,
                        fontSize: true,
                        lineHeight: true,
                        fontFamily: true
                    },
                    outline: {
                        outlineWidth: true,
                        outlineStyle: true,
                        outlineColor: true
                    }
                };
                var CSSProperty = {
                    isUnitlessNumber: isUnitlessNumber,
                    shorthandPropertyExpansions: shorthandPropertyExpansions
                };
                var CSSProperty_1 = CSSProperty;
                var isUnitlessNumber$1 = CSSProperty_1.isUnitlessNumber;
                function dangerousStyleValue(name, value, isCustomProperty) {
                    var isEmpty = value == null || typeof value === 'boolean' || value === '';
                    if (isEmpty) {
                        return '';
                    }
                    if (!isCustomProperty && typeof value === 'number' && value !== 0 && !(isUnitlessNumber$1.hasOwnProperty(name) && isUnitlessNumber$1[name])) {
                        return value + 'px';
                    }
                    return ('' + value).trim();
                }
                var dangerousStyleValue_1 = dangerousStyleValue;
                var describeComponentFrame = function (name, source, ownerName) {
                    return '\n    in ' + (name || 'Unknown') + (source ? ' (at ' + source.fileName.replace(/^.*[\\\/]/, '') + ':' + source.lineNumber + ')' : ownerName ? ' (created by ' + ownerName + ')' : '');
                };
                var IndeterminateComponent = ReactTypeOfWork.IndeterminateComponent;
                var FunctionalComponent = ReactTypeOfWork.FunctionalComponent;
                var ClassComponent$1 = ReactTypeOfWork.ClassComponent;
                var HostComponent$2 = ReactTypeOfWork.HostComponent;
                function describeFiber(fiber) {
                    switch (fiber.tag) {
                    case IndeterminateComponent:
                    case FunctionalComponent:
                    case ClassComponent$1:
                    case HostComponent$2:
                        var owner = fiber._debugOwner;
                        var source = fiber._debugSource;
                        var name = getComponentName_1(fiber);
                        var ownerName = null;
                        if (owner) {
                            ownerName = getComponentName_1(owner);
                        }
                        return describeComponentFrame(name, source, ownerName);
                    default:
                        return '';
                    }
                }
                function getStackAddendumByWorkInProgressFiber$1(workInProgress) {
                    var info = '';
                    var node = workInProgress;
                    do {
                        info += describeFiber(node);
                        node = node['return'];
                    } while (node);
                    return info;
                }
                var ReactFiberComponentTreeHook = { getStackAddendumByWorkInProgressFiber: getStackAddendumByWorkInProgressFiber$1 };
                var ReactDebugCurrentFrame = ReactGlobalSharedState_1.ReactDebugCurrentFrame;
                {
                    var getComponentName$3 = getComponentName_1;
                    var _require2$2 = ReactFiberComponentTreeHook, getStackAddendumByWorkInProgressFiber = _require2$2.getStackAddendumByWorkInProgressFiber;
                }
                function getCurrentFiberOwnerName$2() {
                    {
                        var fiber = ReactDebugCurrentFiber.current;
                        if (fiber === null) {
                            return null;
                        }
                        if (fiber._debugOwner != null) {
                            return getComponentName$3(fiber._debugOwner);
                        }
                    }
                    return null;
                }
                function getCurrentFiberStackAddendum$1() {
                    {
                        var fiber = ReactDebugCurrentFiber.current;
                        if (fiber === null) {
                            return null;
                        }
                        return getStackAddendumByWorkInProgressFiber(fiber);
                    }
                    return null;
                }
                function resetCurrentFiber() {
                    ReactDebugCurrentFrame.getCurrentStack = null;
                    ReactDebugCurrentFiber.current = null;
                    ReactDebugCurrentFiber.phase = null;
                }
                function setCurrentFiber(fiber, phase) {
                    ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackAddendum$1;
                    ReactDebugCurrentFiber.current = fiber;
                    ReactDebugCurrentFiber.phase = phase;
                }
                var ReactDebugCurrentFiber = {
                    current: null,
                    phase: null,
                    resetCurrentFiber: resetCurrentFiber,
                    setCurrentFiber: setCurrentFiber,
                    getCurrentFiberOwnerName: getCurrentFiberOwnerName$2,
                    getCurrentFiberStackAddendum: getCurrentFiberStackAddendum$1
                };
                var ReactDebugCurrentFiber_1 = ReactDebugCurrentFiber;
                var warnValidStyle$1 = emptyFunction;
                {
                    var camelizeStyleName$1 = camelizeStyleName;
                    var getComponentName$2 = getComponentName_1;
                    var warning$4 = require$$0;
                    var _require$3 = ReactDebugCurrentFiber_1, getCurrentFiberOwnerName$1 = _require$3.getCurrentFiberOwnerName;
                    var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
                    var badStyleValueWithSemicolonPattern = /;\s*$/;
                    var warnedStyleNames = {};
                    var warnedStyleValues = {};
                    var warnedForNaNValue = false;
                    var warnedForInfinityValue = false;
                    var warnHyphenatedStyleName = function (name, owner) {
                        if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                            return;
                        }
                        warnedStyleNames[name] = true;
                        warning$4(false, 'Unsupported style property %s. Did you mean %s?%s', name, camelizeStyleName$1(name), checkRenderMessage(owner));
                    };
                    var warnBadVendoredStyleName = function (name, owner) {
                        if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                            return;
                        }
                        warnedStyleNames[name] = true;
                        warning$4(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?%s', name, name.charAt(0).toUpperCase() + name.slice(1), checkRenderMessage(owner));
                    };
                    var warnStyleValueWithSemicolon = function (name, value, owner) {
                        if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
                            return;
                        }
                        warnedStyleValues[value] = true;
                        warning$4(false, 'Style property values shouldn\'t contain a semicolon.%s ' + 'Try "%s: %s" instead.', checkRenderMessage(owner), name, value.replace(badStyleValueWithSemicolonPattern, ''));
                    };
                    var warnStyleValueIsNaN = function (name, value, owner) {
                        if (warnedForNaNValue) {
                            return;
                        }
                        warnedForNaNValue = true;
                        warning$4(false, '`NaN` is an invalid value for the `%s` css style property.%s', name, checkRenderMessage(owner));
                    };
                    var warnStyleValueIsInfinity = function (name, value, owner) {
                        if (warnedForInfinityValue) {
                            return;
                        }
                        warnedForInfinityValue = true;
                        warning$4(false, '`Infinity` is an invalid value for the `%s` css style property.%s', name, checkRenderMessage(owner));
                    };
                    var checkRenderMessage = function (owner) {
                        var ownerName;
                        if (owner != null) {
                            ownerName = getComponentName$2(owner);
                        } else {
                            ownerName = getCurrentFiberOwnerName$1();
                        }
                        if (ownerName) {
                            return '\n\nCheck the render method of `' + ownerName + '`.';
                        }
                        return '';
                    };
                    warnValidStyle$1 = function (name, value, component) {
                        var owner;
                        if (component) {
                            owner = component._currentElement._owner;
                        }
                        if (name.indexOf('-') > -1) {
                            warnHyphenatedStyleName(name, owner);
                        } else if (badVendoredStyleNamePattern.test(name)) {
                            warnBadVendoredStyleName(name, owner);
                        } else if (badStyleValueWithSemicolonPattern.test(value)) {
                            warnStyleValueWithSemicolon(name, value, owner);
                        }
                        if (typeof value === 'number') {
                            if (isNaN(value)) {
                                warnStyleValueIsNaN(name, value, owner);
                            } else if (!isFinite(value)) {
                                warnStyleValueIsInfinity(name, value, owner);
                            }
                        }
                    };
                }
                var warnValidStyle_1 = warnValidStyle$1;
                {
                    var hyphenateStyleName$1 = hyphenateStyleName;
                    var warnValidStyle = warnValidStyle_1;
                }
                var hasShorthandPropertyBug = false;
                if (ExecutionEnvironment.canUseDOM) {
                    var tempStyle = document.createElement('div').style;
                    try {
                        tempStyle.font = '';
                    } catch (e) {
                        hasShorthandPropertyBug = true;
                    }
                }
                var CSSPropertyOperations = {
                    createDangerousStringForStyles: function (styles) {
                        {
                            var serialized = '';
                            var delimiter = '';
                            for (var styleName in styles) {
                                if (!styles.hasOwnProperty(styleName)) {
                                    continue;
                                }
                                var styleValue = styles[styleName];
                                if (styleValue != null) {
                                    var isCustomProperty = styleName.indexOf('--') === 0;
                                    serialized += delimiter + hyphenateStyleName$1(styleName) + ':';
                                    serialized += dangerousStyleValue_1(styleName, styleValue, isCustomProperty);
                                    delimiter = ';';
                                }
                            }
                            return serialized || null;
                        }
                    },
                    setValueForStyles: function (node, styles, component) {
                        var style = node.style;
                        for (var styleName in styles) {
                            if (!styles.hasOwnProperty(styleName)) {
                                continue;
                            }
                            var isCustomProperty = styleName.indexOf('--') === 0;
                            {
                                if (!isCustomProperty) {
                                    warnValidStyle(styleName, styles[styleName], component);
                                }
                            }
                            var styleValue = dangerousStyleValue_1(styleName, styles[styleName], isCustomProperty);
                            if (styleName === 'float') {
                                styleName = 'cssFloat';
                            }
                            if (isCustomProperty) {
                                style.setProperty(styleName, styleValue);
                            } else if (styleValue) {
                                style[styleName] = styleValue;
                            } else {
                                var expansion = hasShorthandPropertyBug && CSSProperty_1.shorthandPropertyExpansions[styleName];
                                if (expansion) {
                                    for (var individualStyleName in expansion) {
                                        style[individualStyleName] = '';
                                    }
                                } else {
                                    style[styleName] = '';
                                }
                            }
                        }
                    }
                };
                var CSSPropertyOperations_1 = CSSPropertyOperations;
                var ReactInvalidSetStateWarningHook = {};
                {
                    var warning$7 = require$$0;
                    var processingChildContext = false;
                    var warnInvalidSetState = function () {
                        warning$7(!processingChildContext, 'setState(...): Cannot call setState() inside getChildContext()');
                    };
                    ReactInvalidSetStateWarningHook = {
                        onBeginProcessingChildContext: function () {
                            processingChildContext = true;
                        },
                        onEndProcessingChildContext: function () {
                            processingChildContext = false;
                        },
                        onSetState: function () {
                            warnInvalidSetState();
                        }
                    };
                }
                var ReactInvalidSetStateWarningHook_1 = ReactInvalidSetStateWarningHook;
                var ReactHostOperationHistoryHook = null;
                {
                    var history = [];
                    ReactHostOperationHistoryHook = {
                        onHostOperation: function (operation) {
                            history.push(operation);
                        },
                        clearHistory: function () {
                            if (ReactHostOperationHistoryHook._preventClearing) {
                                return;
                            }
                            history = [];
                        },
                        getHistory: function () {
                            return history;
                        }
                    };
                }
                var ReactHostOperationHistoryHook_1 = ReactHostOperationHistoryHook;
                var ReactComponentTreeHook = ReactGlobalSharedState_1.ReactComponentTreeHook;
                {
                    var warning$6 = require$$0;
                }
                var ReactDebugTool$1 = null;
                {
                    var hooks = [];
                    var didHookThrowForEvent = {};
                    var callHook = function (event, fn, context, arg1, arg2, arg3, arg4, arg5) {
                        try {
                            fn.call(context, arg1, arg2, arg3, arg4, arg5);
                        } catch (e) {
                            warning$6(didHookThrowForEvent[event], 'Exception thrown by hook while handling %s: %s', event, e + '\n' + e.stack);
                            didHookThrowForEvent[event] = true;
                        }
                    };
                    var emitEvent = function (event, arg1, arg2, arg3, arg4, arg5) {
                        for (var i = 0; i < hooks.length; i++) {
                            var hook = hooks[i];
                            var fn = hook[event];
                            if (fn) {
                                callHook(event, fn, hook, arg1, arg2, arg3, arg4, arg5);
                            }
                        }
                    };
                    var isProfiling = false;
                    var flushHistory = [];
                    var lifeCycleTimerStack = [];
                    var currentFlushNesting = 0;
                    var currentFlushMeasurements = [];
                    var currentFlushStartTime = 0;
                    var currentTimerDebugID = null;
                    var currentTimerStartTime = 0;
                    var currentTimerNestedFlushDuration = 0;
                    var currentTimerType = null;
                    var lifeCycleTimerHasWarned = false;
                    var clearHistory = function () {
                        ReactComponentTreeHook.purgeUnmountedComponents();
                        ReactHostOperationHistoryHook_1.clearHistory();
                    };
                    var getTreeSnapshot = function (registeredIDs) {
                        return registeredIDs.reduce(function (tree, id) {
                            var ownerID = ReactComponentTreeHook.getOwnerID(id);
                            var parentID = ReactComponentTreeHook.getParentID(id);
                            tree[id] = {
                                displayName: ReactComponentTreeHook.getDisplayName(id),
                                text: ReactComponentTreeHook.getText(id),
                                updateCount: ReactComponentTreeHook.getUpdateCount(id),
                                childIDs: ReactComponentTreeHook.getChildIDs(id),
                                ownerID: ownerID || parentID && ReactComponentTreeHook.getOwnerID(parentID) || 0,
                                parentID: parentID
                            };
                            return tree;
                        }, {});
                    };
                    var resetMeasurements = function () {
                        var previousStartTime = currentFlushStartTime;
                        var previousMeasurements = currentFlushMeasurements;
                        var previousOperations = ReactHostOperationHistoryHook_1.getHistory();
                        if (currentFlushNesting === 0) {
                            currentFlushStartTime = 0;
                            currentFlushMeasurements = [];
                            clearHistory();
                            return;
                        }
                        if (previousMeasurements.length || previousOperations.length) {
                            var registeredIDs = ReactComponentTreeHook.getRegisteredIDs();
                            flushHistory.push({
                                duration: performanceNow() - previousStartTime,
                                measurements: previousMeasurements || [],
                                operations: previousOperations || [],
                                treeSnapshot: getTreeSnapshot(registeredIDs)
                            });
                        }
                        clearHistory();
                        currentFlushStartTime = performanceNow();
                        currentFlushMeasurements = [];
                    };
                    var checkDebugID = function (debugID) {
                        var allowRoot = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
                        if (allowRoot && debugID === 0) {
                            return;
                        }
                        if (!debugID) {
                            warning$6(false, 'ReactDebugTool: debugID may not be empty.');
                        }
                    };
                    var beginLifeCycleTimer = function (debugID, timerType) {
                        if (currentFlushNesting === 0) {
                            return;
                        }
                        if (currentTimerType && !lifeCycleTimerHasWarned) {
                            warning$6(false, 'There is an internal error in the React performance measurement code.' + '\n\nDid not expect %s timer to start while %s timer is still in ' + 'progress for %s instance.', timerType, currentTimerType || 'no', debugID === currentTimerDebugID ? 'the same' : 'another');
                            lifeCycleTimerHasWarned = true;
                        }
                        currentTimerStartTime = performanceNow();
                        currentTimerNestedFlushDuration = 0;
                        currentTimerDebugID = debugID;
                        currentTimerType = timerType;
                    };
                    var endLifeCycleTimer = function (debugID, timerType) {
                        if (currentFlushNesting === 0) {
                            return;
                        }
                        if (currentTimerType !== timerType && !lifeCycleTimerHasWarned) {
                            warning$6(false, 'There is an internal error in the React performance measurement code. ' + 'We did not expect %s timer to stop while %s timer is still in ' + 'progress for %s instance. Please report this as a bug in React.', timerType, currentTimerType || 'no', debugID === currentTimerDebugID ? 'the same' : 'another');
                            lifeCycleTimerHasWarned = true;
                        }
                        if (isProfiling) {
                            currentFlushMeasurements.push({
                                timerType: timerType,
                                instanceID: debugID,
                                duration: performanceNow() - currentTimerStartTime - currentTimerNestedFlushDuration
                            });
                        }
                        currentTimerStartTime = 0;
                        currentTimerNestedFlushDuration = 0;
                        currentTimerDebugID = null;
                        currentTimerType = null;
                    };
                    var pauseCurrentLifeCycleTimer = function () {
                        var currentTimer = {
                            startTime: currentTimerStartTime,
                            nestedFlushStartTime: performanceNow(),
                            debugID: currentTimerDebugID,
                            timerType: currentTimerType
                        };
                        lifeCycleTimerStack.push(currentTimer);
                        currentTimerStartTime = 0;
                        currentTimerNestedFlushDuration = 0;
                        currentTimerDebugID = null;
                        currentTimerType = null;
                    };
                    var resumeCurrentLifeCycleTimer = function () {
                        var _lifeCycleTimerStack$ = lifeCycleTimerStack.pop(), startTime = _lifeCycleTimerStack$.startTime, nestedFlushStartTime = _lifeCycleTimerStack$.nestedFlushStartTime, debugID = _lifeCycleTimerStack$.debugID, timerType = _lifeCycleTimerStack$.timerType;
                        var nestedFlushDuration = performanceNow() - nestedFlushStartTime;
                        currentTimerStartTime = startTime;
                        currentTimerNestedFlushDuration += nestedFlushDuration;
                        currentTimerDebugID = debugID;
                        currentTimerType = timerType;
                    };
                    var lastMarkTimeStamp = 0;
                    var canUsePerformanceMeasure = typeof performance !== 'undefined' && typeof performance.mark === 'function' && typeof performance.clearMarks === 'function' && typeof performance.measure === 'function' && typeof performance.clearMeasures === 'function';
                    var shouldMark = function (debugID) {
                        if (!isProfiling || !canUsePerformanceMeasure) {
                            return false;
                        }
                        var element = ReactComponentTreeHook.getElement(debugID);
                        if (element == null || typeof element !== 'object') {
                            return false;
                        }
                        var isHostElement = typeof element.type === 'string';
                        if (isHostElement) {
                            return false;
                        }
                        return true;
                    };
                    var markBegin = function (debugID, markType) {
                        if (!shouldMark(debugID)) {
                            return;
                        }
                        var markName = debugID + '::' + markType;
                        lastMarkTimeStamp = performanceNow();
                        performance.mark(markName);
                    };
                    var markEnd = function (debugID, markType) {
                        if (!shouldMark(debugID)) {
                            return;
                        }
                        var markName = debugID + '::' + markType;
                        var displayName = ReactComponentTreeHook.getDisplayName(debugID) || 'Unknown';
                        var timeStamp = performanceNow();
                        if (timeStamp - lastMarkTimeStamp > 0.1) {
                            var measurementName = displayName + ' [' + markType + ']';
                            performance.measure(measurementName, markName);
                        }
                        performance.clearMarks(markName);
                        if (measurementName) {
                            performance.clearMeasures(measurementName);
                        }
                    };
                    ReactDebugTool$1 = {
                        addHook: function (hook) {
                            hooks.push(hook);
                        },
                        removeHook: function (hook) {
                            for (var i = 0; i < hooks.length; i++) {
                                if (hooks[i] === hook) {
                                    hooks.splice(i, 1);
                                    i--;
                                }
                            }
                        },
                        isProfiling: function () {
                            return isProfiling;
                        },
                        beginProfiling: function () {
                            if (isProfiling) {
                                return;
                            }
                            isProfiling = true;
                            flushHistory.length = 0;
                            resetMeasurements();
                            ReactDebugTool$1.addHook(ReactHostOperationHistoryHook_1);
                        },
                        endProfiling: function () {
                            if (!isProfiling) {
                                return;
                            }
                            isProfiling = false;
                            resetMeasurements();
                            ReactDebugTool$1.removeHook(ReactHostOperationHistoryHook_1);
                        },
                        getFlushHistory: function () {
                            return flushHistory;
                        },
                        onBeginFlush: function () {
                            currentFlushNesting++;
                            resetMeasurements();
                            pauseCurrentLifeCycleTimer();
                            emitEvent('onBeginFlush');
                        },
                        onEndFlush: function () {
                            resetMeasurements();
                            currentFlushNesting--;
                            resumeCurrentLifeCycleTimer();
                            emitEvent('onEndFlush');
                        },
                        onBeginLifeCycleTimer: function (debugID, timerType) {
                            checkDebugID(debugID);
                            emitEvent('onBeginLifeCycleTimer', debugID, timerType);
                            markBegin(debugID, timerType);
                            beginLifeCycleTimer(debugID, timerType);
                        },
                        onEndLifeCycleTimer: function (debugID, timerType) {
                            checkDebugID(debugID);
                            endLifeCycleTimer(debugID, timerType);
                            markEnd(debugID, timerType);
                            emitEvent('onEndLifeCycleTimer', debugID, timerType);
                        },
                        onBeginProcessingChildContext: function () {
                            emitEvent('onBeginProcessingChildContext');
                        },
                        onEndProcessingChildContext: function () {
                            emitEvent('onEndProcessingChildContext');
                        },
                        onHostOperation: function (operation) {
                            checkDebugID(operation.instanceID);
                            emitEvent('onHostOperation', operation);
                        },
                        onSetState: function () {
                            emitEvent('onSetState');
                        },
                        onSetChildren: function (debugID, childDebugIDs) {
                            checkDebugID(debugID);
                            childDebugIDs.forEach(checkDebugID);
                            emitEvent('onSetChildren', debugID, childDebugIDs);
                        },
                        onBeforeMountComponent: function (debugID, element, parentDebugID) {
                            checkDebugID(debugID);
                            checkDebugID(parentDebugID, true);
                            emitEvent('onBeforeMountComponent', debugID, element, parentDebugID);
                            markBegin(debugID, 'mount');
                        },
                        onMountComponent: function (debugID) {
                            checkDebugID(debugID);
                            markEnd(debugID, 'mount');
                            emitEvent('onMountComponent', debugID);
                        },
                        onBeforeUpdateComponent: function (debugID, element) {
                            checkDebugID(debugID);
                            emitEvent('onBeforeUpdateComponent', debugID, element);
                            markBegin(debugID, 'update');
                        },
                        onUpdateComponent: function (debugID) {
                            checkDebugID(debugID);
                            markEnd(debugID, 'update');
                            emitEvent('onUpdateComponent', debugID);
                        },
                        onBeforeUnmountComponent: function (debugID) {
                            checkDebugID(debugID);
                            emitEvent('onBeforeUnmountComponent', debugID);
                            markBegin(debugID, 'unmount');
                        },
                        onUnmountComponent: function (debugID) {
                            checkDebugID(debugID);
                            markEnd(debugID, 'unmount');
                            emitEvent('onUnmountComponent', debugID);
                        },
                        onTestEvent: function () {
                            emitEvent('onTestEvent');
                        }
                    };
                    ReactDebugTool$1.addHook(ReactInvalidSetStateWarningHook_1);
                    ReactDebugTool$1.addHook(ReactComponentTreeHook);
                    var url = ExecutionEnvironment.canUseDOM && window.location.href || '';
                    if (/[?&]react_perf\b/.test(url)) {
                        ReactDebugTool$1.beginProfiling();
                    }
                }
                var ReactDebugTool_1 = ReactDebugTool$1;
                var debugTool = null;
                {
                    var ReactDebugTool = ReactDebugTool_1;
                    debugTool = ReactDebugTool;
                }
                var ReactInstrumentation = { debugTool: debugTool };
                {
                    var warning$5 = require$$0;
                }
                var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + DOMProperty_1.ATTRIBUTE_NAME_START_CHAR + '][' + DOMProperty_1.ATTRIBUTE_NAME_CHAR + ']*$');
                var illegalAttributeNameCache = {};
                var validatedAttributeNameCache = {};
                function isAttributeNameSafe(attributeName) {
                    if (validatedAttributeNameCache.hasOwnProperty(attributeName)) {
                        return true;
                    }
                    if (illegalAttributeNameCache.hasOwnProperty(attributeName)) {
                        return false;
                    }
                    if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
                        validatedAttributeNameCache[attributeName] = true;
                        return true;
                    }
                    illegalAttributeNameCache[attributeName] = true;
                    {
                        warning$5(false, 'Invalid attribute name: `%s`', attributeName);
                    }
                    return false;
                }
                function shouldIgnoreValue(propertyInfo, value) {
                    return value == null || propertyInfo.hasBooleanValue && !value || propertyInfo.hasNumericValue && isNaN(value) || propertyInfo.hasPositiveNumericValue && value < 1 || propertyInfo.hasOverloadedBooleanValue && value === false;
                }
                var DOMPropertyOperations = {
                    setAttributeForID: function (node, id) {
                        node.setAttribute(DOMProperty_1.ID_ATTRIBUTE_NAME, id);
                    },
                    setAttributeForRoot: function (node) {
                        node.setAttribute(DOMProperty_1.ROOT_ATTRIBUTE_NAME, '');
                    },
                    getValueForProperty: function (node, name, expected) {
                        {
                            var propertyInfo = DOMProperty_1.getPropertyInfo(name);
                            if (propertyInfo) {
                                var mutationMethod = propertyInfo.mutationMethod;
                                if (mutationMethod || propertyInfo.mustUseProperty) {
                                    return node[propertyInfo.propertyName];
                                } else {
                                    var attributeName = propertyInfo.attributeName;
                                    var stringValue = null;
                                    if (propertyInfo.hasOverloadedBooleanValue) {
                                        if (node.hasAttribute(attributeName)) {
                                            var value = node.getAttribute(attributeName);
                                            if (value === '') {
                                                return true;
                                            }
                                            if (shouldIgnoreValue(propertyInfo, expected)) {
                                                return value;
                                            }
                                            if (value === '' + expected) {
                                                return expected;
                                            }
                                            return value;
                                        }
                                    } else if (node.hasAttribute(attributeName)) {
                                        if (shouldIgnoreValue(propertyInfo, expected)) {
                                            return node.getAttribute(attributeName);
                                        }
                                        if (propertyInfo.hasBooleanValue) {
                                            return expected;
                                        }
                                        stringValue = node.getAttribute(attributeName);
                                    }
                                    if (shouldIgnoreValue(propertyInfo, expected)) {
                                        return stringValue === null ? expected : stringValue;
                                    } else if (stringValue === '' + expected) {
                                        return expected;
                                    } else {
                                        return stringValue;
                                    }
                                }
                            }
                        }
                    },
                    getValueForAttribute: function (node, name, expected) {
                        {
                            if (!isAttributeNameSafe(name)) {
                                return;
                            }
                            if (!node.hasAttribute(name)) {
                                return expected === undefined ? undefined : null;
                            }
                            var value = node.getAttribute(name);
                            if (value === '' + expected) {
                                return expected;
                            }
                            return value;
                        }
                    },
                    setValueForProperty: function (node, name, value) {
                        var propertyInfo = DOMProperty_1.getPropertyInfo(name);
                        if (propertyInfo && DOMProperty_1.shouldSetAttribute(name, value)) {
                            var mutationMethod = propertyInfo.mutationMethod;
                            if (mutationMethod) {
                                mutationMethod(node, value);
                            } else if (shouldIgnoreValue(propertyInfo, value)) {
                                DOMPropertyOperations.deleteValueForProperty(node, name);
                                return;
                            } else if (propertyInfo.mustUseProperty) {
                                node[propertyInfo.propertyName] = value;
                            } else {
                                var attributeName = propertyInfo.attributeName;
                                var namespace = propertyInfo.attributeNamespace;
                                if (namespace) {
                                    node.setAttributeNS(namespace, attributeName, '' + value);
                                } else if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
                                    node.setAttribute(attributeName, '');
                                } else {
                                    node.setAttribute(attributeName, '' + value);
                                }
                            }
                        } else {
                            DOMPropertyOperations.setValueForAttribute(node, name, DOMProperty_1.shouldSetAttribute(name, value) ? value : null);
                            return;
                        }
                        {
                            var payload = {};
                            payload[name] = value;
                            ReactInstrumentation.debugTool.onHostOperation({
                                instanceID: ReactDOMComponentTree_1.getInstanceFromNode(node)._debugID,
                                type: 'update attribute',
                                payload: payload
                            });
                        }
                    },
                    setValueForAttribute: function (node, name, value) {
                        if (!isAttributeNameSafe(name)) {
                            return;
                        }
                        if (value == null) {
                            node.removeAttribute(name);
                        } else {
                            node.setAttribute(name, '' + value);
                        }
                        {
                            var payload = {};
                            payload[name] = value;
                            ReactInstrumentation.debugTool.onHostOperation({
                                instanceID: ReactDOMComponentTree_1.getInstanceFromNode(node)._debugID,
                                type: 'update attribute',
                                payload: payload
                            });
                        }
                    },
                    deleteValueForAttribute: function (node, name) {
                        node.removeAttribute(name);
                        {
                            ReactInstrumentation.debugTool.onHostOperation({
                                instanceID: ReactDOMComponentTree_1.getInstanceFromNode(node)._debugID,
                                type: 'remove attribute',
                                payload: name
                            });
                        }
                    },
                    deleteValueForProperty: function (node, name) {
                        var propertyInfo = DOMProperty_1.getPropertyInfo(name);
                        if (propertyInfo) {
                            var mutationMethod = propertyInfo.mutationMethod;
                            if (mutationMethod) {
                                mutationMethod(node, undefined);
                            } else if (propertyInfo.mustUseProperty) {
                                var propName = propertyInfo.propertyName;
                                if (propertyInfo.hasBooleanValue) {
                                    node[propName] = false;
                                } else {
                                    node[propName] = '';
                                }
                            } else {
                                node.removeAttribute(propertyInfo.attributeName);
                            }
                        } else {
                            node.removeAttribute(name);
                        }
                        {
                            ReactInstrumentation.debugTool.onHostOperation({
                                instanceID: ReactDOMComponentTree_1.getInstanceFromNode(node)._debugID,
                                type: 'remove attribute',
                                payload: name
                            });
                        }
                    }
                };
                var DOMPropertyOperations_1 = DOMPropertyOperations;
                var ReactControlledValuePropTypes = { checkPropTypes: null };
                {
                    var warning$9 = require$$0;
                    var emptyFunction$2 = emptyFunction;
                    var PropTypes = propTypes;
                    var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
                    ReactControlledValuePropTypes.checkPropTypes = emptyFunction$2;
                    var hasReadOnlyValue = {
                        button: true,
                        checkbox: true,
                        image: true,
                        hidden: true,
                        radio: true,
                        reset: true,
                        submit: true
                    };
                    var propTypes$1 = {
                        value: function (props, propName, componentName) {
                            if (!props[propName] || hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled) {
                                return null;
                            }
                            return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
                        },
                        checked: function (props, propName, componentName) {
                            if (!props[propName] || props.onChange || props.readOnly || props.disabled) {
                                return null;
                            }
                            return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
                        },
                        onChange: PropTypes.func
                    };
                    var loggedTypeFailures = {};
                    ReactControlledValuePropTypes.checkPropTypes = function (tagName, props, getStack) {
                        for (var propName in propTypes$1) {
                            if (propTypes$1.hasOwnProperty(propName)) {
                                var error = propTypes$1[propName](props, propName, tagName, 'prop', null, ReactPropTypesSecret);
                            }
                            if (error instanceof Error && !(error.message in loggedTypeFailures)) {
                                loggedTypeFailures[error.message] = true;
                                warning$9(false, 'Failed form propType: %s%s', error.message, getStack());
                            }
                        }
                    };
                }
                var ReactControlledValuePropTypes_1 = ReactControlledValuePropTypes;
                var getCurrentFiberOwnerName$3 = ReactDebugCurrentFiber_1.getCurrentFiberOwnerName;
                {
                    var _require2$3 = ReactDebugCurrentFiber_1, getCurrentFiberStackAddendum$2 = _require2$3.getCurrentFiberStackAddendum;
                    var warning$8 = require$$0;
                }
                var didWarnValueDefaultValue = false;
                var didWarnCheckedDefaultChecked = false;
                var didWarnControlledToUncontrolled = false;
                var didWarnUncontrolledToControlled = false;
                function isControlled(props) {
                    var usesChecked = props.type === 'checkbox' || props.type === 'radio';
                    return usesChecked ? props.checked != null : props.value != null;
                }
                var ReactDOMInput = {
                    getHostProps: function (element, props) {
                        var node = element;
                        var value = props.value;
                        var checked = props.checked;
                        var hostProps = _assign({
                            type: undefined,
                            step: undefined,
                            min: undefined,
                            max: undefined
                        }, props, {
                            defaultChecked: undefined,
                            defaultValue: undefined,
                            value: value != null ? value : node._wrapperState.initialValue,
                            checked: checked != null ? checked : node._wrapperState.initialChecked
                        });
                        return hostProps;
                    },
                    initWrapperState: function (element, props) {
                        {
                            ReactControlledValuePropTypes_1.checkPropTypes('input', props, getCurrentFiberStackAddendum$2);
                            if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
                                warning$8(false, '%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', getCurrentFiberOwnerName$3() || 'A component', props.type);
                                didWarnCheckedDefaultChecked = true;
                            }
                            if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
                                warning$8(false, '%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', getCurrentFiberOwnerName$3() || 'A component', props.type);
                                didWarnValueDefaultValue = true;
                            }
                        }
                        var defaultValue = props.defaultValue;
                        var node = element;
                        node._wrapperState = {
                            initialChecked: props.checked != null ? props.checked : props.defaultChecked,
                            initialValue: props.value != null ? props.value : defaultValue,
                            controlled: isControlled(props)
                        };
                    },
                    updateWrapper: function (element, props) {
                        var node = element;
                        {
                            var controlled = isControlled(props);
                            if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
                                warning$8(false, 'A component is changing an uncontrolled input of type %s to be controlled. ' + 'Input elements should not switch from uncontrolled to controlled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components%s', props.type, getCurrentFiberStackAddendum$2());
                                didWarnUncontrolledToControlled = true;
                            }
                            if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
                                warning$8(false, 'A component is changing a controlled input of type %s to be uncontrolled. ' + 'Input elements should not switch from controlled to uncontrolled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components%s', props.type, getCurrentFiberStackAddendum$2());
                                didWarnControlledToUncontrolled = true;
                            }
                        }
                        var checked = props.checked;
                        if (checked != null) {
                            DOMPropertyOperations_1.setValueForProperty(node, 'checked', checked || false);
                        }
                        var value = props.value;
                        if (value != null) {
                            if (value === 0 && node.value === '') {
                                node.value = '0';
                            } else if (props.type === 'number') {
                                var valueAsNumber = parseFloat(node.value) || 0;
                                if (value != valueAsNumber || value == valueAsNumber && node.value != value) {
                                    node.value = '' + value;
                                }
                            } else if (node.value !== '' + value) {
                                node.value = '' + value;
                            }
                        } else {
                            if (props.value == null && props.defaultValue != null) {
                                if (node.defaultValue !== '' + props.defaultValue) {
                                    node.defaultValue = '' + props.defaultValue;
                                }
                            }
                            if (props.checked == null && props.defaultChecked != null) {
                                node.defaultChecked = !!props.defaultChecked;
                            }
                        }
                    },
                    postMountWrapper: function (element, props) {
                        var node = element;
                        switch (props.type) {
                        case 'submit':
                        case 'reset':
                            break;
                        case 'color':
                        case 'date':
                        case 'datetime':
                        case 'datetime-local':
                        case 'month':
                        case 'time':
                        case 'week':
                            node.value = '';
                            node.value = node.defaultValue;
                            break;
                        default:
                            node.value = node.value;
                            break;
                        }
                        var name = node.name;
                        if (name !== '') {
                            node.name = '';
                        }
                        node.defaultChecked = !node.defaultChecked;
                        node.defaultChecked = !node.defaultChecked;
                        if (name !== '') {
                            node.name = name;
                        }
                    },
                    restoreControlledState: function (element, props) {
                        var node = element;
                        ReactDOMInput.updateWrapper(node, props);
                        updateNamedCousins(node, props);
                    }
                };
                function updateNamedCousins(rootNode, props) {
                    var name = props.name;
                    if (props.type === 'radio' && name != null) {
                        var queryRoot = rootNode;
                        while (queryRoot.parentNode) {
                            queryRoot = queryRoot.parentNode;
                        }
                        var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');
                        for (var i = 0; i < group.length; i++) {
                            var otherNode = group[i];
                            if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                                continue;
                            }
                            var otherProps = ReactDOMComponentTree_1.getFiberCurrentPropsFromNode(otherNode);
                            !otherProps ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.') : void 0;
                            ReactDOMInput.updateWrapper(otherNode, otherProps);
                        }
                    }
                }
                var ReactDOMFiberInput = ReactDOMInput;
                {
                    var warning$10 = require$$0;
                }
                function flattenChildren(children) {
                    var content = '';
                    react.Children.forEach(children, function (child) {
                        if (child == null) {
                            return;
                        }
                        if (typeof child === 'string' || typeof child === 'number') {
                            content += child;
                        }
                    });
                    return content;
                }
                var ReactDOMOption = {
                    validateProps: function (element, props) {
                        {
                            warning$10(props.selected == null, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.');
                        }
                    },
                    postMountWrapper: function (element, props) {
                        if (props.value != null) {
                            element.setAttribute('value', props.value);
                        }
                    },
                    getHostProps: function (element, props) {
                        var hostProps = _assign({ children: undefined }, props);
                        var content = flattenChildren(props.children);
                        if (content) {
                            hostProps.children = content;
                        }
                        return hostProps;
                    }
                };
                var ReactDOMFiberOption = ReactDOMOption;
                var getCurrentFiberOwnerName$4 = ReactDebugCurrentFiber_1.getCurrentFiberOwnerName;
                {
                    var didWarnValueDefaultValue$1 = false;
                    var warning$11 = require$$0;
                    var _require2$4 = ReactDebugCurrentFiber_1, getCurrentFiberStackAddendum$3 = _require2$4.getCurrentFiberStackAddendum;
                }
                function getDeclarationErrorAddendum() {
                    var ownerName = getCurrentFiberOwnerName$4();
                    if (ownerName) {
                        return '\n\nCheck the render method of `' + ownerName + '`.';
                    }
                    return '';
                }
                var valuePropNames = [
                    'value',
                    'defaultValue'
                ];
                function checkSelectPropTypes(props) {
                    ReactControlledValuePropTypes_1.checkPropTypes('select', props, getCurrentFiberStackAddendum$3);
                    for (var i = 0; i < valuePropNames.length; i++) {
                        var propName = valuePropNames[i];
                        if (props[propName] == null) {
                            continue;
                        }
                        var isArray = Array.isArray(props[propName]);
                        if (props.multiple && !isArray) {
                            warning$11(false, 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum());
                        } else if (!props.multiple && isArray) {
                            warning$11(false, 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum());
                        }
                    }
                }
                function updateOptions(node, multiple, propValue) {
                    var options = node.options;
                    if (multiple) {
                        var selectedValues = propValue;
                        var selectedValue = {};
                        for (var i = 0; i < selectedValues.length; i++) {
                            selectedValue['$' + selectedValues[i]] = true;
                        }
                        for (var _i = 0; _i < options.length; _i++) {
                            var selected = selectedValue.hasOwnProperty('$' + options[_i].value);
                            if (options[_i].selected !== selected) {
                                options[_i].selected = selected;
                            }
                        }
                    } else {
                        var _selectedValue = '' + propValue;
                        var defaultSelected = null;
                        for (var _i2 = 0; _i2 < options.length; _i2++) {
                            if (options[_i2].value === _selectedValue) {
                                options[_i2].selected = true;
                                return;
                            }
                            if (defaultSelected === null && !options[_i2].disabled) {
                                defaultSelected = options[_i2];
                            }
                        }
                        if (defaultSelected !== null) {
                            defaultSelected.selected = true;
                        }
                    }
                }
                var ReactDOMSelect = {
                    getHostProps: function (element, props) {
                        return _assign({}, props, { value: undefined });
                    },
                    initWrapperState: function (element, props) {
                        var node = element;
                        {
                            checkSelectPropTypes(props);
                        }
                        var value = props.value;
                        node._wrapperState = {
                            initialValue: value != null ? value : props.defaultValue,
                            wasMultiple: !!props.multiple
                        };
                        {
                            if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue$1) {
                                warning$11(false, 'Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components');
                                didWarnValueDefaultValue$1 = true;
                            }
                        }
                    },
                    postMountWrapper: function (element, props) {
                        var node = element;
                        node.multiple = !!props.multiple;
                        var value = props.value;
                        if (value != null) {
                            updateOptions(node, !!props.multiple, value);
                        } else if (props.defaultValue != null) {
                            updateOptions(node, !!props.multiple, props.defaultValue);
                        }
                    },
                    postUpdateWrapper: function (element, props) {
                        var node = element;
                        node._wrapperState.initialValue = undefined;
                        var wasMultiple = node._wrapperState.wasMultiple;
                        node._wrapperState.wasMultiple = !!props.multiple;
                        var value = props.value;
                        if (value != null) {
                            updateOptions(node, !!props.multiple, value);
                        } else if (wasMultiple !== !!props.multiple) {
                            if (props.defaultValue != null) {
                                updateOptions(node, !!props.multiple, props.defaultValue);
                            } else {
                                updateOptions(node, !!props.multiple, props.multiple ? [] : '');
                            }
                        }
                    },
                    restoreControlledState: function (element, props) {
                        var node = element;
                        var value = props.value;
                        if (value != null) {
                            updateOptions(node, !!props.multiple, value);
                        }
                    }
                };
                var ReactDOMFiberSelect = ReactDOMSelect;
                {
                    var warning$12 = require$$0;
                    var _require$4 = ReactDebugCurrentFiber_1, getCurrentFiberStackAddendum$4 = _require$4.getCurrentFiberStackAddendum;
                }
                var didWarnValDefaultVal = false;
                var ReactDOMTextarea = {
                    getHostProps: function (element, props) {
                        var node = element;
                        !(props.dangerouslySetInnerHTML == null) ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : void 0;
                        var hostProps = _assign({}, props, {
                            value: undefined,
                            defaultValue: undefined,
                            children: '' + node._wrapperState.initialValue
                        });
                        return hostProps;
                    },
                    initWrapperState: function (element, props) {
                        var node = element;
                        {
                            ReactControlledValuePropTypes_1.checkPropTypes('textarea', props, getCurrentFiberStackAddendum$4);
                            if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
                                warning$12(false, 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components');
                                didWarnValDefaultVal = true;
                            }
                        }
                        var value = props.value;
                        var initialValue = value;
                        if (value == null) {
                            var defaultValue = props.defaultValue;
                            var children = props.children;
                            if (children != null) {
                                {
                                    warning$12(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.');
                                }
                                !(defaultValue == null) ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : void 0;
                                if (Array.isArray(children)) {
                                    !(children.length <= 1) ? invariant(false, '<textarea> can only have at most one child.') : void 0;
                                    children = children[0];
                                }
                                defaultValue = '' + children;
                            }
                            if (defaultValue == null) {
                                defaultValue = '';
                            }
                            initialValue = defaultValue;
                        }
                        node._wrapperState = { initialValue: '' + initialValue };
                    },
                    updateWrapper: function (element, props) {
                        var node = element;
                        var value = props.value;
                        if (value != null) {
                            var newValue = '' + value;
                            if (newValue !== node.value) {
                                node.value = newValue;
                            }
                            if (props.defaultValue == null) {
                                node.defaultValue = newValue;
                            }
                        }
                        if (props.defaultValue != null) {
                            node.defaultValue = props.defaultValue;
                        }
                    },
                    postMountWrapper: function (element, props) {
                        var node = element;
                        var textContent = node.textContent;
                        if (textContent === node._wrapperState.initialValue) {
                            node.value = textContent;
                        }
                    },
                    restoreControlledState: function (element, props) {
                        ReactDOMTextarea.updateWrapper(element, props);
                    }
                };
                var ReactDOMFiberTextarea = ReactDOMTextarea;
                var omittedCloseTags = {
                    area: true,
                    base: true,
                    br: true,
                    col: true,
                    embed: true,
                    hr: true,
                    img: true,
                    input: true,
                    keygen: true,
                    link: true,
                    meta: true,
                    param: true,
                    source: true,
                    track: true,
                    wbr: true
                };
                var omittedCloseTags_1 = omittedCloseTags;
                var voidElementTags = _assign({ menuitem: true }, omittedCloseTags_1);
                var voidElementTags_1 = voidElementTags;
                {
                    var warning$13 = require$$0;
                }
                var HTML$1 = '__html';
                function getDeclarationErrorAddendum$1(getCurrentOwnerName) {
                    {
                        var ownerName = getCurrentOwnerName();
                        if (ownerName) {
                            return '\n\nThis DOM node was rendered by `' + ownerName + '`.';
                        }
                    }
                    return '';
                }
                function assertValidProps(tag, props, getCurrentOwnerName) {
                    if (!props) {
                        return;
                    }
                    if (voidElementTags_1[tag]) {
                        !(props.children == null && props.dangerouslySetInnerHTML == null) ? invariant(false, '%s is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.%s', tag, getDeclarationErrorAddendum$1(getCurrentOwnerName)) : void 0;
                    }
                    if (props.dangerouslySetInnerHTML != null) {
                        !(props.children == null) ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : void 0;
                        !(typeof props.dangerouslySetInnerHTML === 'object' && HTML$1 in props.dangerouslySetInnerHTML) ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information.') : void 0;
                    }
                    {
                        warning$13(props.suppressContentEditableWarning || !props.contentEditable || props.children == null, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.');
                    }
                    !(props.style == null || typeof props.style === 'object') ? invariant(false, 'The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + \'em\'}} when using JSX.%s', getDeclarationErrorAddendum$1(getCurrentOwnerName)) : void 0;
                }
                var assertValidProps_1 = assertValidProps;
                function isCheckable(elem) {
                    var type = elem.type;
                    var nodeName = elem.nodeName;
                    return nodeName && nodeName.toLowerCase() === 'input' && (type === 'checkbox' || type === 'radio');
                }
                function getTracker(node) {
                    return node._valueTracker;
                }
                function detachTracker(node) {
                    node._valueTracker = null;
                }
                function getValueFromNode(node) {
                    var value = '';
                    if (!node) {
                        return value;
                    }
                    if (isCheckable(node)) {
                        value = node.checked ? 'true' : 'false';
                    } else {
                        value = node.value;
                    }
                    return value;
                }
                function trackValueOnNode(node) {
                    var valueField = isCheckable(node) ? 'checked' : 'value';
                    var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
                    var currentValue = '' + node[valueField];
                    if (node.hasOwnProperty(valueField) || typeof descriptor.get !== 'function' || typeof descriptor.set !== 'function') {
                        return;
                    }
                    Object.defineProperty(node, valueField, {
                        enumerable: descriptor.enumerable,
                        configurable: true,
                        get: function () {
                            return descriptor.get.call(this);
                        },
                        set: function (value) {
                            currentValue = '' + value;
                            descriptor.set.call(this, value);
                        }
                    });
                    var tracker = {
                        getValue: function () {
                            return currentValue;
                        },
                        setValue: function (value) {
                            currentValue = '' + value;
                        },
                        stopTracking: function () {
                            detachTracker(node);
                            delete node[valueField];
                        }
                    };
                    return tracker;
                }
                var inputValueTracking = {
                    _getTrackerFromNode: getTracker,
                    track: function (node) {
                        if (getTracker(node)) {
                            return;
                        }
                        node._valueTracker = trackValueOnNode(node);
                    },
                    updateValueIfChanged: function (node) {
                        if (!node) {
                            return false;
                        }
                        var tracker = getTracker(node);
                        if (!tracker) {
                            return true;
                        }
                        var lastValue = tracker.getValue();
                        var nextValue = getValueFromNode(node);
                        if (nextValue !== lastValue) {
                            tracker.setValue(nextValue);
                            return true;
                        }
                        return false;
                    },
                    stopTracking: function (node) {
                        var tracker = getTracker(node);
                        if (tracker) {
                            tracker.stopTracking();
                        }
                    }
                };
                var inputValueTracking_1 = inputValueTracking;
                function isCustomComponent(tagName, props) {
                    if (tagName.indexOf('-') === -1) {
                        return typeof props.is === 'string';
                    }
                    switch (tagName) {
                    case 'annotation-xml':
                    case 'color-profile':
                    case 'font-face':
                    case 'font-face-src':
                    case 'font-face-uri':
                    case 'font-face-format':
                    case 'font-face-name':
                    case 'missing-glyph':
                        return false;
                    default:
                        return true;
                    }
                }
                var isCustomComponent_1 = isCustomComponent;
                var createMicrosoftUnsafeLocalFunction = function (func) {
                    if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
                        return function (arg0, arg1, arg2, arg3) {
                            MSApp.execUnsafeLocalFunction(function () {
                                return func(arg0, arg1, arg2, arg3);
                            });
                        };
                    } else {
                        return func;
                    }
                };
                var createMicrosoftUnsafeLocalFunction_1 = createMicrosoftUnsafeLocalFunction;
                var Namespaces$1 = DOMNamespaces.Namespaces;
                var reusableSVGContainer;
                var setInnerHTML = createMicrosoftUnsafeLocalFunction_1(function (node, html) {
                    if (node.namespaceURI === Namespaces$1.svg && !('innerHTML' in node)) {
                        reusableSVGContainer = reusableSVGContainer || document.createElement('div');
                        reusableSVGContainer.innerHTML = '<svg>' + html + '</svg>';
                        var svgNode = reusableSVGContainer.firstChild;
                        while (svgNode.firstChild) {
                            node.appendChild(svgNode.firstChild);
                        }
                    } else {
                        node.innerHTML = html;
                    }
                });
                var setInnerHTML_1 = setInnerHTML;
                var matchHtmlRegExp = /["'&<>]/;
                function escapeHtml(string) {
                    var str = '' + string;
                    var match = matchHtmlRegExp.exec(str);
                    if (!match) {
                        return str;
                    }
                    var escape;
                    var html = '';
                    var index = 0;
                    var lastIndex = 0;
                    for (index = match.index; index < str.length; index++) {
                        switch (str.charCodeAt(index)) {
                        case 34:
                            escape = '&quot;';
                            break;
                        case 38:
                            escape = '&amp;';
                            break;
                        case 39:
                            escape = '&#x27;';
                            break;
                        case 60:
                            escape = '&lt;';
                            break;
                        case 62:
                            escape = '&gt;';
                            break;
                        default:
                            continue;
                        }
                        if (lastIndex !== index) {
                            html += str.substring(lastIndex, index);
                        }
                        lastIndex = index + 1;
                        html += escape;
                    }
                    return lastIndex !== index ? html + str.substring(lastIndex, index) : html;
                }
                function escapeTextContentForBrowser(text) {
                    if (typeof text === 'boolean' || typeof text === 'number') {
                        return '' + text;
                    }
                    return escapeHtml(text);
                }
                var escapeTextContentForBrowser_1 = escapeTextContentForBrowser;
                var TEXT_NODE$2 = HTMLNodeType_1.TEXT_NODE;
                var setTextContent = function (node, text) {
                    if (text) {
                        var firstChild = node.firstChild;
                        if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE$2) {
                            firstChild.nodeValue = text;
                            return;
                        }
                    }
                    node.textContent = text;
                };
                if (ExecutionEnvironment.canUseDOM) {
                    if (!('textContent' in document.documentElement)) {
                        setTextContent = function (node, text) {
                            if (node.nodeType === TEXT_NODE$2) {
                                node.nodeValue = text;
                                return;
                            }
                            setInnerHTML_1(node, escapeTextContentForBrowser_1(text));
                        };
                    }
                }
                var setTextContent_1 = setTextContent;
                var ariaProperties = {
                    'aria-current': 0,
                    'aria-details': 0,
                    'aria-disabled': 0,
                    'aria-hidden': 0,
                    'aria-invalid': 0,
                    'aria-keyshortcuts': 0,
                    'aria-label': 0,
                    'aria-roledescription': 0,
                    'aria-autocomplete': 0,
                    'aria-checked': 0,
                    'aria-expanded': 0,
                    'aria-haspopup': 0,
                    'aria-level': 0,
                    'aria-modal': 0,
                    'aria-multiline': 0,
                    'aria-multiselectable': 0,
                    'aria-orientation': 0,
                    'aria-placeholder': 0,
                    'aria-pressed': 0,
                    'aria-readonly': 0,
                    'aria-required': 0,
                    'aria-selected': 0,
                    'aria-sort': 0,
                    'aria-valuemax': 0,
                    'aria-valuemin': 0,
                    'aria-valuenow': 0,
                    'aria-valuetext': 0,
                    'aria-atomic': 0,
                    'aria-busy': 0,
                    'aria-live': 0,
                    'aria-relevant': 0,
                    'aria-dropeffect': 0,
                    'aria-grabbed': 0,
                    'aria-activedescendant': 0,
                    'aria-colcount': 0,
                    'aria-colindex': 0,
                    'aria-colspan': 0,
                    'aria-controls': 0,
                    'aria-describedby': 0,
                    'aria-errormessage': 0,
                    'aria-flowto': 0,
                    'aria-labelledby': 0,
                    'aria-owns': 0,
                    'aria-posinset': 0,
                    'aria-rowcount': 0,
                    'aria-rowindex': 0,
                    'aria-rowspan': 0,
                    'aria-setsize': 0
                };
                var validAriaProperties$1 = ariaProperties;
                var warnedProperties = {};
                var rARIA = new RegExp('^(aria)-[' + DOMProperty_1.ATTRIBUTE_NAME_CHAR + ']*$');
                var rARIACamel = new RegExp('^(aria)[A-Z][' + DOMProperty_1.ATTRIBUTE_NAME_CHAR + ']*$');
                var hasOwnProperty = Object.prototype.hasOwnProperty;
                {
                    var warning$14 = require$$0;
                    var _require$5 = ReactGlobalSharedState_1, ReactComponentTreeHook$1 = _require$5.ReactComponentTreeHook, ReactDebugCurrentFrame$1 = _require$5.ReactDebugCurrentFrame;
                    var getStackAddendumByID = ReactComponentTreeHook$1.getStackAddendumByID;
                    var validAriaProperties = validAriaProperties$1;
                }
                function getStackAddendum(debugID) {
                    if (debugID != null) {
                        return getStackAddendumByID(debugID);
                    } else {
                        var stack = ReactDebugCurrentFrame$1.getStackAddendum();
                        return stack != null ? stack : '';
                    }
                }
                function validateProperty(tagName, name, debugID) {
                    if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) {
                        return true;
                    }
                    if (rARIACamel.test(name)) {
                        var ariaName = 'aria-' + name.slice(4).toLowerCase();
                        var correctName = validAriaProperties.hasOwnProperty(ariaName) ? ariaName : null;
                        if (correctName == null) {
                            warning$14(false, 'Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.%s', name, getStackAddendum(debugID));
                            warnedProperties[name] = true;
                            return true;
                        }
                        if (name !== correctName) {
                            warning$14(false, 'Invalid ARIA attribute `%s`. Did you mean `%s`?%s', name, correctName, getStackAddendum(debugID));
                            warnedProperties[name] = true;
                            return true;
                        }
                    }
                    if (rARIA.test(name)) {
                        var lowerCasedName = name.toLowerCase();
                        var standardName = validAriaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
                        if (standardName == null) {
                            warnedProperties[name] = true;
                            return false;
                        }
                        if (name !== standardName) {
                            warning$14(false, 'Unknown ARIA attribute `%s`. Did you mean `%s`?%s', name, standardName, getStackAddendum(debugID));
                            warnedProperties[name] = true;
                            return true;
                        }
                    }
                    return true;
                }
                function warnInvalidARIAProps(type, props, debugID) {
                    var invalidProps = [];
                    for (var key in props) {
                        var isValid = validateProperty(type, key, debugID);
                        if (!isValid) {
                            invalidProps.push(key);
                        }
                    }
                    var unknownPropString = invalidProps.map(function (prop) {
                        return '`' + prop + '`';
                    }).join(', ');
                    if (invalidProps.length === 1) {
                        warning$14(false, 'Invalid aria prop %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop%s', unknownPropString, type, getStackAddendum(debugID));
                    } else if (invalidProps.length > 1) {
                        warning$14(false, 'Invalid aria props %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop%s', unknownPropString, type, getStackAddendum(debugID));
                    }
                }
                function validateProperties(type, props, debugID) {
                    if (isCustomComponent_1(type, props)) {
                        return;
                    }
                    warnInvalidARIAProps(type, props, debugID);
                }
                var ReactDOMInvalidARIAHook$1 = {
                    validateProperties: validateProperties,
                    onBeforeMountComponent: function (debugID, element) {
                        if (true && element != null && typeof element.type === 'string') {
                            validateProperties(element.type, element.props, debugID);
                        }
                    },
                    onBeforeUpdateComponent: function (debugID, element) {
                        if (true && element != null && typeof element.type === 'string') {
                            validateProperties(element.type, element.props, debugID);
                        }
                    }
                };
                var ReactDOMInvalidARIAHook_1 = ReactDOMInvalidARIAHook$1;
                {
                    var warning$15 = require$$0;
                    var _require$6 = ReactGlobalSharedState_1, ReactComponentTreeHook$2 = _require$6.ReactComponentTreeHook, ReactDebugCurrentFrame$2 = _require$6.ReactDebugCurrentFrame;
                    var getStackAddendumByID$1 = ReactComponentTreeHook$2.getStackAddendumByID;
                }
                var didWarnValueNull = false;
                function getStackAddendum$1(debugID) {
                    if (debugID != null) {
                        return getStackAddendumByID$1(debugID);
                    } else {
                        var stack = ReactDebugCurrentFrame$2.getStackAddendum();
                        return stack != null ? stack : '';
                    }
                }
                function validateProperties$1(type, props, debugID) {
                    if (type !== 'input' && type !== 'textarea' && type !== 'select') {
                        return;
                    }
                    if (props != null && props.value === null && !didWarnValueNull) {
                        warning$15(false, '`value` prop on `%s` should not be null. ' + 'Consider using the empty string to clear the component or `undefined` ' + 'for uncontrolled components.%s', type, getStackAddendum$1(debugID));
                        didWarnValueNull = true;
                    }
                }
                var ReactDOMNullInputValuePropHook$1 = {
                    validateProperties: validateProperties$1,
                    onBeforeMountComponent: function (debugID, element) {
                        if (true && element != null && typeof element.type === 'string') {
                            validateProperties$1(element.type, element.props, debugID);
                        }
                    },
                    onBeforeUpdateComponent: function (debugID, element) {
                        if (true && element != null && typeof element.type === 'string') {
                            validateProperties$1(element.type, element.props, debugID);
                        }
                    }
                };
                var ReactDOMNullInputValuePropHook_1 = ReactDOMNullInputValuePropHook$1;
                var possibleStandardNames$1 = {
                    accept: 'accept',
                    acceptcharset: 'acceptCharset',
                    'accept-charset': 'acceptCharset',
                    accesskey: 'accessKey',
                    action: 'action',
                    allowfullscreen: 'allowFullScreen',
                    allowtransparency: 'allowTransparency',
                    alt: 'alt',
                    as: 'as',
                    async: 'async',
                    autocapitalize: 'autoCapitalize',
                    autocomplete: 'autoComplete',
                    autocorrect: 'autoCorrect',
                    autofocus: 'autoFocus',
                    autoplay: 'autoPlay',
                    autosave: 'autoSave',
                    capture: 'capture',
                    cellpadding: 'cellPadding',
                    cellspacing: 'cellSpacing',
                    challenge: 'challenge',
                    charset: 'charSet',
                    checked: 'checked',
                    children: 'children',
                    cite: 'cite',
                    'class': 'className',
                    classid: 'classID',
                    classname: 'className',
                    cols: 'cols',
                    colspan: 'colSpan',
                    content: 'content',
                    contenteditable: 'contentEditable',
                    contextmenu: 'contextMenu',
                    controls: 'controls',
                    controlslist: 'controlsList',
                    coords: 'coords',
                    crossorigin: 'crossOrigin',
                    dangerouslysetinnerhtml: 'dangerouslySetInnerHTML',
                    data: 'data',
                    datetime: 'dateTime',
                    'default': 'default',
                    defaultchecked: 'defaultChecked',
                    defaultvalue: 'defaultValue',
                    defer: 'defer',
                    dir: 'dir',
                    disabled: 'disabled',
                    download: 'download',
                    draggable: 'draggable',
                    enctype: 'encType',
                    'for': 'htmlFor',
                    form: 'form',
                    formmethod: 'formMethod',
                    formaction: 'formAction',
                    formenctype: 'formEncType',
                    formnovalidate: 'formNoValidate',
                    formtarget: 'formTarget',
                    frameborder: 'frameBorder',
                    headers: 'headers',
                    height: 'height',
                    hidden: 'hidden',
                    high: 'high',
                    href: 'href',
                    hreflang: 'hrefLang',
                    htmlfor: 'htmlFor',
                    httpequiv: 'httpEquiv',
                    'http-equiv': 'httpEquiv',
                    icon: 'icon',
                    id: 'id',
                    innerhtml: 'innerHTML',
                    inputmode: 'inputMode',
                    integrity: 'integrity',
                    is: 'is',
                    itemid: 'itemID',
                    itemprop: 'itemProp',
                    itemref: 'itemRef',
                    itemscope: 'itemScope',
                    itemtype: 'itemType',
                    keyparams: 'keyParams',
                    keytype: 'keyType',
                    kind: 'kind',
                    label: 'label',
                    lang: 'lang',
                    list: 'list',
                    loop: 'loop',
                    low: 'low',
                    manifest: 'manifest',
                    marginwidth: 'marginWidth',
                    marginheight: 'marginHeight',
                    max: 'max',
                    maxlength: 'maxLength',
                    media: 'media',
                    mediagroup: 'mediaGroup',
                    method: 'method',
                    min: 'min',
                    minlength: 'minLength',
                    multiple: 'multiple',
                    muted: 'muted',
                    name: 'name',
                    nonce: 'nonce',
                    novalidate: 'noValidate',
                    open: 'open',
                    optimum: 'optimum',
                    pattern: 'pattern',
                    placeholder: 'placeholder',
                    playsinline: 'playsInline',
                    poster: 'poster',
                    preload: 'preload',
                    profile: 'profile',
                    radiogroup: 'radioGroup',
                    readonly: 'readOnly',
                    referrerpolicy: 'referrerPolicy',
                    rel: 'rel',
                    required: 'required',
                    reversed: 'reversed',
                    role: 'role',
                    rows: 'rows',
                    rowspan: 'rowSpan',
                    sandbox: 'sandbox',
                    scope: 'scope',
                    scoped: 'scoped',
                    scrolling: 'scrolling',
                    seamless: 'seamless',
                    selected: 'selected',
                    shape: 'shape',
                    size: 'size',
                    sizes: 'sizes',
                    span: 'span',
                    spellcheck: 'spellCheck',
                    src: 'src',
                    srcdoc: 'srcDoc',
                    srclang: 'srcLang',
                    srcset: 'srcSet',
                    start: 'start',
                    step: 'step',
                    style: 'style',
                    summary: 'summary',
                    tabindex: 'tabIndex',
                    target: 'target',
                    title: 'title',
                    type: 'type',
                    usemap: 'useMap',
                    value: 'value',
                    width: 'width',
                    wmode: 'wmode',
                    wrap: 'wrap',
                    about: 'about',
                    accentheight: 'accentHeight',
                    'accent-height': 'accentHeight',
                    accumulate: 'accumulate',
                    additive: 'additive',
                    alignmentbaseline: 'alignmentBaseline',
                    'alignment-baseline': 'alignmentBaseline',
                    allowreorder: 'allowReorder',
                    alphabetic: 'alphabetic',
                    amplitude: 'amplitude',
                    arabicform: 'arabicForm',
                    'arabic-form': 'arabicForm',
                    ascent: 'ascent',
                    attributename: 'attributeName',
                    attributetype: 'attributeType',
                    autoreverse: 'autoReverse',
                    azimuth: 'azimuth',
                    basefrequency: 'baseFrequency',
                    baselineshift: 'baselineShift',
                    'baseline-shift': 'baselineShift',
                    baseprofile: 'baseProfile',
                    bbox: 'bbox',
                    begin: 'begin',
                    bias: 'bias',
                    by: 'by',
                    calcmode: 'calcMode',
                    capheight: 'capHeight',
                    'cap-height': 'capHeight',
                    clip: 'clip',
                    clippath: 'clipPath',
                    'clip-path': 'clipPath',
                    clippathunits: 'clipPathUnits',
                    cliprule: 'clipRule',
                    'clip-rule': 'clipRule',
                    color: 'color',
                    colorinterpolation: 'colorInterpolation',
                    'color-interpolation': 'colorInterpolation',
                    colorinterpolationfilters: 'colorInterpolationFilters',
                    'color-interpolation-filters': 'colorInterpolationFilters',
                    colorprofile: 'colorProfile',
                    'color-profile': 'colorProfile',
                    colorrendering: 'colorRendering',
                    'color-rendering': 'colorRendering',
                    contentscripttype: 'contentScriptType',
                    contentstyletype: 'contentStyleType',
                    cursor: 'cursor',
                    cx: 'cx',
                    cy: 'cy',
                    d: 'd',
                    datatype: 'datatype',
                    decelerate: 'decelerate',
                    descent: 'descent',
                    diffuseconstant: 'diffuseConstant',
                    direction: 'direction',
                    display: 'display',
                    divisor: 'divisor',
                    dominantbaseline: 'dominantBaseline',
                    'dominant-baseline': 'dominantBaseline',
                    dur: 'dur',
                    dx: 'dx',
                    dy: 'dy',
                    edgemode: 'edgeMode',
                    elevation: 'elevation',
                    enablebackground: 'enableBackground',
                    'enable-background': 'enableBackground',
                    end: 'end',
                    exponent: 'exponent',
                    externalresourcesrequired: 'externalResourcesRequired',
                    fill: 'fill',
                    fillopacity: 'fillOpacity',
                    'fill-opacity': 'fillOpacity',
                    fillrule: 'fillRule',
                    'fill-rule': 'fillRule',
                    filter: 'filter',
                    filterres: 'filterRes',
                    filterunits: 'filterUnits',
                    floodopacity: 'floodOpacity',
                    'flood-opacity': 'floodOpacity',
                    floodcolor: 'floodColor',
                    'flood-color': 'floodColor',
                    focusable: 'focusable',
                    fontfamily: 'fontFamily',
                    'font-family': 'fontFamily',
                    fontsize: 'fontSize',
                    'font-size': 'fontSize',
                    fontsizeadjust: 'fontSizeAdjust',
                    'font-size-adjust': 'fontSizeAdjust',
                    fontstretch: 'fontStretch',
                    'font-stretch': 'fontStretch',
                    fontstyle: 'fontStyle',
                    'font-style': 'fontStyle',
                    fontvariant: 'fontVariant',
                    'font-variant': 'fontVariant',
                    fontweight: 'fontWeight',
                    'font-weight': 'fontWeight',
                    format: 'format',
                    from: 'from',
                    fx: 'fx',
                    fy: 'fy',
                    g1: 'g1',
                    g2: 'g2',
                    glyphname: 'glyphName',
                    'glyph-name': 'glyphName',
                    glyphorientationhorizontal: 'glyphOrientationHorizontal',
                    'glyph-orientation-horizontal': 'glyphOrientationHorizontal',
                    glyphorientationvertical: 'glyphOrientationVertical',
                    'glyph-orientation-vertical': 'glyphOrientationVertical',
                    glyphref: 'glyphRef',
                    gradienttransform: 'gradientTransform',
                    gradientunits: 'gradientUnits',
                    hanging: 'hanging',
                    horizadvx: 'horizAdvX',
                    'horiz-adv-x': 'horizAdvX',
                    horizoriginx: 'horizOriginX',
                    'horiz-origin-x': 'horizOriginX',
                    ideographic: 'ideographic',
                    imagerendering: 'imageRendering',
                    'image-rendering': 'imageRendering',
                    in2: 'in2',
                    'in': 'in',
                    inlist: 'inlist',
                    intercept: 'intercept',
                    k1: 'k1',
                    k2: 'k2',
                    k3: 'k3',
                    k4: 'k4',
                    k: 'k',
                    kernelmatrix: 'kernelMatrix',
                    kernelunitlength: 'kernelUnitLength',
                    kerning: 'kerning',
                    keypoints: 'keyPoints',
                    keysplines: 'keySplines',
                    keytimes: 'keyTimes',
                    lengthadjust: 'lengthAdjust',
                    letterspacing: 'letterSpacing',
                    'letter-spacing': 'letterSpacing',
                    lightingcolor: 'lightingColor',
                    'lighting-color': 'lightingColor',
                    limitingconeangle: 'limitingConeAngle',
                    local: 'local',
                    markerend: 'markerEnd',
                    'marker-end': 'markerEnd',
                    markerheight: 'markerHeight',
                    markermid: 'markerMid',
                    'marker-mid': 'markerMid',
                    markerstart: 'markerStart',
                    'marker-start': 'markerStart',
                    markerunits: 'markerUnits',
                    markerwidth: 'markerWidth',
                    mask: 'mask',
                    maskcontentunits: 'maskContentUnits',
                    maskunits: 'maskUnits',
                    mathematical: 'mathematical',
                    mode: 'mode',
                    numoctaves: 'numOctaves',
                    offset: 'offset',
                    opacity: 'opacity',
                    operator: 'operator',
                    order: 'order',
                    orient: 'orient',
                    orientation: 'orientation',
                    origin: 'origin',
                    overflow: 'overflow',
                    overlineposition: 'overlinePosition',
                    'overline-position': 'overlinePosition',
                    overlinethickness: 'overlineThickness',
                    'overline-thickness': 'overlineThickness',
                    paintorder: 'paintOrder',
                    'paint-order': 'paintOrder',
                    panose1: 'panose1',
                    'panose-1': 'panose1',
                    pathlength: 'pathLength',
                    patterncontentunits: 'patternContentUnits',
                    patterntransform: 'patternTransform',
                    patternunits: 'patternUnits',
                    pointerevents: 'pointerEvents',
                    'pointer-events': 'pointerEvents',
                    points: 'points',
                    pointsatx: 'pointsAtX',
                    pointsaty: 'pointsAtY',
                    pointsatz: 'pointsAtZ',
                    prefix: 'prefix',
                    preservealpha: 'preserveAlpha',
                    preserveaspectratio: 'preserveAspectRatio',
                    primitiveunits: 'primitiveUnits',
                    property: 'property',
                    r: 'r',
                    radius: 'radius',
                    refx: 'refX',
                    refy: 'refY',
                    renderingintent: 'renderingIntent',
                    'rendering-intent': 'renderingIntent',
                    repeatcount: 'repeatCount',
                    repeatdur: 'repeatDur',
                    requiredextensions: 'requiredExtensions',
                    requiredfeatures: 'requiredFeatures',
                    resource: 'resource',
                    restart: 'restart',
                    result: 'result',
                    results: 'results',
                    rotate: 'rotate',
                    rx: 'rx',
                    ry: 'ry',
                    scale: 'scale',
                    security: 'security',
                    seed: 'seed',
                    shaperendering: 'shapeRendering',
                    'shape-rendering': 'shapeRendering',
                    slope: 'slope',
                    spacing: 'spacing',
                    specularconstant: 'specularConstant',
                    specularexponent: 'specularExponent',
                    speed: 'speed',
                    spreadmethod: 'spreadMethod',
                    startoffset: 'startOffset',
                    stddeviation: 'stdDeviation',
                    stemh: 'stemh',
                    stemv: 'stemv',
                    stitchtiles: 'stitchTiles',
                    stopcolor: 'stopColor',
                    'stop-color': 'stopColor',
                    stopopacity: 'stopOpacity',
                    'stop-opacity': 'stopOpacity',
                    strikethroughposition: 'strikethroughPosition',
                    'strikethrough-position': 'strikethroughPosition',
                    strikethroughthickness: 'strikethroughThickness',
                    'strikethrough-thickness': 'strikethroughThickness',
                    string: 'string',
                    stroke: 'stroke',
                    strokedasharray: 'strokeDasharray',
                    'stroke-dasharray': 'strokeDasharray',
                    strokedashoffset: 'strokeDashoffset',
                    'stroke-dashoffset': 'strokeDashoffset',
                    strokelinecap: 'strokeLinecap',
                    'stroke-linecap': 'strokeLinecap',
                    strokelinejoin: 'strokeLinejoin',
                    'stroke-linejoin': 'strokeLinejoin',
                    strokemiterlimit: 'strokeMiterlimit',
                    'stroke-miterlimit': 'strokeMiterlimit',
                    strokewidth: 'strokeWidth',
                    'stroke-width': 'strokeWidth',
                    strokeopacity: 'strokeOpacity',
                    'stroke-opacity': 'strokeOpacity',
                    suppresscontenteditablewarning: 'suppressContentEditableWarning',
                    surfacescale: 'surfaceScale',
                    systemlanguage: 'systemLanguage',
                    tablevalues: 'tableValues',
                    targetx: 'targetX',
                    targety: 'targetY',
                    textanchor: 'textAnchor',
                    'text-anchor': 'textAnchor',
                    textdecoration: 'textDecoration',
                    'text-decoration': 'textDecoration',
                    textlength: 'textLength',
                    textrendering: 'textRendering',
                    'text-rendering': 'textRendering',
                    to: 'to',
                    transform: 'transform',
                    'typeof': 'typeof',
                    u1: 'u1',
                    u2: 'u2',
                    underlineposition: 'underlinePosition',
                    'underline-position': 'underlinePosition',
                    underlinethickness: 'underlineThickness',
                    'underline-thickness': 'underlineThickness',
                    unicode: 'unicode',
                    unicodebidi: 'unicodeBidi',
                    'unicode-bidi': 'unicodeBidi',
                    unicoderange: 'unicodeRange',
                    'unicode-range': 'unicodeRange',
                    unitsperem: 'unitsPerEm',
                    'units-per-em': 'unitsPerEm',
                    unselectable: 'unselectable',
                    valphabetic: 'vAlphabetic',
                    'v-alphabetic': 'vAlphabetic',
                    values: 'values',
                    vectoreffect: 'vectorEffect',
                    'vector-effect': 'vectorEffect',
                    version: 'version',
                    vertadvy: 'vertAdvY',
                    'vert-adv-y': 'vertAdvY',
                    vertoriginx: 'vertOriginX',
                    'vert-origin-x': 'vertOriginX',
                    vertoriginy: 'vertOriginY',
                    'vert-origin-y': 'vertOriginY',
                    vhanging: 'vHanging',
                    'v-hanging': 'vHanging',
                    videographic: 'vIdeographic',
                    'v-ideographic': 'vIdeographic',
                    viewbox: 'viewBox',
                    viewtarget: 'viewTarget',
                    visibility: 'visibility',
                    vmathematical: 'vMathematical',
                    'v-mathematical': 'vMathematical',
                    vocab: 'vocab',
                    widths: 'widths',
                    wordspacing: 'wordSpacing',
                    'word-spacing': 'wordSpacing',
                    writingmode: 'writingMode',
                    'writing-mode': 'writingMode',
                    x1: 'x1',
                    x2: 'x2',
                    x: 'x',
                    xchannelselector: 'xChannelSelector',
                    xheight: 'xHeight',
                    'x-height': 'xHeight',
                    xlinkactuate: 'xlinkActuate',
                    'xlink:actuate': 'xlinkActuate',
                    xlinkarcrole: 'xlinkArcrole',
                    'xlink:arcrole': 'xlinkArcrole',
                    xlinkhref: 'xlinkHref',
                    'xlink:href': 'xlinkHref',
                    xlinkrole: 'xlinkRole',
                    'xlink:role': 'xlinkRole',
                    xlinkshow: 'xlinkShow',
                    'xlink:show': 'xlinkShow',
                    xlinktitle: 'xlinkTitle',
                    'xlink:title': 'xlinkTitle',
                    xlinktype: 'xlinkType',
                    'xlink:type': 'xlinkType',
                    xmlbase: 'xmlBase',
                    'xml:base': 'xmlBase',
                    xmllang: 'xmlLang',
                    'xml:lang': 'xmlLang',
                    xmlns: 'xmlns',
                    'xml:space': 'xmlSpace',
                    xmlnsxlink: 'xmlnsXlink',
                    'xmlns:xlink': 'xmlnsXlink',
                    xmlspace: 'xmlSpace',
                    y1: 'y1',
                    y2: 'y2',
                    y: 'y',
                    ychannelselector: 'yChannelSelector',
                    z: 'z',
                    zoomandpan: 'zoomAndPan'
                };
                var possibleStandardNames_1 = possibleStandardNames$1;
                {
                    var warning$16 = require$$0;
                    var _require$7 = ReactGlobalSharedState_1, ReactComponentTreeHook$3 = _require$7.ReactComponentTreeHook, ReactDebugCurrentFrame$3 = _require$7.ReactDebugCurrentFrame;
                    var getStackAddendumByID$2 = ReactComponentTreeHook$3.getStackAddendumByID;
                }
                function getStackAddendum$2(debugID) {
                    if (debugID != null) {
                        return getStackAddendumByID$2(debugID);
                    } else {
                        var stack = ReactDebugCurrentFrame$3.getStackAddendum();
                        return stack != null ? stack : '';
                    }
                }
                {
                    var warnedProperties$1 = {};
                    var hasOwnProperty$1 = Object.prototype.hasOwnProperty;
                    var EVENT_NAME_REGEX = /^on[A-Z]/;
                    var rARIA$1 = new RegExp('^(aria)-[' + DOMProperty_1.ATTRIBUTE_NAME_CHAR + ']*$');
                    var rARIACamel$1 = new RegExp('^(aria)[A-Z][' + DOMProperty_1.ATTRIBUTE_NAME_CHAR + ']*$');
                    var possibleStandardNames = possibleStandardNames_1;
                    var validateProperty$1 = function (tagName, name, value, debugID) {
                        if (hasOwnProperty$1.call(warnedProperties$1, name) && warnedProperties$1[name]) {
                            return true;
                        }
                        if (EventPluginRegistry_1.registrationNameModules.hasOwnProperty(name)) {
                            return true;
                        }
                        if (EventPluginRegistry_1.plugins.length === 0 && EVENT_NAME_REGEX.test(name)) {
                            return true;
                        }
                        var lowerCasedName = name.toLowerCase();
                        var registrationName = EventPluginRegistry_1.possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? EventPluginRegistry_1.possibleRegistrationNames[lowerCasedName] : null;
                        if (registrationName != null) {
                            warning$16(false, 'Invalid event handler property `%s`. Did you mean `%s`?%s', name, registrationName, getStackAddendum$2(debugID));
                            warnedProperties$1[name] = true;
                            return true;
                        }
                        if (lowerCasedName.indexOf('on') === 0) {
                            warning$16(false, 'Unknown event handler property `%s`. It will be ignored.%s', name, getStackAddendum$2(debugID));
                            warnedProperties$1[name] = true;
                            return true;
                        }
                        if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
                            return true;
                        }
                        if (lowerCasedName === 'onfocusin' || lowerCasedName === 'onfocusout') {
                            warning$16(false, 'React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.');
                            warnedProperties$1[name] = true;
                            return true;
                        }
                        if (lowerCasedName === 'innerhtml') {
                            warning$16(false, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.');
                            warnedProperties$1[name] = true;
                            return true;
                        }
                        if (lowerCasedName === 'aria') {
                            warning$16(false, 'The `aria` attribute is reserved for future use in React. ' + 'Pass individual `aria-` attributes instead.');
                            warnedProperties$1[name] = true;
                            return true;
                        }
                        if (lowerCasedName === 'is' && value !== null && value !== undefined && typeof value !== 'string') {
                            warning$16(false, 'Received a `%s` for string attribute `is`. If this is expected, cast ' + 'the value to a string.%s', typeof value, getStackAddendum$2(debugID));
                            warnedProperties$1[name] = true;
                            return true;
                        }
                        if (typeof value === 'number' && isNaN(value)) {
                            warning$16(false, 'Received NaN for numeric attribute `%s`. If this is expected, cast ' + 'the value to a string.%s', name, getStackAddendum$2(debugID));
                            warnedProperties$1[name] = true;
                            return true;
                        }
                        var isReserved = DOMProperty_1.isReservedProp(name);
                        if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                            var standardName = possibleStandardNames[lowerCasedName];
                            if (standardName !== name) {
                                warning$16(false, 'Invalid DOM property `%s`. Did you mean `%s`?%s', name, standardName, getStackAddendum$2(debugID));
                                warnedProperties$1[name] = true;
                                return true;
                            }
                        } else if (!isReserved && name !== lowerCasedName) {
                            warning$16(false, 'React does not recognize the `%s` prop on a DOM element. If you ' + 'intentionally want it to appear in the DOM as a custom ' + 'attribute, spell it as lowercase `%s` instead. ' + 'If you accidentally passed it from a parent component, remove ' + 'it from the DOM element.%s', name, lowerCasedName, getStackAddendum$2(debugID));
                            warnedProperties$1[name] = true;
                            return true;
                        }
                        if (typeof value === 'boolean') {
                            warning$16(DOMProperty_1.shouldAttributeAcceptBooleanValue(name), 'Received `%s` for non-boolean attribute `%s`. If this is expected, cast ' + 'the value to a string.%s', value, name, getStackAddendum$2(debugID));
                            warnedProperties$1[name] = true;
                            return true;
                        }
                        if (isReserved) {
                            return true;
                        }
                        if (!DOMProperty_1.shouldSetAttribute(name, value)) {
                            warnedProperties$1[name] = true;
                            return false;
                        }
                        return true;
                    };
                }
                var warnUnknownProperties = function (type, props, debugID) {
                    var unknownProps = [];
                    for (var key in props) {
                        var isValid = validateProperty$1(type, key, props[key], debugID);
                        if (!isValid) {
                            unknownProps.push(key);
                        }
                    }
                    var unknownPropString = unknownProps.map(function (prop) {
                        return '`' + prop + '`';
                    }).join(', ');
                    if (unknownProps.length === 1) {
                        warning$16(false, 'Invalid value for prop %s on <%s> tag. Either remove it from the element, ' + 'or pass a string or number value to keep it in the DOM. ' + 'For details, see https://fb.me/react-attribute-behavior%s', unknownPropString, type, getStackAddendum$2(debugID));
                    } else if (unknownProps.length > 1) {
                        warning$16(false, 'Invalid values for props %s on <%s> tag. Either remove them from the element, ' + 'or pass a string or number value to keep them in the DOM. ' + 'For details, see https://fb.me/react-attribute-behavior%s', unknownPropString, type, getStackAddendum$2(debugID));
                    }
                };
                function validateProperties$2(type, props, debugID) {
                    if (isCustomComponent_1(type, props)) {
                        return;
                    }
                    warnUnknownProperties(type, props, debugID);
                }
                var ReactDOMUnknownPropertyHook$1 = {
                    validateProperties: validateProperties$2,
                    onBeforeMountComponent: function (debugID, element) {
                        if (true && element != null && typeof element.type === 'string') {
                            validateProperties$2(element.type, element.props, debugID);
                        }
                    },
                    onBeforeUpdateComponent: function (debugID, element) {
                        if (true && element != null && typeof element.type === 'string') {
                            validateProperties$2(element.type, element.props, debugID);
                        }
                    }
                };
                var ReactDOMUnknownPropertyHook_1 = ReactDOMUnknownPropertyHook$1;
                var getCurrentFiberOwnerName = ReactDebugCurrentFiber_1.getCurrentFiberOwnerName;
                var DOCUMENT_NODE$1 = HTMLNodeType_1.DOCUMENT_NODE;
                var DOCUMENT_FRAGMENT_NODE$1 = HTMLNodeType_1.DOCUMENT_FRAGMENT_NODE;
                {
                    var warning$3 = require$$0;
                    var _require3$1 = ReactDebugCurrentFiber_1, getCurrentFiberStackAddendum = _require3$1.getCurrentFiberStackAddendum;
                    var ReactDOMInvalidARIAHook = ReactDOMInvalidARIAHook_1;
                    var ReactDOMNullInputValuePropHook = ReactDOMNullInputValuePropHook_1;
                    var ReactDOMUnknownPropertyHook = ReactDOMUnknownPropertyHook_1;
                    var validateARIAProperties = ReactDOMInvalidARIAHook.validateProperties;
                    var validateInputProperties = ReactDOMNullInputValuePropHook.validateProperties;
                    var validateUnknownProperties = ReactDOMUnknownPropertyHook.validateProperties;
                }
                var didWarnInvalidHydration = false;
                var didWarnShadyDOM = false;
                var listenTo = ReactBrowserEventEmitter_1.listenTo;
                var registrationNameModules = EventPluginRegistry_1.registrationNameModules;
                var DANGEROUSLY_SET_INNER_HTML = 'dangerouslySetInnerHTML';
                var SUPPRESS_CONTENT_EDITABLE_WARNING = 'suppressContentEditableWarning';
                var CHILDREN = 'children';
                var STYLE = 'style';
                var HTML = '__html';
                var HTML_NAMESPACE$1 = DOMNamespaces.Namespaces.html;
                var getIntrinsicNamespace$1 = DOMNamespaces.getIntrinsicNamespace;
                {
                    var warnedUnknownTags = { time: true };
                    var validatePropertiesInDevelopment = function (type, props) {
                        validateARIAProperties(type, props);
                        validateInputProperties(type, props);
                        validateUnknownProperties(type, props);
                    };
                    var warnForTextDifference = function (serverText, clientText) {
                        if (didWarnInvalidHydration) {
                            return;
                        }
                        didWarnInvalidHydration = true;
                        warning$3(false, 'Text content did not match. Server: "%s" Client: "%s"', serverText, clientText);
                    };
                    var warnForPropDifference = function (propName, serverValue, clientValue) {
                        if (didWarnInvalidHydration) {
                            return;
                        }
                        didWarnInvalidHydration = true;
                        warning$3(false, 'Prop `%s` did not match. Server: %s Client: %s', propName, JSON.stringify(serverValue), JSON.stringify(clientValue));
                    };
                    var warnForExtraAttributes = function (attributeNames) {
                        if (didWarnInvalidHydration) {
                            return;
                        }
                        didWarnInvalidHydration = true;
                        var names = [];
                        attributeNames.forEach(function (name) {
                            names.push(name);
                        });
                        warning$3(false, 'Extra attributes from the server: %s', names);
                    };
                    var warnForInvalidEventListener = function (registrationName, listener) {
                        warning$3(false, 'Expected `%s` listener to be a function, instead got a value of `%s` type.%s', registrationName, typeof listener, getCurrentFiberStackAddendum());
                    };
                    var testDocument;
                    var normalizeHTML = function (parent, html) {
                        if (!testDocument) {
                            testDocument = document.implementation.createHTMLDocument();
                        }
                        var testElement = parent.namespaceURI === HTML_NAMESPACE$1 ? testDocument.createElement(parent.tagName) : testDocument.createElementNS(parent.namespaceURI, parent.tagName);
                        testElement.innerHTML = html;
                        return testElement.innerHTML;
                    };
                }
                function ensureListeningTo(rootContainerElement, registrationName) {
                    var isDocumentOrFragment = rootContainerElement.nodeType === DOCUMENT_NODE$1 || rootContainerElement.nodeType === DOCUMENT_FRAGMENT_NODE$1;
                    var doc = isDocumentOrFragment ? rootContainerElement : rootContainerElement.ownerDocument;
                    listenTo(registrationName, doc);
                }
                function getOwnerDocumentFromRootContainer(rootContainerElement) {
                    return rootContainerElement.nodeType === DOCUMENT_NODE$1 ? rootContainerElement : rootContainerElement.ownerDocument;
                }
                var mediaEvents = {
                    topAbort: 'abort',
                    topCanPlay: 'canplay',
                    topCanPlayThrough: 'canplaythrough',
                    topDurationChange: 'durationchange',
                    topEmptied: 'emptied',
                    topEncrypted: 'encrypted',
                    topEnded: 'ended',
                    topError: 'error',
                    topLoadedData: 'loadeddata',
                    topLoadedMetadata: 'loadedmetadata',
                    topLoadStart: 'loadstart',
                    topPause: 'pause',
                    topPlay: 'play',
                    topPlaying: 'playing',
                    topProgress: 'progress',
                    topRateChange: 'ratechange',
                    topSeeked: 'seeked',
                    topSeeking: 'seeking',
                    topStalled: 'stalled',
                    topSuspend: 'suspend',
                    topTimeUpdate: 'timeupdate',
                    topVolumeChange: 'volumechange',
                    topWaiting: 'waiting'
                };
                function trapClickOnNonInteractiveElement(node) {
                    node.onclick = emptyFunction;
                }
                function setInitialDOMProperties(domElement, rootContainerElement, nextProps, isCustomComponentTag) {
                    for (var propKey in nextProps) {
                        if (!nextProps.hasOwnProperty(propKey)) {
                            continue;
                        }
                        var nextProp = nextProps[propKey];
                        if (propKey === STYLE) {
                            {
                                if (nextProp) {
                                    Object.freeze(nextProp);
                                }
                            }
                            CSSPropertyOperations_1.setValueForStyles(domElement, nextProp);
                        } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                            var nextHtml = nextProp ? nextProp[HTML] : undefined;
                            if (nextHtml != null) {
                                setInnerHTML_1(domElement, nextHtml);
                            }
                        } else if (propKey === CHILDREN) {
                            if (typeof nextProp === 'string') {
                                setTextContent_1(domElement, nextProp);
                            } else if (typeof nextProp === 'number') {
                                setTextContent_1(domElement, '' + nextProp);
                            }
                        } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING) {
                        } else if (registrationNameModules.hasOwnProperty(propKey)) {
                            if (nextProp != null) {
                                if (true && typeof nextProp !== 'function') {
                                    warnForInvalidEventListener(propKey, nextProp);
                                }
                                ensureListeningTo(rootContainerElement, propKey);
                            }
                        } else if (isCustomComponentTag) {
                            DOMPropertyOperations_1.setValueForAttribute(domElement, propKey, nextProp);
                        } else if (nextProp != null) {
                            DOMPropertyOperations_1.setValueForProperty(domElement, propKey, nextProp);
                        }
                    }
                }
                function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
                    for (var i = 0; i < updatePayload.length; i += 2) {
                        var propKey = updatePayload[i];
                        var propValue = updatePayload[i + 1];
                        if (propKey === STYLE) {
                            CSSPropertyOperations_1.setValueForStyles(domElement, propValue);
                        } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                            setInnerHTML_1(domElement, propValue);
                        } else if (propKey === CHILDREN) {
                            setTextContent_1(domElement, propValue);
                        } else if (isCustomComponentTag) {
                            if (propValue != null) {
                                DOMPropertyOperations_1.setValueForAttribute(domElement, propKey, propValue);
                            } else {
                                DOMPropertyOperations_1.deleteValueForAttribute(domElement, propKey);
                            }
                        } else if (propValue != null) {
                            DOMPropertyOperations_1.setValueForProperty(domElement, propKey, propValue);
                        } else {
                            DOMPropertyOperations_1.deleteValueForProperty(domElement, propKey);
                        }
                    }
                }
                var ReactDOMFiberComponent = {
                    createElement: function (type, props, rootContainerElement, parentNamespace) {
                        var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
                        var domElement;
                        var namespaceURI = parentNamespace;
                        if (namespaceURI === HTML_NAMESPACE$1) {
                            namespaceURI = getIntrinsicNamespace$1(type);
                        }
                        if (namespaceURI === HTML_NAMESPACE$1) {
                            {
                                var isCustomComponentTag = isCustomComponent_1(type, props);
                                warning$3(isCustomComponentTag || type === type.toLowerCase(), '<%s /> is using uppercase HTML. Always use lowercase HTML tags ' + 'in React.', type);
                            }
                            if (type === 'script') {
                                var div = ownerDocument.createElement('div');
                                div.innerHTML = '<script><' + '/script>';
                                var firstChild = div.firstChild;
                                domElement = div.removeChild(firstChild);
                            } else if (typeof props.is === 'string') {
                                domElement = ownerDocument.createElement(type, { is: props.is });
                            } else {
                                domElement = ownerDocument.createElement(type);
                            }
                        } else {
                            domElement = ownerDocument.createElementNS(namespaceURI, type);
                        }
                        {
                            if (namespaceURI === HTML_NAMESPACE$1) {
                                if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === '[object HTMLUnknownElement]' && !Object.prototype.hasOwnProperty.call(warnedUnknownTags, type)) {
                                    warnedUnknownTags[type] = true;
                                    warning$3(false, 'The tag <%s> is unrecognized in this browser. ' + 'If you meant to render a React component, start its name with ' + 'an uppercase letter.', type);
                                }
                            }
                        }
                        return domElement;
                    },
                    createTextNode: function (text, rootContainerElement) {
                        return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
                    },
                    setInitialProperties: function (domElement, tag, rawProps, rootContainerElement) {
                        var isCustomComponentTag = isCustomComponent_1(tag, rawProps);
                        {
                            validatePropertiesInDevelopment(tag, rawProps);
                            if (isCustomComponentTag && !didWarnShadyDOM && domElement.shadyRoot) {
                                warning$3(false, '%s is using shady DOM. Using shady DOM with React can ' + 'cause things to break subtly.', getCurrentFiberOwnerName() || 'A component');
                                didWarnShadyDOM = true;
                            }
                        }
                        var props;
                        switch (tag) {
                        case 'iframe':
                        case 'object':
                            ReactBrowserEventEmitter_1.trapBubbledEvent('topLoad', 'load', domElement);
                            props = rawProps;
                            break;
                        case 'video':
                        case 'audio':
                            for (var event in mediaEvents) {
                                if (mediaEvents.hasOwnProperty(event)) {
                                    ReactBrowserEventEmitter_1.trapBubbledEvent(event, mediaEvents[event], domElement);
                                }
                            }
                            props = rawProps;
                            break;
                        case 'source':
                            ReactBrowserEventEmitter_1.trapBubbledEvent('topError', 'error', domElement);
                            props = rawProps;
                            break;
                        case 'img':
                        case 'image':
                            ReactBrowserEventEmitter_1.trapBubbledEvent('topError', 'error', domElement);
                            ReactBrowserEventEmitter_1.trapBubbledEvent('topLoad', 'load', domElement);
                            props = rawProps;
                            break;
                        case 'form':
                            ReactBrowserEventEmitter_1.trapBubbledEvent('topReset', 'reset', domElement);
                            ReactBrowserEventEmitter_1.trapBubbledEvent('topSubmit', 'submit', domElement);
                            props = rawProps;
                            break;
                        case 'details':
                            ReactBrowserEventEmitter_1.trapBubbledEvent('topToggle', 'toggle', domElement);
                            props = rawProps;
                            break;
                        case 'input':
                            ReactDOMFiberInput.initWrapperState(domElement, rawProps);
                            props = ReactDOMFiberInput.getHostProps(domElement, rawProps);
                            ReactBrowserEventEmitter_1.trapBubbledEvent('topInvalid', 'invalid', domElement);
                            ensureListeningTo(rootContainerElement, 'onChange');
                            break;
                        case 'option':
                            ReactDOMFiberOption.validateProps(domElement, rawProps);
                            props = ReactDOMFiberOption.getHostProps(domElement, rawProps);
                            break;
                        case 'select':
                            ReactDOMFiberSelect.initWrapperState(domElement, rawProps);
                            props = ReactDOMFiberSelect.getHostProps(domElement, rawProps);
                            ReactBrowserEventEmitter_1.trapBubbledEvent('topInvalid', 'invalid', domElement);
                            ensureListeningTo(rootContainerElement, 'onChange');
                            break;
                        case 'textarea':
                            ReactDOMFiberTextarea.initWrapperState(domElement, rawProps);
                            props = ReactDOMFiberTextarea.getHostProps(domElement, rawProps);
                            ReactBrowserEventEmitter_1.trapBubbledEvent('topInvalid', 'invalid', domElement);
                            ensureListeningTo(rootContainerElement, 'onChange');
                            break;
                        default:
                            props = rawProps;
                        }
                        assertValidProps_1(tag, props, getCurrentFiberOwnerName);
                        setInitialDOMProperties(domElement, rootContainerElement, props, isCustomComponentTag);
                        switch (tag) {
                        case 'input':
                            inputValueTracking_1.track(domElement);
                            ReactDOMFiberInput.postMountWrapper(domElement, rawProps);
                            break;
                        case 'textarea':
                            inputValueTracking_1.track(domElement);
                            ReactDOMFiberTextarea.postMountWrapper(domElement, rawProps);
                            break;
                        case 'option':
                            ReactDOMFiberOption.postMountWrapper(domElement, rawProps);
                            break;
                        case 'select':
                            ReactDOMFiberSelect.postMountWrapper(domElement, rawProps);
                            break;
                        default:
                            if (typeof props.onClick === 'function') {
                                trapClickOnNonInteractiveElement(domElement);
                            }
                            break;
                        }
                    },
                    diffProperties: function (domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
                        {
                            validatePropertiesInDevelopment(tag, nextRawProps);
                        }
                        var updatePayload = null;
                        var lastProps;
                        var nextProps;
                        switch (tag) {
                        case 'input':
                            lastProps = ReactDOMFiberInput.getHostProps(domElement, lastRawProps);
                            nextProps = ReactDOMFiberInput.getHostProps(domElement, nextRawProps);
                            updatePayload = [];
                            break;
                        case 'option':
                            lastProps = ReactDOMFiberOption.getHostProps(domElement, lastRawProps);
                            nextProps = ReactDOMFiberOption.getHostProps(domElement, nextRawProps);
                            updatePayload = [];
                            break;
                        case 'select':
                            lastProps = ReactDOMFiberSelect.getHostProps(domElement, lastRawProps);
                            nextProps = ReactDOMFiberSelect.getHostProps(domElement, nextRawProps);
                            updatePayload = [];
                            break;
                        case 'textarea':
                            lastProps = ReactDOMFiberTextarea.getHostProps(domElement, lastRawProps);
                            nextProps = ReactDOMFiberTextarea.getHostProps(domElement, nextRawProps);
                            updatePayload = [];
                            break;
                        default:
                            lastProps = lastRawProps;
                            nextProps = nextRawProps;
                            if (typeof lastProps.onClick !== 'function' && typeof nextProps.onClick === 'function') {
                                trapClickOnNonInteractiveElement(domElement);
                            }
                            break;
                        }
                        assertValidProps_1(tag, nextProps, getCurrentFiberOwnerName);
                        var propKey;
                        var styleName;
                        var styleUpdates = null;
                        for (propKey in lastProps) {
                            if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
                                continue;
                            }
                            if (propKey === STYLE) {
                                var lastStyle = lastProps[propKey];
                                for (styleName in lastStyle) {
                                    if (lastStyle.hasOwnProperty(styleName)) {
                                        if (!styleUpdates) {
                                            styleUpdates = {};
                                        }
                                        styleUpdates[styleName] = '';
                                    }
                                }
                            } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN) {
                            } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING) {
                            } else if (registrationNameModules.hasOwnProperty(propKey)) {
                                if (!updatePayload) {
                                    updatePayload = [];
                                }
                            } else {
                                (updatePayload = updatePayload || []).push(propKey, null);
                            }
                        }
                        for (propKey in nextProps) {
                            var nextProp = nextProps[propKey];
                            var lastProp = lastProps != null ? lastProps[propKey] : undefined;
                            if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
                                continue;
                            }
                            if (propKey === STYLE) {
                                {
                                    if (nextProp) {
                                        Object.freeze(nextProp);
                                    }
                                }
                                if (lastProp) {
                                    for (styleName in lastProp) {
                                        if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                                            if (!styleUpdates) {
                                                styleUpdates = {};
                                            }
                                            styleUpdates[styleName] = '';
                                        }
                                    }
                                    for (styleName in nextProp) {
                                        if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                                            if (!styleUpdates) {
                                                styleUpdates = {};
                                            }
                                            styleUpdates[styleName] = nextProp[styleName];
                                        }
                                    }
                                } else {
                                    if (!styleUpdates) {
                                        if (!updatePayload) {
                                            updatePayload = [];
                                        }
                                        updatePayload.push(propKey, styleUpdates);
                                    }
                                    styleUpdates = nextProp;
                                }
                            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                                var nextHtml = nextProp ? nextProp[HTML] : undefined;
                                var lastHtml = lastProp ? lastProp[HTML] : undefined;
                                if (nextHtml != null) {
                                    if (lastHtml !== nextHtml) {
                                        (updatePayload = updatePayload || []).push(propKey, '' + nextHtml);
                                    }
                                } else {
                                }
                            } else if (propKey === CHILDREN) {
                                if (lastProp !== nextProp && (typeof nextProp === 'string' || typeof nextProp === 'number')) {
                                    (updatePayload = updatePayload || []).push(propKey, '' + nextProp);
                                }
                            } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING) {
                            } else if (registrationNameModules.hasOwnProperty(propKey)) {
                                if (nextProp != null) {
                                    if (true && typeof nextProp !== 'function') {
                                        warnForInvalidEventListener(propKey, nextProp);
                                    }
                                    ensureListeningTo(rootContainerElement, propKey);
                                }
                                if (!updatePayload && lastProp !== nextProp) {
                                    updatePayload = [];
                                }
                            } else {
                                (updatePayload = updatePayload || []).push(propKey, nextProp);
                            }
                        }
                        if (styleUpdates) {
                            (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
                        }
                        return updatePayload;
                    },
                    updateProperties: function (domElement, updatePayload, tag, lastRawProps, nextRawProps) {
                        var wasCustomComponentTag = isCustomComponent_1(tag, lastRawProps);
                        var isCustomComponentTag = isCustomComponent_1(tag, nextRawProps);
                        updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
                        switch (tag) {
                        case 'input':
                            ReactDOMFiberInput.updateWrapper(domElement, nextRawProps);
                            inputValueTracking_1.updateValueIfChanged(domElement);
                            break;
                        case 'textarea':
                            ReactDOMFiberTextarea.updateWrapper(domElement, nextRawProps);
                            break;
                        case 'select':
                            ReactDOMFiberSelect.postUpdateWrapper(domElement, nextRawProps);
                            break;
                        }
                    },
                    diffHydratedProperties: function (domElement, tag, rawProps, parentNamespace, rootContainerElement) {
                        {
                            var isCustomComponentTag = isCustomComponent_1(tag, rawProps);
                            validatePropertiesInDevelopment(tag, rawProps);
                            if (isCustomComponentTag && !didWarnShadyDOM && domElement.shadyRoot) {
                                warning$3(false, '%s is using shady DOM. Using shady DOM with React can ' + 'cause things to break subtly.', getCurrentFiberOwnerName() || 'A component');
                                didWarnShadyDOM = true;
                            }
                        }
                        switch (tag) {
                        case 'iframe':
                        case 'object':
                            ReactBrowserEventEmitter_1.trapBubbledEvent('topLoad', 'load', domElement);
                            break;
                        case 'video':
                        case 'audio':
                            for (var event in mediaEvents) {
                                if (mediaEvents.hasOwnProperty(event)) {
                                    ReactBrowserEventEmitter_1.trapBubbledEvent(event, mediaEvents[event], domElement);
                                }
                            }
                            break;
                        case 'source':
                            ReactBrowserEventEmitter_1.trapBubbledEvent('topError', 'error', domElement);
                            break;
                        case 'img':
                        case 'image':
                            ReactBrowserEventEmitter_1.trapBubbledEvent('topError', 'error', domElement);
                            ReactBrowserEventEmitter_1.trapBubbledEvent('topLoad', 'load', domElement);
                            break;
                        case 'form':
                            ReactBrowserEventEmitter_1.trapBubbledEvent('topReset', 'reset', domElement);
                            ReactBrowserEventEmitter_1.trapBubbledEvent('topSubmit', 'submit', domElement);
                            break;
                        case 'details':
                            ReactBrowserEventEmitter_1.trapBubbledEvent('topToggle', 'toggle', domElement);
                            break;
                        case 'input':
                            ReactDOMFiberInput.initWrapperState(domElement, rawProps);
                            ReactBrowserEventEmitter_1.trapBubbledEvent('topInvalid', 'invalid', domElement);
                            ensureListeningTo(rootContainerElement, 'onChange');
                            break;
                        case 'option':
                            ReactDOMFiberOption.validateProps(domElement, rawProps);
                            break;
                        case 'select':
                            ReactDOMFiberSelect.initWrapperState(domElement, rawProps);
                            ReactBrowserEventEmitter_1.trapBubbledEvent('topInvalid', 'invalid', domElement);
                            ensureListeningTo(rootContainerElement, 'onChange');
                            break;
                        case 'textarea':
                            ReactDOMFiberTextarea.initWrapperState(domElement, rawProps);
                            ReactBrowserEventEmitter_1.trapBubbledEvent('topInvalid', 'invalid', domElement);
                            ensureListeningTo(rootContainerElement, 'onChange');
                            break;
                        }
                        assertValidProps_1(tag, rawProps, getCurrentFiberOwnerName);
                        {
                            var extraAttributeNames = new Set();
                            var attributes = domElement.attributes;
                            for (var i = 0; i < attributes.length; i++) {
                                var name = attributes[i].name.toLowerCase();
                                switch (name) {
                                case 'data-reactroot':
                                    break;
                                case 'value':
                                    break;
                                case 'checked':
                                    break;
                                case 'selected':
                                    break;
                                default:
                                    extraAttributeNames.add(attributes[i].name);
                                }
                            }
                        }
                        var updatePayload = null;
                        for (var propKey in rawProps) {
                            if (!rawProps.hasOwnProperty(propKey)) {
                                continue;
                            }
                            var nextProp = rawProps[propKey];
                            if (propKey === CHILDREN) {
                                if (typeof nextProp === 'string') {
                                    if (domElement.textContent !== nextProp) {
                                        {
                                            warnForTextDifference(domElement.textContent, nextProp);
                                        }
                                        updatePayload = [
                                            CHILDREN,
                                            nextProp
                                        ];
                                    }
                                } else if (typeof nextProp === 'number') {
                                    if (domElement.textContent !== '' + nextProp) {
                                        {
                                            warnForTextDifference(domElement.textContent, nextProp);
                                        }
                                        updatePayload = [
                                            CHILDREN,
                                            '' + nextProp
                                        ];
                                    }
                                }
                            } else if (registrationNameModules.hasOwnProperty(propKey)) {
                                if (nextProp != null) {
                                    if (true && typeof nextProp !== 'function') {
                                        warnForInvalidEventListener(propKey, nextProp);
                                    }
                                    ensureListeningTo(rootContainerElement, propKey);
                                }
                            } else {
                                var serverValue;
                                var propertyInfo;
                                if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === 'value' || propKey === 'checked' || propKey === 'selected') {
                                } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                                    var rawHtml = nextProp ? nextProp[HTML] || '' : '';
                                    var serverHTML = domElement.innerHTML;
                                    var expectedHTML = normalizeHTML(domElement, rawHtml);
                                    if (expectedHTML !== serverHTML) {
                                        warnForPropDifference(propKey, serverHTML, expectedHTML);
                                    }
                                } else if (propKey === STYLE) {
                                    extraAttributeNames['delete'](propKey);
                                    var expectedStyle = CSSPropertyOperations_1.createDangerousStringForStyles(nextProp);
                                    serverValue = domElement.getAttribute('style');
                                    if (expectedStyle !== serverValue) {
                                        warnForPropDifference(propKey, serverValue, expectedStyle);
                                    }
                                } else if (isCustomComponentTag) {
                                    extraAttributeNames['delete'](propKey.toLowerCase());
                                    serverValue = DOMPropertyOperations_1.getValueForAttribute(domElement, propKey, nextProp);
                                    if (nextProp !== serverValue) {
                                        warnForPropDifference(propKey, serverValue, nextProp);
                                    }
                                } else if (DOMProperty_1.shouldSetAttribute(propKey, nextProp)) {
                                    if (propertyInfo = DOMProperty_1.getPropertyInfo(propKey)) {
                                        extraAttributeNames['delete'](propertyInfo.attributeName);
                                        serverValue = DOMPropertyOperations_1.getValueForProperty(domElement, propKey, nextProp);
                                    } else {
                                        var ownNamespace = parentNamespace;
                                        if (ownNamespace === HTML_NAMESPACE$1) {
                                            ownNamespace = getIntrinsicNamespace$1(tag);
                                        }
                                        if (ownNamespace === HTML_NAMESPACE$1) {
                                            extraAttributeNames['delete'](propKey.toLowerCase());
                                        } else {
                                            extraAttributeNames['delete'](propKey);
                                        }
                                        serverValue = DOMPropertyOperations_1.getValueForAttribute(domElement, propKey, nextProp);
                                    }
                                    if (nextProp !== serverValue) {
                                        warnForPropDifference(propKey, serverValue, nextProp);
                                    }
                                }
                            }
                        }
                        {
                            if (extraAttributeNames.size > 0) {
                                warnForExtraAttributes(extraAttributeNames);
                            }
                        }
                        switch (tag) {
                        case 'input':
                            inputValueTracking_1.track(domElement);
                            ReactDOMFiberInput.postMountWrapper(domElement, rawProps);
                            break;
                        case 'textarea':
                            inputValueTracking_1.track(domElement);
                            ReactDOMFiberTextarea.postMountWrapper(domElement, rawProps);
                            break;
                        case 'select':
                        case 'option':
                            break;
                        default:
                            if (typeof rawProps.onClick === 'function') {
                                trapClickOnNonInteractiveElement(domElement);
                            }
                            break;
                        }
                        return updatePayload;
                    },
                    diffHydratedText: function (textNode, text) {
                        var isDifferent = textNode.nodeValue !== text;
                        {
                            if (isDifferent) {
                                warnForTextDifference(textNode.nodeValue, text);
                            }
                        }
                        return isDifferent;
                    },
                    warnForDeletedHydratableElement: function (parentNode, child) {
                        {
                            if (didWarnInvalidHydration) {
                                return;
                            }
                            didWarnInvalidHydration = true;
                            warning$3(false, 'Did not expect server HTML to contain a <%s> in <%s>.', child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
                        }
                    },
                    warnForDeletedHydratableText: function (parentNode, child) {
                        {
                            if (didWarnInvalidHydration) {
                                return;
                            }
                            didWarnInvalidHydration = true;
                            warning$3(false, 'Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
                        }
                    },
                    warnForInsertedHydratedElement: function (parentNode, tag, props) {
                        {
                            if (didWarnInvalidHydration) {
                                return;
                            }
                            didWarnInvalidHydration = true;
                            warning$3(false, 'Expected server HTML to contain a matching <%s> in <%s>.', tag, parentNode.nodeName.toLowerCase());
                        }
                    },
                    warnForInsertedHydratedText: function (parentNode, text) {
                        {
                            if (text === '') {
                                return;
                            }
                            if (didWarnInvalidHydration) {
                                return;
                            }
                            didWarnInvalidHydration = true;
                            warning$3(false, 'Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
                        }
                    },
                    restoreControlledState: function (domElement, tag, props) {
                        switch (tag) {
                        case 'input':
                            ReactDOMFiberInput.restoreControlledState(domElement, props);
                            return;
                        case 'textarea':
                            ReactDOMFiberTextarea.restoreControlledState(domElement, props);
                            return;
                        case 'select':
                            ReactDOMFiberSelect.restoreControlledState(domElement, props);
                            return;
                        }
                    }
                };
                var ReactDOMFiberComponent_1 = ReactDOMFiberComponent;
                {
                    var warning$17 = require$$0;
                    if (ExecutionEnvironment.canUseDOM && typeof requestAnimationFrame !== 'function') {
                        warning$17(false, 'React depends on requestAnimationFrame. Make sure that you load a ' + 'polyfill in older browsers. http://fb.me/react-polyfills');
                    }
                }
                var rIC = void 0;
                if (!ExecutionEnvironment.canUseDOM) {
                    rIC = function (frameCallback) {
                        setTimeout(function () {
                            frameCallback({
                                timeRemaining: function () {
                                    return Infinity;
                                }
                            });
                        });
                        return 0;
                    };
                } else if (typeof requestIdleCallback !== 'function') {
                    var scheduledRAFCallback = null;
                    var scheduledRICCallback = null;
                    var isIdleScheduled = false;
                    var isAnimationFrameScheduled = false;
                    var frameDeadline = 0;
                    var previousFrameTime = 33;
                    var activeFrameTime = 33;
                    var frameDeadlineObject = {
                        timeRemaining: typeof performance === 'object' && typeof performance.now === 'function' ? function () {
                            return frameDeadline - performance.now();
                        } : function () {
                            return frameDeadline - Date.now();
                        }
                    };
                    var messageKey = '__reactIdleCallback$' + Math.random().toString(36).slice(2);
                    var idleTick = function (event) {
                        if (event.source !== window || event.data !== messageKey) {
                            return;
                        }
                        isIdleScheduled = false;
                        var callback = scheduledRICCallback;
                        scheduledRICCallback = null;
                        if (callback !== null) {
                            callback(frameDeadlineObject);
                        }
                    };
                    window.addEventListener('message', idleTick, false);
                    var animationTick = function (rafTime) {
                        isAnimationFrameScheduled = false;
                        var nextFrameTime = rafTime - frameDeadline + activeFrameTime;
                        if (nextFrameTime < activeFrameTime && previousFrameTime < activeFrameTime) {
                            if (nextFrameTime < 8) {
                                nextFrameTime = 8;
                            }
                            activeFrameTime = nextFrameTime < previousFrameTime ? previousFrameTime : nextFrameTime;
                        } else {
                            previousFrameTime = nextFrameTime;
                        }
                        frameDeadline = rafTime + activeFrameTime;
                        if (!isIdleScheduled) {
                            isIdleScheduled = true;
                            window.postMessage(messageKey, '*');
                        }
                        var callback = scheduledRAFCallback;
                        scheduledRAFCallback = null;
                        if (callback !== null) {
                            callback(rafTime);
                        }
                    };
                    rIC = function (callback) {
                        scheduledRICCallback = callback;
                        if (!isAnimationFrameScheduled) {
                            isAnimationFrameScheduled = true;
                            requestAnimationFrame(animationTick);
                        }
                        return 0;
                    };
                } else {
                    rIC = requestIdleCallback;
                }
                var rIC_1 = rIC;
                var ReactDOMFrameScheduling = { rIC: rIC_1 };
                var ReactFeatureFlags = { enableAsyncSubtreeAPI: true };
                var ReactFeatureFlags_1 = ReactFeatureFlags;
                var ReactPriorityLevel = {
                    NoWork: 0,
                    SynchronousPriority: 1,
                    TaskPriority: 2,
                    HighPriority: 3,
                    LowPriority: 4,
                    OffscreenPriority: 5
                };
                var CallbackEffect = ReactTypeOfSideEffect.Callback;
                var NoWork = ReactPriorityLevel.NoWork;
                var SynchronousPriority = ReactPriorityLevel.SynchronousPriority;
                var TaskPriority = ReactPriorityLevel.TaskPriority;
                var ClassComponent$2 = ReactTypeOfWork.ClassComponent;
                var HostRoot$2 = ReactTypeOfWork.HostRoot;
                {
                    var warning$19 = require$$0;
                }
                var _queue1 = void 0;
                var _queue2 = void 0;
                function comparePriority(a, b) {
                    if ((a === TaskPriority || a === SynchronousPriority) && (b === TaskPriority || b === SynchronousPriority)) {
                        return 0;
                    }
                    if (a === NoWork && b !== NoWork) {
                        return -255;
                    }
                    if (a !== NoWork && b === NoWork) {
                        return 255;
                    }
                    return a - b;
                }
                function createUpdateQueue() {
                    var queue = {
                        first: null,
                        last: null,
                        hasForceUpdate: false,
                        callbackList: null
                    };
                    {
                        queue.isProcessing = false;
                    }
                    return queue;
                }
                function cloneUpdate(update) {
                    return {
                        priorityLevel: update.priorityLevel,
                        partialState: update.partialState,
                        callback: update.callback,
                        isReplace: update.isReplace,
                        isForced: update.isForced,
                        isTopLevelUnmount: update.isTopLevelUnmount,
                        next: null
                    };
                }
                function insertUpdateIntoQueue(queue, update, insertAfter, insertBefore) {
                    if (insertAfter !== null) {
                        insertAfter.next = update;
                    } else {
                        update.next = queue.first;
                        queue.first = update;
                    }
                    if (insertBefore !== null) {
                        update.next = insertBefore;
                    } else {
                        queue.last = update;
                    }
                }
                function findInsertionPosition(queue, update) {
                    var priorityLevel = update.priorityLevel;
                    var insertAfter = null;
                    var insertBefore = null;
                    if (queue.last !== null && comparePriority(queue.last.priorityLevel, priorityLevel) <= 0) {
                        insertAfter = queue.last;
                    } else {
                        insertBefore = queue.first;
                        while (insertBefore !== null && comparePriority(insertBefore.priorityLevel, priorityLevel) <= 0) {
                            insertAfter = insertBefore;
                            insertBefore = insertBefore.next;
                        }
                    }
                    return insertAfter;
                }
                function ensureUpdateQueues(fiber) {
                    var alternateFiber = fiber.alternate;
                    var queue1 = fiber.updateQueue;
                    if (queue1 === null) {
                        queue1 = fiber.updateQueue = createUpdateQueue();
                    }
                    var queue2 = void 0;
                    if (alternateFiber !== null) {
                        queue2 = alternateFiber.updateQueue;
                        if (queue2 === null) {
                            queue2 = alternateFiber.updateQueue = createUpdateQueue();
                        }
                    } else {
                        queue2 = null;
                    }
                    _queue1 = queue1;
                    _queue2 = queue2 !== queue1 ? queue2 : null;
                }
                function insertUpdate(fiber, update) {
                    ensureUpdateQueues(fiber);
                    var queue1 = _queue1;
                    var queue2 = _queue2;
                    {
                        if (queue1.isProcessing || queue2 !== null && queue2.isProcessing) {
                            warning$19(false, 'An update (setState, replaceState, or forceUpdate) was scheduled ' + 'from inside an update function. Update functions should be pure, ' + 'with zero side-effects. Consider using componentDidUpdate or a ' + 'callback.');
                        }
                    }
                    var insertAfter1 = findInsertionPosition(queue1, update);
                    var insertBefore1 = insertAfter1 !== null ? insertAfter1.next : queue1.first;
                    if (queue2 === null) {
                        insertUpdateIntoQueue(queue1, update, insertAfter1, insertBefore1);
                        return null;
                    }
                    var insertAfter2 = findInsertionPosition(queue2, update);
                    var insertBefore2 = insertAfter2 !== null ? insertAfter2.next : queue2.first;
                    insertUpdateIntoQueue(queue1, update, insertAfter1, insertBefore1);
                    if (insertBefore1 === insertBefore2 && insertBefore1 !== null || insertAfter1 === insertAfter2 && insertAfter1 !== null) {
                        if (insertAfter2 === null) {
                            queue2.first = update;
                        }
                        if (insertBefore2 === null) {
                            queue2.last = null;
                        }
                        return null;
                    } else {
                        var update2 = cloneUpdate(update);
                        insertUpdateIntoQueue(queue2, update2, insertAfter2, insertBefore2);
                        return update2;
                    }
                }
                function addUpdate(fiber, partialState, callback, priorityLevel) {
                    var update = {
                        priorityLevel: priorityLevel,
                        partialState: partialState,
                        callback: callback,
                        isReplace: false,
                        isForced: false,
                        isTopLevelUnmount: false,
                        next: null
                    };
                    insertUpdate(fiber, update);
                }
                var addUpdate_1 = addUpdate;
                function addReplaceUpdate(fiber, state, callback, priorityLevel) {
                    var update = {
                        priorityLevel: priorityLevel,
                        partialState: state,
                        callback: callback,
                        isReplace: true,
                        isForced: false,
                        isTopLevelUnmount: false,
                        next: null
                    };
                    insertUpdate(fiber, update);
                }
                var addReplaceUpdate_1 = addReplaceUpdate;
                function addForceUpdate(fiber, callback, priorityLevel) {
                    var update = {
                        priorityLevel: priorityLevel,
                        partialState: null,
                        callback: callback,
                        isReplace: false,
                        isForced: true,
                        isTopLevelUnmount: false,
                        next: null
                    };
                    insertUpdate(fiber, update);
                }
                var addForceUpdate_1 = addForceUpdate;
                function getUpdatePriority(fiber) {
                    var updateQueue = fiber.updateQueue;
                    if (updateQueue === null) {
                        return NoWork;
                    }
                    if (fiber.tag !== ClassComponent$2 && fiber.tag !== HostRoot$2) {
                        return NoWork;
                    }
                    return updateQueue.first !== null ? updateQueue.first.priorityLevel : NoWork;
                }
                var getUpdatePriority_1 = getUpdatePriority;
                function addTopLevelUpdate$1(fiber, partialState, callback, priorityLevel) {
                    var isTopLevelUnmount = partialState.element === null;
                    var update = {
                        priorityLevel: priorityLevel,
                        partialState: partialState,
                        callback: callback,
                        isReplace: false,
                        isForced: false,
                        isTopLevelUnmount: isTopLevelUnmount,
                        next: null
                    };
                    var update2 = insertUpdate(fiber, update);
                    if (isTopLevelUnmount) {
                        var queue1 = _queue1;
                        var queue2 = _queue2;
                        if (queue1 !== null && update.next !== null) {
                            update.next = null;
                            queue1.last = update;
                        }
                        if (queue2 !== null && update2 !== null && update2.next !== null) {
                            update2.next = null;
                            queue2.last = update;
                        }
                    }
                }
                var addTopLevelUpdate_1 = addTopLevelUpdate$1;
                function getStateFromUpdate(update, instance, prevState, props) {
                    var partialState = update.partialState;
                    if (typeof partialState === 'function') {
                        var updateFn = partialState;
                        return updateFn.call(instance, prevState, props);
                    } else {
                        return partialState;
                    }
                }
                function beginUpdateQueue(current, workInProgress, queue, instance, prevState, props, priorityLevel) {
                    if (current !== null && current.updateQueue === queue) {
                        var currentQueue = queue;
                        queue = workInProgress.updateQueue = {
                            first: currentQueue.first,
                            last: currentQueue.last,
                            callbackList: null,
                            hasForceUpdate: false
                        };
                    }
                    {
                        queue.isProcessing = true;
                    }
                    var callbackList = queue.callbackList;
                    var hasForceUpdate = queue.hasForceUpdate;
                    var state = prevState;
                    var dontMutatePrevState = true;
                    var update = queue.first;
                    while (update !== null && comparePriority(update.priorityLevel, priorityLevel) <= 0) {
                        queue.first = update.next;
                        if (queue.first === null) {
                            queue.last = null;
                        }
                        var _partialState = void 0;
                        if (update.isReplace) {
                            state = getStateFromUpdate(update, instance, state, props);
                            dontMutatePrevState = true;
                        } else {
                            _partialState = getStateFromUpdate(update, instance, state, props);
                            if (_partialState) {
                                if (dontMutatePrevState) {
                                    state = _assign({}, state, _partialState);
                                } else {
                                    state = _assign(state, _partialState);
                                }
                                dontMutatePrevState = false;
                            }
                        }
                        if (update.isForced) {
                            hasForceUpdate = true;
                        }
                        if (update.callback !== null && !(update.isTopLevelUnmount && update.next !== null)) {
                            callbackList = callbackList !== null ? callbackList : [];
                            callbackList.push(update.callback);
                            workInProgress.effectTag |= CallbackEffect;
                        }
                        update = update.next;
                    }
                    queue.callbackList = callbackList;
                    queue.hasForceUpdate = hasForceUpdate;
                    if (queue.first === null && callbackList === null && !hasForceUpdate) {
                        workInProgress.updateQueue = null;
                    }
                    {
                        queue.isProcessing = false;
                    }
                    return state;
                }
                var beginUpdateQueue_1 = beginUpdateQueue;
                function commitCallbacks(finishedWork, queue, context) {
                    var callbackList = queue.callbackList;
                    if (callbackList === null) {
                        return;
                    }
                    queue.callbackList = null;
                    for (var i = 0; i < callbackList.length; i++) {
                        var _callback = callbackList[i];
                        !(typeof _callback === 'function') ? invariant(false, 'Invalid argument passed as callback. Expected a function. Instead received: %s', _callback) : void 0;
                        _callback.call(context);
                    }
                }
                var commitCallbacks_1 = commitCallbacks;
                var ReactFiberUpdateQueue = {
                    addUpdate: addUpdate_1,
                    addReplaceUpdate: addReplaceUpdate_1,
                    addForceUpdate: addForceUpdate_1,
                    getUpdatePriority: getUpdatePriority_1,
                    addTopLevelUpdate: addTopLevelUpdate_1,
                    beginUpdateQueue: beginUpdateQueue_1,
                    commitCallbacks: commitCallbacks_1
                };
                {
                    var warning$21 = require$$0;
                }
                var valueStack = [];
                {
                    var fiberStack = [];
                }
                var index = -1;
                var createCursor$1 = function (defaultValue) {
                    return { current: defaultValue };
                };
                var isEmpty = function () {
                    return index === -1;
                };
                var pop$1 = function (cursor, fiber) {
                    if (index < 0) {
                        {
                            warning$21(false, 'Unexpected pop.');
                        }
                        return;
                    }
                    {
                        if (fiber !== fiberStack[index]) {
                            warning$21(false, 'Unexpected Fiber popped.');
                        }
                    }
                    cursor.current = valueStack[index];
                    valueStack[index] = null;
                    {
                        fiberStack[index] = null;
                    }
                    index--;
                };
                var push$1 = function (cursor, value, fiber) {
                    index++;
                    valueStack[index] = cursor.current;
                    {
                        fiberStack[index] = fiber;
                    }
                    cursor.current = value;
                };
                var reset = function () {
                    while (index > -1) {
                        valueStack[index] = null;
                        {
                            fiberStack[index] = null;
                        }
                        index--;
                    }
                };
                var ReactFiberStack = {
                    createCursor: createCursor$1,
                    isEmpty: isEmpty,
                    pop: pop$1,
                    push: push$1,
                    reset: reset
                };
                var ReactDebugFiberPerf = null;
                {
                    var _require$8 = ReactTypeOfWork, HostRoot$4 = _require$8.HostRoot, HostComponent$4 = _require$8.HostComponent, HostText$2 = _require$8.HostText, HostPortal$1 = _require$8.HostPortal, YieldComponent = _require$8.YieldComponent, Fragment = _require$8.Fragment;
                    var getComponentName$5 = getComponentName_1;
                    var reactEmoji = '\u269B';
                    var warningEmoji = '\u26D4';
                    var supportsUserTiming = typeof performance !== 'undefined' && typeof performance.mark === 'function' && typeof performance.clearMarks === 'function' && typeof performance.measure === 'function' && typeof performance.clearMeasures === 'function';
                    var currentFiber = null;
                    var currentPhase = null;
                    var currentPhaseFiber = null;
                    var isCommitting = false;
                    var hasScheduledUpdateInCurrentCommit = false;
                    var hasScheduledUpdateInCurrentPhase = false;
                    var commitCountInCurrentWorkLoop = 0;
                    var effectCountInCurrentCommit = 0;
                    var labelsInCurrentCommit = new Set();
                    var formatMarkName = function (markName) {
                        return reactEmoji + ' ' + markName;
                    };
                    var formatLabel = function (label, warning) {
                        var prefix = warning ? warningEmoji + ' ' : reactEmoji + ' ';
                        var suffix = warning ? ' Warning: ' + warning : '';
                        return '' + prefix + label + suffix;
                    };
                    var beginMark = function (markName) {
                        performance.mark(formatMarkName(markName));
                    };
                    var clearMark = function (markName) {
                        performance.clearMarks(formatMarkName(markName));
                    };
                    var endMark = function (label, markName, warning) {
                        var formattedMarkName = formatMarkName(markName);
                        var formattedLabel = formatLabel(label, warning);
                        try {
                            performance.measure(formattedLabel, formattedMarkName);
                        } catch (err) {
                        }
                        performance.clearMarks(formattedMarkName);
                        performance.clearMeasures(formattedLabel);
                    };
                    var getFiberMarkName = function (label, debugID) {
                        return label + ' (#' + debugID + ')';
                    };
                    var getFiberLabel = function (componentName, isMounted, phase) {
                        if (phase === null) {
                            return componentName + ' [' + (isMounted ? 'update' : 'mount') + ']';
                        } else {
                            return componentName + '.' + phase;
                        }
                    };
                    var beginFiberMark = function (fiber, phase) {
                        var componentName = getComponentName$5(fiber) || 'Unknown';
                        var debugID = fiber._debugID;
                        var isMounted = fiber.alternate !== null;
                        var label = getFiberLabel(componentName, isMounted, phase);
                        if (isCommitting && labelsInCurrentCommit.has(label)) {
                            return false;
                        }
                        labelsInCurrentCommit.add(label);
                        var markName = getFiberMarkName(label, debugID);
                        beginMark(markName);
                        return true;
                    };
                    var clearFiberMark = function (fiber, phase) {
                        var componentName = getComponentName$5(fiber) || 'Unknown';
                        var debugID = fiber._debugID;
                        var isMounted = fiber.alternate !== null;
                        var label = getFiberLabel(componentName, isMounted, phase);
                        var markName = getFiberMarkName(label, debugID);
                        clearMark(markName);
                    };
                    var endFiberMark = function (fiber, phase, warning) {
                        var componentName = getComponentName$5(fiber) || 'Unknown';
                        var debugID = fiber._debugID;
                        var isMounted = fiber.alternate !== null;
                        var label = getFiberLabel(componentName, isMounted, phase);
                        var markName = getFiberMarkName(label, debugID);
                        endMark(label, markName, warning);
                    };
                    var shouldIgnoreFiber = function (fiber) {
                        switch (fiber.tag) {
                        case HostRoot$4:
                        case HostComponent$4:
                        case HostText$2:
                        case HostPortal$1:
                        case YieldComponent:
                        case Fragment:
                            return true;
                        default:
                            return false;
                        }
                    };
                    var clearPendingPhaseMeasurement = function () {
                        if (currentPhase !== null && currentPhaseFiber !== null) {
                            clearFiberMark(currentPhaseFiber, currentPhase);
                        }
                        currentPhaseFiber = null;
                        currentPhase = null;
                        hasScheduledUpdateInCurrentPhase = false;
                    };
                    var pauseTimers = function () {
                        var fiber = currentFiber;
                        while (fiber) {
                            if (fiber._debugIsCurrentlyTiming) {
                                endFiberMark(fiber, null, null);
                            }
                            fiber = fiber['return'];
                        }
                    };
                    var resumeTimersRecursively = function (fiber) {
                        if (fiber['return'] !== null) {
                            resumeTimersRecursively(fiber['return']);
                        }
                        if (fiber._debugIsCurrentlyTiming) {
                            beginFiberMark(fiber, null);
                        }
                    };
                    var resumeTimers = function () {
                        if (currentFiber !== null) {
                            resumeTimersRecursively(currentFiber);
                        }
                    };
                    ReactDebugFiberPerf = {
                        recordEffect: function () {
                            effectCountInCurrentCommit++;
                        },
                        recordScheduleUpdate: function () {
                            if (isCommitting) {
                                hasScheduledUpdateInCurrentCommit = true;
                            }
                            if (currentPhase !== null && currentPhase !== 'componentWillMount' && currentPhase !== 'componentWillReceiveProps') {
                                hasScheduledUpdateInCurrentPhase = true;
                            }
                        },
                        startWorkTimer: function (fiber) {
                            if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
                                return;
                            }
                            currentFiber = fiber;
                            if (!beginFiberMark(fiber, null)) {
                                return;
                            }
                            fiber._debugIsCurrentlyTiming = true;
                        },
                        cancelWorkTimer: function (fiber) {
                            if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
                                return;
                            }
                            fiber._debugIsCurrentlyTiming = false;
                            clearFiberMark(fiber, null);
                        },
                        stopWorkTimer: function (fiber) {
                            if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
                                return;
                            }
                            currentFiber = fiber['return'];
                            if (!fiber._debugIsCurrentlyTiming) {
                                return;
                            }
                            fiber._debugIsCurrentlyTiming = false;
                            endFiberMark(fiber, null, null);
                        },
                        stopFailedWorkTimer: function (fiber) {
                            if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
                                return;
                            }
                            currentFiber = fiber['return'];
                            if (!fiber._debugIsCurrentlyTiming) {
                                return;
                            }
                            fiber._debugIsCurrentlyTiming = false;
                            var warning = 'An error was thrown inside this error boundary';
                            endFiberMark(fiber, null, warning);
                        },
                        startPhaseTimer: function (fiber, phase) {
                            if (!supportsUserTiming) {
                                return;
                            }
                            clearPendingPhaseMeasurement();
                            if (!beginFiberMark(fiber, phase)) {
                                return;
                            }
                            currentPhaseFiber = fiber;
                            currentPhase = phase;
                        },
                        stopPhaseTimer: function () {
                            if (!supportsUserTiming) {
                                return;
                            }
                            if (currentPhase !== null && currentPhaseFiber !== null) {
                                var warning = hasScheduledUpdateInCurrentPhase ? 'Scheduled a cascading update' : null;
                                endFiberMark(currentPhaseFiber, currentPhase, warning);
                            }
                            currentPhase = null;
                            currentPhaseFiber = null;
                        },
                        startWorkLoopTimer: function () {
                            if (!supportsUserTiming) {
                                return;
                            }
                            commitCountInCurrentWorkLoop = 0;
                            beginMark('(React Tree Reconciliation)');
                            resumeTimers();
                        },
                        stopWorkLoopTimer: function () {
                            if (!supportsUserTiming) {
                                return;
                            }
                            var warning = commitCountInCurrentWorkLoop > 1 ? 'There were cascading updates' : null;
                            commitCountInCurrentWorkLoop = 0;
                            pauseTimers();
                            endMark('(React Tree Reconciliation)', '(React Tree Reconciliation)', warning);
                        },
                        startCommitTimer: function () {
                            if (!supportsUserTiming) {
                                return;
                            }
                            isCommitting = true;
                            hasScheduledUpdateInCurrentCommit = false;
                            labelsInCurrentCommit.clear();
                            beginMark('(Committing Changes)');
                        },
                        stopCommitTimer: function () {
                            if (!supportsUserTiming) {
                                return;
                            }
                            var warning = null;
                            if (hasScheduledUpdateInCurrentCommit) {
                                warning = 'Lifecycle hook scheduled a cascading update';
                            } else if (commitCountInCurrentWorkLoop > 0) {
                                warning = 'Caused by a cascading update in earlier commit';
                            }
                            hasScheduledUpdateInCurrentCommit = false;
                            commitCountInCurrentWorkLoop++;
                            isCommitting = false;
                            labelsInCurrentCommit.clear();
                            endMark('(Committing Changes)', '(Committing Changes)', warning);
                        },
                        startCommitHostEffectsTimer: function () {
                            if (!supportsUserTiming) {
                                return;
                            }
                            effectCountInCurrentCommit = 0;
                            beginMark('(Committing Host Effects)');
                        },
                        stopCommitHostEffectsTimer: function () {
                            if (!supportsUserTiming) {
                                return;
                            }
                            var count = effectCountInCurrentCommit;
                            effectCountInCurrentCommit = 0;
                            endMark('(Committing Host Effects: ' + count + ' Total)', '(Committing Host Effects)', null);
                        },
                        startCommitLifeCyclesTimer: function () {
                            if (!supportsUserTiming) {
                                return;
                            }
                            effectCountInCurrentCommit = 0;
                            beginMark('(Calling Lifecycle Methods)');
                        },
                        stopCommitLifeCyclesTimer: function () {
                            if (!supportsUserTiming) {
                                return;
                            }
                            var count = effectCountInCurrentCommit;
                            effectCountInCurrentCommit = 0;
                            endMark('(Calling Lifecycle Methods: ' + count + ' Total)', '(Calling Lifecycle Methods)', null);
                        }
                    };
                }
                var ReactDebugFiberPerf_1 = ReactDebugFiberPerf;
                var isFiberMounted$1 = ReactFiberTreeReflection.isFiberMounted;
                var ClassComponent$3 = ReactTypeOfWork.ClassComponent;
                var HostRoot$3 = ReactTypeOfWork.HostRoot;
                var createCursor = ReactFiberStack.createCursor;
                var pop = ReactFiberStack.pop;
                var push = ReactFiberStack.push;
                {
                    var warning$20 = require$$0;
                    var checkPropTypes$1 = checkPropTypes;
                    var ReactDebugCurrentFiber$2 = ReactDebugCurrentFiber_1;
                    var _require4 = ReactDebugFiberPerf_1, startPhaseTimer = _require4.startPhaseTimer, stopPhaseTimer = _require4.stopPhaseTimer;
                    var warnedAboutMissingGetChildContext = {};
                }
                var contextStackCursor = createCursor(emptyObject);
                var didPerformWorkStackCursor = createCursor(false);
                var previousContext = emptyObject;
                function getUnmaskedContext(workInProgress) {
                    var hasOwnContext = isContextProvider$1(workInProgress);
                    if (hasOwnContext) {
                        return previousContext;
                    }
                    return contextStackCursor.current;
                }
                var getUnmaskedContext_1 = getUnmaskedContext;
                function cacheContext(workInProgress, unmaskedContext, maskedContext) {
                    var instance = workInProgress.stateNode;
                    instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
                    instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
                }
                var cacheContext_1 = cacheContext;
                var getMaskedContext = function (workInProgress, unmaskedContext) {
                    var type = workInProgress.type;
                    var contextTypes = type.contextTypes;
                    if (!contextTypes) {
                        return emptyObject;
                    }
                    var instance = workInProgress.stateNode;
                    if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
                        return instance.__reactInternalMemoizedMaskedChildContext;
                    }
                    var context = {};
                    for (var key in contextTypes) {
                        context[key] = unmaskedContext[key];
                    }
                    {
                        var name = getComponentName_1(workInProgress) || 'Unknown';
                        ReactDebugCurrentFiber$2.setCurrentFiber(workInProgress, null);
                        checkPropTypes$1(contextTypes, context, 'context', name, ReactDebugCurrentFiber$2.getCurrentFiberStackAddendum);
                        ReactDebugCurrentFiber$2.resetCurrentFiber();
                    }
                    if (instance) {
                        cacheContext(workInProgress, unmaskedContext, context);
                    }
                    return context;
                };
                var hasContextChanged = function () {
                    return didPerformWorkStackCursor.current;
                };
                function isContextConsumer(fiber) {
                    return fiber.tag === ClassComponent$3 && fiber.type.contextTypes != null;
                }
                var isContextConsumer_1 = isContextConsumer;
                function isContextProvider$1(fiber) {
                    return fiber.tag === ClassComponent$3 && fiber.type.childContextTypes != null;
                }
                var isContextProvider_1 = isContextProvider$1;
                function popContextProvider(fiber) {
                    if (!isContextProvider$1(fiber)) {
                        return;
                    }
                    pop(didPerformWorkStackCursor, fiber);
                    pop(contextStackCursor, fiber);
                }
                var popContextProvider_1 = popContextProvider;
                var popTopLevelContextObject = function (fiber) {
                    pop(didPerformWorkStackCursor, fiber);
                    pop(contextStackCursor, fiber);
                };
                var pushTopLevelContextObject = function (fiber, context, didChange) {
                    !(contextStackCursor.cursor == null) ? invariant(false, 'Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.') : void 0;
                    push(contextStackCursor, context, fiber);
                    push(didPerformWorkStackCursor, didChange, fiber);
                };
                function processChildContext$1(fiber, parentContext, isReconciling) {
                    var instance = fiber.stateNode;
                    var childContextTypes = fiber.type.childContextTypes;
                    if (typeof instance.getChildContext !== 'function') {
                        {
                            var componentName = getComponentName_1(fiber) || 'Unknown';
                            if (!warnedAboutMissingGetChildContext[componentName]) {
                                warnedAboutMissingGetChildContext[componentName] = true;
                                warning$20(false, '%s.childContextTypes is specified but there is no getChildContext() method ' + 'on the instance. You can either define getChildContext() on %s or remove ' + 'childContextTypes from it.', componentName, componentName);
                            }
                        }
                        return parentContext;
                    }
                    var childContext = void 0;
                    {
                        ReactDebugCurrentFiber$2.setCurrentFiber(fiber, 'getChildContext');
                        startPhaseTimer(fiber, 'getChildContext');
                        childContext = instance.getChildContext();
                        stopPhaseTimer();
                        ReactDebugCurrentFiber$2.resetCurrentFiber();
                    }
                    for (var contextKey in childContext) {
                        !(contextKey in childContextTypes) ? invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', getComponentName_1(fiber) || 'Unknown', contextKey) : void 0;
                    }
                    {
                        var name = getComponentName_1(fiber) || 'Unknown';
                        var workInProgress = isReconciling ? fiber : null;
                        ReactDebugCurrentFiber$2.setCurrentFiber(workInProgress, null);
                        checkPropTypes$1(childContextTypes, childContext, 'child context', name, ReactDebugCurrentFiber$2.getCurrentFiberStackAddendum);
                        ReactDebugCurrentFiber$2.resetCurrentFiber();
                    }
                    return _assign({}, parentContext, childContext);
                }
                var processChildContext_1 = processChildContext$1;
                var pushContextProvider = function (workInProgress) {
                    if (!isContextProvider$1(workInProgress)) {
                        return false;
                    }
                    var instance = workInProgress.stateNode;
                    var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyObject;
                    previousContext = contextStackCursor.current;
                    push(contextStackCursor, memoizedMergedChildContext, workInProgress);
                    push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);
                    return true;
                };
                var invalidateContextProvider = function (workInProgress, didChange) {
                    var instance = workInProgress.stateNode;
                    !instance ? invariant(false, 'Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.') : void 0;
                    if (didChange) {
                        var mergedContext = processChildContext$1(workInProgress, previousContext, true);
                        instance.__reactInternalMemoizedMergedChildContext = mergedContext;
                        pop(didPerformWorkStackCursor, workInProgress);
                        pop(contextStackCursor, workInProgress);
                        push(contextStackCursor, mergedContext, workInProgress);
                        push(didPerformWorkStackCursor, didChange, workInProgress);
                    } else {
                        pop(didPerformWorkStackCursor, workInProgress);
                        push(didPerformWorkStackCursor, didChange, workInProgress);
                    }
                };
                var resetContext = function () {
                    previousContext = emptyObject;
                    contextStackCursor.current = emptyObject;
                    didPerformWorkStackCursor.current = false;
                };
                var findCurrentUnmaskedContext$1 = function (fiber) {
                    !(isFiberMounted$1(fiber) && fiber.tag === ClassComponent$3) ? invariant(false, 'Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.') : void 0;
                    var node = fiber;
                    while (node.tag !== HostRoot$3) {
                        if (isContextProvider$1(node)) {
                            return node.stateNode.__reactInternalMemoizedMergedChildContext;
                        }
                        var parent = node['return'];
                        !parent ? invariant(false, 'Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.') : void 0;
                        node = parent;
                    }
                    return node.stateNode.context;
                };
                var ReactFiberContext = {
                    getUnmaskedContext: getUnmaskedContext_1,
                    cacheContext: cacheContext_1,
                    getMaskedContext: getMaskedContext,
                    hasContextChanged: hasContextChanged,
                    isContextConsumer: isContextConsumer_1,
                    isContextProvider: isContextProvider_1,
                    popContextProvider: popContextProvider_1,
                    popTopLevelContextObject: popTopLevelContextObject,
                    pushTopLevelContextObject: pushTopLevelContextObject,
                    processChildContext: processChildContext_1,
                    pushContextProvider: pushContextProvider,
                    invalidateContextProvider: invalidateContextProvider,
                    resetContext: resetContext,
                    findCurrentUnmaskedContext: findCurrentUnmaskedContext$1
                };
                var ReactTypeOfInternalContext = {
                    NoContext: 0,
                    AsyncUpdates: 1
                };
                var IndeterminateComponent$1 = ReactTypeOfWork.IndeterminateComponent;
                var ClassComponent$4 = ReactTypeOfWork.ClassComponent;
                var HostRoot$5 = ReactTypeOfWork.HostRoot;
                var HostComponent$5 = ReactTypeOfWork.HostComponent;
                var HostText$3 = ReactTypeOfWork.HostText;
                var HostPortal$2 = ReactTypeOfWork.HostPortal;
                var CoroutineComponent = ReactTypeOfWork.CoroutineComponent;
                var YieldComponent$1 = ReactTypeOfWork.YieldComponent;
                var Fragment$1 = ReactTypeOfWork.Fragment;
                var NoWork$1 = ReactPriorityLevel.NoWork;
                var NoContext = ReactTypeOfInternalContext.NoContext;
                var NoEffect$1 = ReactTypeOfSideEffect.NoEffect;
                {
                    var getComponentName$6 = getComponentName_1;
                    var hasBadMapPolyfill = false;
                    try {
                        var nonExtensibleObject = Object.preventExtensions({});
                        new Map([[
                                nonExtensibleObject,
                                null
                            ]]);
                        new Set([nonExtensibleObject]);
                    } catch (e) {
                        hasBadMapPolyfill = true;
                    }
                }
                {
                    var debugCounter = 1;
                }
                function FiberNode(tag, key, internalContextTag) {
                    this.tag = tag;
                    this.key = key;
                    this.type = null;
                    this.stateNode = null;
                    this['return'] = null;
                    this.child = null;
                    this.sibling = null;
                    this.index = 0;
                    this.ref = null;
                    this.pendingProps = null;
                    this.memoizedProps = null;
                    this.updateQueue = null;
                    this.memoizedState = null;
                    this.internalContextTag = internalContextTag;
                    this.effectTag = NoEffect$1;
                    this.nextEffect = null;
                    this.firstEffect = null;
                    this.lastEffect = null;
                    this.pendingWorkPriority = NoWork$1;
                    this.alternate = null;
                    {
                        this._debugID = debugCounter++;
                        this._debugSource = null;
                        this._debugOwner = null;
                        this._debugIsCurrentlyTiming = false;
                        if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {
                            Object.preventExtensions(this);
                        }
                    }
                }
                var createFiber = function (tag, key, internalContextTag) {
                    return new FiberNode(tag, key, internalContextTag);
                };
                function shouldConstruct(Component) {
                    return !!(Component.prototype && Component.prototype.isReactComponent);
                }
                var createWorkInProgress = function (current, renderPriority) {
                    var workInProgress = current.alternate;
                    if (workInProgress === null) {
                        workInProgress = createFiber(current.tag, current.key, current.internalContextTag);
                        workInProgress.type = current.type;
                        workInProgress.stateNode = current.stateNode;
                        {
                            workInProgress._debugID = current._debugID;
                            workInProgress._debugSource = current._debugSource;
                            workInProgress._debugOwner = current._debugOwner;
                        }
                        workInProgress.alternate = current;
                        current.alternate = workInProgress;
                    } else {
                        workInProgress.effectTag = NoEffect$1;
                        workInProgress.nextEffect = null;
                        workInProgress.firstEffect = null;
                        workInProgress.lastEffect = null;
                    }
                    workInProgress.pendingWorkPriority = renderPriority;
                    workInProgress.child = current.child;
                    workInProgress.memoizedProps = current.memoizedProps;
                    workInProgress.memoizedState = current.memoizedState;
                    workInProgress.updateQueue = current.updateQueue;
                    workInProgress.sibling = current.sibling;
                    workInProgress.index = current.index;
                    workInProgress.ref = current.ref;
                    return workInProgress;
                };
                var createHostRootFiber$1 = function () {
                    var fiber = createFiber(HostRoot$5, null, NoContext);
                    return fiber;
                };
                var createFiberFromElement = function (element, internalContextTag, priorityLevel) {
                    var owner = null;
                    {
                        owner = element._owner;
                    }
                    var fiber = createFiberFromElementType(element.type, element.key, internalContextTag, owner);
                    fiber.pendingProps = element.props;
                    fiber.pendingWorkPriority = priorityLevel;
                    {
                        fiber._debugSource = element._source;
                        fiber._debugOwner = element._owner;
                    }
                    return fiber;
                };
                var createFiberFromFragment = function (elements, internalContextTag, priorityLevel) {
                    var fiber = createFiber(Fragment$1, null, internalContextTag);
                    fiber.pendingProps = elements;
                    fiber.pendingWorkPriority = priorityLevel;
                    return fiber;
                };
                var createFiberFromText = function (content, internalContextTag, priorityLevel) {
                    var fiber = createFiber(HostText$3, null, internalContextTag);
                    fiber.pendingProps = content;
                    fiber.pendingWorkPriority = priorityLevel;
                    return fiber;
                };
                function createFiberFromElementType(type, key, internalContextTag, debugOwner) {
                    var fiber = void 0;
                    if (typeof type === 'function') {
                        fiber = shouldConstruct(type) ? createFiber(ClassComponent$4, key, internalContextTag) : createFiber(IndeterminateComponent$1, key, internalContextTag);
                        fiber.type = type;
                    } else if (typeof type === 'string') {
                        fiber = createFiber(HostComponent$5, key, internalContextTag);
                        fiber.type = type;
                    } else if (typeof type === 'object' && type !== null && typeof type.tag === 'number') {
                        fiber = type;
                    } else {
                        var info = '';
                        {
                            if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
                                info += ' You likely forgot to export your component from the file ' + 'it\'s defined in.';
                            }
                            var ownerName = debugOwner ? getComponentName$6(debugOwner) : null;
                            if (ownerName) {
                                info += '\n\nCheck the render method of `' + ownerName + '`.';
                            }
                        }
                        invariant(false, 'Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s', type == null ? type : typeof type, info);
                    }
                    return fiber;
                }
                var createFiberFromElementType_1 = createFiberFromElementType;
                var createFiberFromHostInstanceForDeletion = function () {
                    var fiber = createFiber(HostComponent$5, null, NoContext);
                    fiber.type = 'DELETED';
                    return fiber;
                };
                var createFiberFromCoroutine = function (coroutine, internalContextTag, priorityLevel) {
                    var fiber = createFiber(CoroutineComponent, coroutine.key, internalContextTag);
                    fiber.type = coroutine.handler;
                    fiber.pendingProps = coroutine;
                    fiber.pendingWorkPriority = priorityLevel;
                    return fiber;
                };
                var createFiberFromYield = function (yieldNode, internalContextTag, priorityLevel) {
                    var fiber = createFiber(YieldComponent$1, null, internalContextTag);
                    return fiber;
                };
                var createFiberFromPortal = function (portal, internalContextTag, priorityLevel) {
                    var fiber = createFiber(HostPortal$2, portal.key, internalContextTag);
                    fiber.pendingProps = portal.children || [];
                    fiber.pendingWorkPriority = priorityLevel;
                    fiber.stateNode = {
                        containerInfo: portal.containerInfo,
                        implementation: portal.implementation
                    };
                    return fiber;
                };
                var largerPriority = function (p1, p2) {
                    return p1 !== NoWork$1 && (p2 === NoWork$1 || p2 > p1) ? p1 : p2;
                };
                var ReactFiber = {
                    createWorkInProgress: createWorkInProgress,
                    createHostRootFiber: createHostRootFiber$1,
                    createFiberFromElement: createFiberFromElement,
                    createFiberFromFragment: createFiberFromFragment,
                    createFiberFromText: createFiberFromText,
                    createFiberFromElementType: createFiberFromElementType_1,
                    createFiberFromHostInstanceForDeletion: createFiberFromHostInstanceForDeletion,
                    createFiberFromCoroutine: createFiberFromCoroutine,
                    createFiberFromYield: createFiberFromYield,
                    createFiberFromPortal: createFiberFromPortal,
                    largerPriority: largerPriority
                };
                var createHostRootFiber = ReactFiber.createHostRootFiber;
                var createFiberRoot$1 = function (containerInfo) {
                    var uninitializedFiber = createHostRootFiber();
                    var root = {
                        current: uninitializedFiber,
                        containerInfo: containerInfo,
                        isScheduled: false,
                        nextScheduledRoot: null,
                        context: null,
                        pendingContext: null
                    };
                    uninitializedFiber.stateNode = root;
                    return root;
                };
                var ReactFiberRoot = { createFiberRoot: createFiberRoot$1 };
                var defaultShowDialog = function (capturedError) {
                    return true;
                };
                var showDialog = defaultShowDialog;
                function logCapturedError$1(capturedError) {
                    var logError = showDialog(capturedError);
                    if (logError === false) {
                        return;
                    }
                    var error = capturedError.error;
                    {
                        var componentName = capturedError.componentName, componentStack = capturedError.componentStack, errorBoundaryName = capturedError.errorBoundaryName, errorBoundaryFound = capturedError.errorBoundaryFound, willRetry = capturedError.willRetry;
                        var componentNameMessage = componentName ? 'The above error occurred in the <' + componentName + '> component:' : 'The above error occurred in one of your React components:';
                        var errorBoundaryMessage = void 0;
                        if (errorBoundaryFound && errorBoundaryName) {
                            if (willRetry) {
                                errorBoundaryMessage = 'React will try to recreate this component tree from scratch ' + ('using the error boundary you provided, ' + errorBoundaryName + '.');
                            } else {
                                errorBoundaryMessage = 'This error was initially handled by the error boundary ' + errorBoundaryName + '.\n' + 'Recreating the tree from scratch failed so React will unmount the tree.';
                            }
                        } else {
                            errorBoundaryMessage = 'Consider adding an error boundary to your tree to customize error handling behavior.\n' + 'You can learn more about error boundaries at https://fb.me/react-error-boundaries.';
                        }
                        var combinedMessage = '' + componentNameMessage + componentStack + '\n\n' + ('' + errorBoundaryMessage);
                        console.error(combinedMessage);
                    }
                }
                var injection$1 = {
                    injectDialog: function (fn) {
                        !(showDialog === defaultShowDialog) ? invariant(false, 'The custom dialog was already injected.') : void 0;
                        !(typeof fn === 'function') ? invariant(false, 'Injected showDialog() must be a function.') : void 0;
                        showDialog = fn;
                    }
                };
                var logCapturedError_1 = logCapturedError$1;
                var ReactFiberErrorLogger = {
                    injection: injection$1,
                    logCapturedError: logCapturedError_1
                };
                var REACT_COROUTINE_TYPE$1;
                var REACT_YIELD_TYPE$1;
                if (typeof Symbol === 'function' && Symbol['for']) {
                    REACT_COROUTINE_TYPE$1 = Symbol['for']('react.coroutine');
                    REACT_YIELD_TYPE$1 = Symbol['for']('react.yield');
                } else {
                    REACT_COROUTINE_TYPE$1 = 60104;
                    REACT_YIELD_TYPE$1 = 60105;
                }
                var createCoroutine = function (children, handler, props) {
                    var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
                    var coroutine = {
                        $$typeof: REACT_COROUTINE_TYPE$1,
                        key: key == null ? null : '' + key,
                        children: children,
                        handler: handler,
                        props: props
                    };
                    {
                        if (Object.freeze) {
                            Object.freeze(coroutine.props);
                            Object.freeze(coroutine);
                        }
                    }
                    return coroutine;
                };
                var createYield = function (value) {
                    var yieldNode = {
                        $$typeof: REACT_YIELD_TYPE$1,
                        value: value
                    };
                    {
                        if (Object.freeze) {
                            Object.freeze(yieldNode);
                        }
                    }
                    return yieldNode;
                };
                var isCoroutine = function (object) {
                    return typeof object === 'object' && object !== null && object.$$typeof === REACT_COROUTINE_TYPE$1;
                };
                var isYield = function (object) {
                    return typeof object === 'object' && object !== null && object.$$typeof === REACT_YIELD_TYPE$1;
                };
                var REACT_YIELD_TYPE_1 = REACT_YIELD_TYPE$1;
                var REACT_COROUTINE_TYPE_1 = REACT_COROUTINE_TYPE$1;
                var ReactCoroutine = {
                    createCoroutine: createCoroutine,
                    createYield: createYield,
                    isCoroutine: isCoroutine,
                    isYield: isYield,
                    REACT_YIELD_TYPE: REACT_YIELD_TYPE_1,
                    REACT_COROUTINE_TYPE: REACT_COROUTINE_TYPE_1
                };
                var REACT_PORTAL_TYPE$1 = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.portal') || 60106;
                var createPortal$1 = function (children, containerInfo, implementation) {
                    var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
                    return {
                        $$typeof: REACT_PORTAL_TYPE$1,
                        key: key == null ? null : '' + key,
                        children: children,
                        containerInfo: containerInfo,
                        implementation: implementation
                    };
                };
                var isPortal = function (object) {
                    return typeof object === 'object' && object !== null && object.$$typeof === REACT_PORTAL_TYPE$1;
                };
                var REACT_PORTAL_TYPE_1 = REACT_PORTAL_TYPE$1;
                var ReactPortal = {
                    createPortal: createPortal$1,
                    isPortal: isPortal,
                    REACT_PORTAL_TYPE: REACT_PORTAL_TYPE_1
                };
                var REACT_COROUTINE_TYPE = ReactCoroutine.REACT_COROUTINE_TYPE;
                var REACT_YIELD_TYPE = ReactCoroutine.REACT_YIELD_TYPE;
                var REACT_PORTAL_TYPE = ReactPortal.REACT_PORTAL_TYPE;
                {
                    var _require3$4 = ReactDebugCurrentFiber_1, getCurrentFiberStackAddendum$5 = _require3$4.getCurrentFiberStackAddendum;
                    var warning$24 = require$$0;
                    var didWarnAboutMaps = false;
                    var ownerHasKeyUseWarning = {};
                    var warnForMissingKey = function (child) {
                        if (child === null || typeof child !== 'object') {
                            return;
                        }
                        if (!child._store || child._store.validated || child.key != null) {
                            return;
                        }
                        !(typeof child._store === 'object') ? invariant(false, 'React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.') : void 0;
                        child._store.validated = true;
                        var currentComponentErrorInfo = 'Each child in an array or iterator should have a unique ' + '"key" prop. See https://fb.me/react-warning-keys for ' + 'more information.' + (getCurrentFiberStackAddendum$5() || '');
                        if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
                            return;
                        }
                        ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
                        warning$24(false, 'Each child in an array or iterator should have a unique ' + '"key" prop. See https://fb.me/react-warning-keys for ' + 'more information.%s', getCurrentFiberStackAddendum$5());
                    };
                }
                var createWorkInProgress$2 = ReactFiber.createWorkInProgress;
                var createFiberFromElement$1 = ReactFiber.createFiberFromElement;
                var createFiberFromFragment$1 = ReactFiber.createFiberFromFragment;
                var createFiberFromText$1 = ReactFiber.createFiberFromText;
                var createFiberFromCoroutine$1 = ReactFiber.createFiberFromCoroutine;
                var createFiberFromYield$1 = ReactFiber.createFiberFromYield;
                var createFiberFromPortal$1 = ReactFiber.createFiberFromPortal;
                var isArray = Array.isArray;
                var FunctionalComponent$2 = ReactTypeOfWork.FunctionalComponent;
                var ClassComponent$7 = ReactTypeOfWork.ClassComponent;
                var HostText$5 = ReactTypeOfWork.HostText;
                var HostPortal$5 = ReactTypeOfWork.HostPortal;
                var CoroutineComponent$2 = ReactTypeOfWork.CoroutineComponent;
                var YieldComponent$3 = ReactTypeOfWork.YieldComponent;
                var Fragment$3 = ReactTypeOfWork.Fragment;
                var NoEffect$2 = ReactTypeOfSideEffect.NoEffect;
                var Placement$3 = ReactTypeOfSideEffect.Placement;
                var Deletion$1 = ReactTypeOfSideEffect.Deletion;
                var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
                var FAUX_ITERATOR_SYMBOL = '@@iterator';
                var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 60103;
                function getIteratorFn(maybeIterable) {
                    if (maybeIterable === null || typeof maybeIterable === 'undefined') {
                        return null;
                    }
                    var iteratorFn = ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
                    if (typeof iteratorFn === 'function') {
                        return iteratorFn;
                    }
                    return null;
                }
                function coerceRef(current, element) {
                    var mixedRef = element.ref;
                    if (mixedRef !== null && typeof mixedRef !== 'function') {
                        if (element._owner) {
                            var owner = element._owner;
                            var inst = void 0;
                            if (owner) {
                                if (typeof owner.tag === 'number') {
                                    var ownerFiber = owner;
                                    !(ownerFiber.tag === ClassComponent$7) ? invariant(false, 'Stateless function components cannot have refs.') : void 0;
                                    inst = ownerFiber.stateNode;
                                } else {
                                    inst = owner.getPublicInstance();
                                }
                            }
                            !inst ? invariant(false, 'Missing owner for string ref %s. This error is likely caused by a bug in React. Please file an issue.', mixedRef) : void 0;
                            var stringRef = '' + mixedRef;
                            if (current !== null && current.ref !== null && current.ref._stringRef === stringRef) {
                                return current.ref;
                            }
                            var ref = function (value) {
                                var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;
                                if (value === null) {
                                    delete refs[stringRef];
                                } else {
                                    refs[stringRef] = value;
                                }
                            };
                            ref._stringRef = stringRef;
                            return ref;
                        } else {
                            !(typeof mixedRef === 'string') ? invariant(false, 'Expected ref to be a function or a string.') : void 0;
                            !element._owner ? invariant(false, 'Element ref was specified as a string (%s) but no owner was set. You may have multiple copies of React loaded. (details: https://fb.me/react-refs-must-have-owner).', mixedRef) : void 0;
                        }
                    }
                    return mixedRef;
                }
                function throwOnInvalidObjectType(returnFiber, newChild) {
                    if (returnFiber.type !== 'textarea') {
                        var addendum = '';
                        {
                            addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + (getCurrentFiberStackAddendum$5() || '');
                        }
                        invariant(false, 'Objects are not valid as a React child (found: %s).%s', Object.prototype.toString.call(newChild) === '[object Object]' ? 'object with keys {' + Object.keys(newChild).join(', ') + '}' : newChild, addendum);
                    }
                }
                function warnOnFunctionType() {
                    warning$24(false, 'Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.%s', getCurrentFiberStackAddendum$5() || '');
                }
                function ChildReconciler(shouldClone, shouldTrackSideEffects) {
                    function deleteChild(returnFiber, childToDelete) {
                        if (!shouldTrackSideEffects) {
                            return;
                        }
                        if (!shouldClone) {
                            if (childToDelete.alternate === null) {
                                return;
                            }
                            childToDelete = childToDelete.alternate;
                        }
                        var last = returnFiber.lastEffect;
                        if (last !== null) {
                            last.nextEffect = childToDelete;
                            returnFiber.lastEffect = childToDelete;
                        } else {
                            returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
                        }
                        childToDelete.nextEffect = null;
                        childToDelete.effectTag = Deletion$1;
                    }
                    function deleteRemainingChildren(returnFiber, currentFirstChild) {
                        if (!shouldTrackSideEffects) {
                            return null;
                        }
                        var childToDelete = currentFirstChild;
                        while (childToDelete !== null) {
                            deleteChild(returnFiber, childToDelete);
                            childToDelete = childToDelete.sibling;
                        }
                        return null;
                    }
                    function mapRemainingChildren(returnFiber, currentFirstChild) {
                        var existingChildren = new Map();
                        var existingChild = currentFirstChild;
                        while (existingChild !== null) {
                            if (existingChild.key !== null) {
                                existingChildren.set(existingChild.key, existingChild);
                            } else {
                                existingChildren.set(existingChild.index, existingChild);
                            }
                            existingChild = existingChild.sibling;
                        }
                        return existingChildren;
                    }
                    function useFiber(fiber, priority) {
                        if (shouldClone) {
                            var clone = createWorkInProgress$2(fiber, priority);
                            clone.index = 0;
                            clone.sibling = null;
                            return clone;
                        } else {
                            fiber.pendingWorkPriority = priority;
                            fiber.effectTag = NoEffect$2;
                            fiber.index = 0;
                            fiber.sibling = null;
                            return fiber;
                        }
                    }
                    function placeChild(newFiber, lastPlacedIndex, newIndex) {
                        newFiber.index = newIndex;
                        if (!shouldTrackSideEffects) {
                            return lastPlacedIndex;
                        }
                        var current = newFiber.alternate;
                        if (current !== null) {
                            var oldIndex = current.index;
                            if (oldIndex < lastPlacedIndex) {
                                newFiber.effectTag = Placement$3;
                                return lastPlacedIndex;
                            } else {
                                return oldIndex;
                            }
                        } else {
                            newFiber.effectTag = Placement$3;
                            return lastPlacedIndex;
                        }
                    }
                    function placeSingleChild(newFiber) {
                        if (shouldTrackSideEffects && newFiber.alternate === null) {
                            newFiber.effectTag = Placement$3;
                        }
                        return newFiber;
                    }
                    function updateTextNode(returnFiber, current, textContent, priority) {
                        if (current === null || current.tag !== HostText$5) {
                            var created = createFiberFromText$1(textContent, returnFiber.internalContextTag, priority);
                            created['return'] = returnFiber;
                            return created;
                        } else {
                            var existing = useFiber(current, priority);
                            existing.pendingProps = textContent;
                            existing['return'] = returnFiber;
                            return existing;
                        }
                    }
                    function updateElement(returnFiber, current, element, priority) {
                        if (current === null || current.type !== element.type) {
                            var created = createFiberFromElement$1(element, returnFiber.internalContextTag, priority);
                            created.ref = coerceRef(current, element);
                            created['return'] = returnFiber;
                            return created;
                        } else {
                            var existing = useFiber(current, priority);
                            existing.ref = coerceRef(current, element);
                            existing.pendingProps = element.props;
                            existing['return'] = returnFiber;
                            {
                                existing._debugSource = element._source;
                                existing._debugOwner = element._owner;
                            }
                            return existing;
                        }
                    }
                    function updateCoroutine(returnFiber, current, coroutine, priority) {
                        if (current === null || current.tag !== CoroutineComponent$2) {
                            var created = createFiberFromCoroutine$1(coroutine, returnFiber.internalContextTag, priority);
                            created['return'] = returnFiber;
                            return created;
                        } else {
                            var existing = useFiber(current, priority);
                            existing.pendingProps = coroutine;
                            existing['return'] = returnFiber;
                            return existing;
                        }
                    }
                    function updateYield(returnFiber, current, yieldNode, priority) {
                        if (current === null || current.tag !== YieldComponent$3) {
                            var created = createFiberFromYield$1(yieldNode, returnFiber.internalContextTag, priority);
                            created.type = yieldNode.value;
                            created['return'] = returnFiber;
                            return created;
                        } else {
                            var existing = useFiber(current, priority);
                            existing.type = yieldNode.value;
                            existing['return'] = returnFiber;
                            return existing;
                        }
                    }
                    function updatePortal(returnFiber, current, portal, priority) {
                        if (current === null || current.tag !== HostPortal$5 || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) {
                            var created = createFiberFromPortal$1(portal, returnFiber.internalContextTag, priority);
                            created['return'] = returnFiber;
                            return created;
                        } else {
                            var existing = useFiber(current, priority);
                            existing.pendingProps = portal.children || [];
                            existing['return'] = returnFiber;
                            return existing;
                        }
                    }
                    function updateFragment(returnFiber, current, fragment, priority) {
                        if (current === null || current.tag !== Fragment$3) {
                            var created = createFiberFromFragment$1(fragment, returnFiber.internalContextTag, priority);
                            created['return'] = returnFiber;
                            return created;
                        } else {
                            var existing = useFiber(current, priority);
                            existing.pendingProps = fragment;
                            existing['return'] = returnFiber;
                            return existing;
                        }
                    }
                    function createChild(returnFiber, newChild, priority) {
                        if (typeof newChild === 'string' || typeof newChild === 'number') {
                            var created = createFiberFromText$1('' + newChild, returnFiber.internalContextTag, priority);
                            created['return'] = returnFiber;
                            return created;
                        }
                        if (typeof newChild === 'object' && newChild !== null) {
                            switch (newChild.$$typeof) {
                            case REACT_ELEMENT_TYPE: {
                                    var _created = createFiberFromElement$1(newChild, returnFiber.internalContextTag, priority);
                                    _created.ref = coerceRef(null, newChild);
                                    _created['return'] = returnFiber;
                                    return _created;
                                }
                            case REACT_COROUTINE_TYPE: {
                                    var _created2 = createFiberFromCoroutine$1(newChild, returnFiber.internalContextTag, priority);
                                    _created2['return'] = returnFiber;
                                    return _created2;
                                }
                            case REACT_YIELD_TYPE: {
                                    var _created3 = createFiberFromYield$1(newChild, returnFiber.internalContextTag, priority);
                                    _created3.type = newChild.value;
                                    _created3['return'] = returnFiber;
                                    return _created3;
                                }
                            case REACT_PORTAL_TYPE: {
                                    var _created4 = createFiberFromPortal$1(newChild, returnFiber.internalContextTag, priority);
                                    _created4['return'] = returnFiber;
                                    return _created4;
                                }
                            }
                            if (isArray(newChild) || getIteratorFn(newChild)) {
                                var _created5 = createFiberFromFragment$1(newChild, returnFiber.internalContextTag, priority);
                                _created5['return'] = returnFiber;
                                return _created5;
                            }
                            throwOnInvalidObjectType(returnFiber, newChild);
                        }
                        {
                            if (typeof newChild === 'function') {
                                warnOnFunctionType();
                            }
                        }
                        return null;
                    }
                    function updateSlot(returnFiber, oldFiber, newChild, priority) {
                        var key = oldFiber !== null ? oldFiber.key : null;
                        if (typeof newChild === 'string' || typeof newChild === 'number') {
                            if (key !== null) {
                                return null;
                            }
                            return updateTextNode(returnFiber, oldFiber, '' + newChild, priority);
                        }
                        if (typeof newChild === 'object' && newChild !== null) {
                            switch (newChild.$$typeof) {
                            case REACT_ELEMENT_TYPE: {
                                    if (newChild.key === key) {
                                        return updateElement(returnFiber, oldFiber, newChild, priority);
                                    } else {
                                        return null;
                                    }
                                }
                            case REACT_COROUTINE_TYPE: {
                                    if (newChild.key === key) {
                                        return updateCoroutine(returnFiber, oldFiber, newChild, priority);
                                    } else {
                                        return null;
                                    }
                                }
                            case REACT_YIELD_TYPE: {
                                    if (key === null) {
                                        return updateYield(returnFiber, oldFiber, newChild, priority);
                                    } else {
                                        return null;
                                    }
                                }
                            case REACT_PORTAL_TYPE: {
                                    if (newChild.key === key) {
                                        return updatePortal(returnFiber, oldFiber, newChild, priority);
                                    } else {
                                        return null;
                                    }
                                }
                            }
                            if (isArray(newChild) || getIteratorFn(newChild)) {
                                if (key !== null) {
                                    return null;
                                }
                                return updateFragment(returnFiber, oldFiber, newChild, priority);
                            }
                            throwOnInvalidObjectType(returnFiber, newChild);
                        }
                        {
                            if (typeof newChild === 'function') {
                                warnOnFunctionType();
                            }
                        }
                        return null;
                    }
                    function updateFromMap(existingChildren, returnFiber, newIdx, newChild, priority) {
                        if (typeof newChild === 'string' || typeof newChild === 'number') {
                            var matchedFiber = existingChildren.get(newIdx) || null;
                            return updateTextNode(returnFiber, matchedFiber, '' + newChild, priority);
                        }
                        if (typeof newChild === 'object' && newChild !== null) {
                            switch (newChild.$$typeof) {
                            case REACT_ELEMENT_TYPE: {
                                    var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                                    return updateElement(returnFiber, _matchedFiber, newChild, priority);
                                }
                            case REACT_COROUTINE_TYPE: {
                                    var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                                    return updateCoroutine(returnFiber, _matchedFiber2, newChild, priority);
                                }
                            case REACT_YIELD_TYPE: {
                                    var _matchedFiber3 = existingChildren.get(newIdx) || null;
                                    return updateYield(returnFiber, _matchedFiber3, newChild, priority);
                                }
                            case REACT_PORTAL_TYPE: {
                                    var _matchedFiber4 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                                    return updatePortal(returnFiber, _matchedFiber4, newChild, priority);
                                }
                            }
                            if (isArray(newChild) || getIteratorFn(newChild)) {
                                var _matchedFiber5 = existingChildren.get(newIdx) || null;
                                return updateFragment(returnFiber, _matchedFiber5, newChild, priority);
                            }
                            throwOnInvalidObjectType(returnFiber, newChild);
                        }
                        {
                            if (typeof newChild === 'function') {
                                warnOnFunctionType();
                            }
                        }
                        return null;
                    }
                    function warnOnInvalidKey(child, knownKeys) {
                        {
                            if (typeof child !== 'object' || child === null) {
                                return knownKeys;
                            }
                            switch (child.$$typeof) {
                            case REACT_ELEMENT_TYPE:
                            case REACT_COROUTINE_TYPE:
                            case REACT_PORTAL_TYPE:
                                warnForMissingKey(child);
                                var key = child.key;
                                if (typeof key !== 'string') {
                                    break;
                                }
                                if (knownKeys === null) {
                                    knownKeys = new Set();
                                    knownKeys.add(key);
                                    break;
                                }
                                if (!knownKeys.has(key)) {
                                    knownKeys.add(key);
                                    break;
                                }
                                warning$24(false, 'Encountered two children with the same key, `%s`. ' + 'Keys should be unique so that components maintain their identity ' + 'across updates. Non-unique keys may cause children to be ' + 'duplicated and/or omitted \u2014 the behavior is unsupported and ' + 'could change in a future version.%s', key, getCurrentFiberStackAddendum$5());
                                break;
                            default:
                                break;
                            }
                        }
                        return knownKeys;
                    }
                    function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, priority) {
                        {
                            var knownKeys = null;
                            for (var i = 0; i < newChildren.length; i++) {
                                var child = newChildren[i];
                                knownKeys = warnOnInvalidKey(child, knownKeys);
                            }
                        }
                        var resultingFirstChild = null;
                        var previousNewFiber = null;
                        var oldFiber = currentFirstChild;
                        var lastPlacedIndex = 0;
                        var newIdx = 0;
                        var nextOldFiber = null;
                        for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
                            if (oldFiber.index > newIdx) {
                                nextOldFiber = oldFiber;
                                oldFiber = null;
                            } else {
                                nextOldFiber = oldFiber.sibling;
                            }
                            var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], priority);
                            if (newFiber === null) {
                                if (oldFiber === null) {
                                    oldFiber = nextOldFiber;
                                }
                                break;
                            }
                            if (shouldTrackSideEffects) {
                                if (oldFiber && newFiber.alternate === null) {
                                    deleteChild(returnFiber, oldFiber);
                                }
                            }
                            lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                            if (previousNewFiber === null) {
                                resultingFirstChild = newFiber;
                            } else {
                                previousNewFiber.sibling = newFiber;
                            }
                            previousNewFiber = newFiber;
                            oldFiber = nextOldFiber;
                        }
                        if (newIdx === newChildren.length) {
                            deleteRemainingChildren(returnFiber, oldFiber);
                            return resultingFirstChild;
                        }
                        if (oldFiber === null) {
                            for (; newIdx < newChildren.length; newIdx++) {
                                var _newFiber = createChild(returnFiber, newChildren[newIdx], priority);
                                if (!_newFiber) {
                                    continue;
                                }
                                lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                                if (previousNewFiber === null) {
                                    resultingFirstChild = _newFiber;
                                } else {
                                    previousNewFiber.sibling = _newFiber;
                                }
                                previousNewFiber = _newFiber;
                            }
                            return resultingFirstChild;
                        }
                        var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
                        for (; newIdx < newChildren.length; newIdx++) {
                            var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], priority);
                            if (_newFiber2) {
                                if (shouldTrackSideEffects) {
                                    if (_newFiber2.alternate !== null) {
                                        existingChildren['delete'](_newFiber2.key === null ? newIdx : _newFiber2.key);
                                    }
                                }
                                lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                                if (previousNewFiber === null) {
                                    resultingFirstChild = _newFiber2;
                                } else {
                                    previousNewFiber.sibling = _newFiber2;
                                }
                                previousNewFiber = _newFiber2;
                            }
                        }
                        if (shouldTrackSideEffects) {
                            existingChildren.forEach(function (child) {
                                return deleteChild(returnFiber, child);
                            });
                        }
                        return resultingFirstChild;
                    }
                    function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, priority) {
                        var iteratorFn = getIteratorFn(newChildrenIterable);
                        !(typeof iteratorFn === 'function') ? invariant(false, 'An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.') : void 0;
                        {
                            if (typeof newChildrenIterable.entries === 'function') {
                                var possibleMap = newChildrenIterable;
                                if (possibleMap.entries === iteratorFn) {
                                    warning$24(didWarnAboutMaps, 'Using Maps as children is unsupported and will likely yield ' + 'unexpected results. Convert it to a sequence/iterable of keyed ' + 'ReactElements instead.%s', getCurrentFiberStackAddendum$5());
                                    didWarnAboutMaps = true;
                                }
                            }
                            var _newChildren = iteratorFn.call(newChildrenIterable);
                            if (_newChildren) {
                                var knownKeys = null;
                                var _step = _newChildren.next();
                                for (; !_step.done; _step = _newChildren.next()) {
                                    var child = _step.value;
                                    knownKeys = warnOnInvalidKey(child, knownKeys);
                                }
                            }
                        }
                        var newChildren = iteratorFn.call(newChildrenIterable);
                        !(newChildren != null) ? invariant(false, 'An iterable object provided no iterator.') : void 0;
                        var resultingFirstChild = null;
                        var previousNewFiber = null;
                        var oldFiber = currentFirstChild;
                        var lastPlacedIndex = 0;
                        var newIdx = 0;
                        var nextOldFiber = null;
                        var step = newChildren.next();
                        for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
                            if (oldFiber.index > newIdx) {
                                nextOldFiber = oldFiber;
                                oldFiber = null;
                            } else {
                                nextOldFiber = oldFiber.sibling;
                            }
                            var newFiber = updateSlot(returnFiber, oldFiber, step.value, priority);
                            if (newFiber === null) {
                                if (!oldFiber) {
                                    oldFiber = nextOldFiber;
                                }
                                break;
                            }
                            if (shouldTrackSideEffects) {
                                if (oldFiber && newFiber.alternate === null) {
                                    deleteChild(returnFiber, oldFiber);
                                }
                            }
                            lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                            if (previousNewFiber === null) {
                                resultingFirstChild = newFiber;
                            } else {
                                previousNewFiber.sibling = newFiber;
                            }
                            previousNewFiber = newFiber;
                            oldFiber = nextOldFiber;
                        }
                        if (step.done) {
                            deleteRemainingChildren(returnFiber, oldFiber);
                            return resultingFirstChild;
                        }
                        if (oldFiber === null) {
                            for (; !step.done; newIdx++, step = newChildren.next()) {
                                var _newFiber3 = createChild(returnFiber, step.value, priority);
                                if (_newFiber3 === null) {
                                    continue;
                                }
                                lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                                if (previousNewFiber === null) {
                                    resultingFirstChild = _newFiber3;
                                } else {
                                    previousNewFiber.sibling = _newFiber3;
                                }
                                previousNewFiber = _newFiber3;
                            }
                            return resultingFirstChild;
                        }
                        var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
                        for (; !step.done; newIdx++, step = newChildren.next()) {
                            var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, priority);
                            if (_newFiber4 !== null) {
                                if (shouldTrackSideEffects) {
                                    if (_newFiber4.alternate !== null) {
                                        existingChildren['delete'](_newFiber4.key === null ? newIdx : _newFiber4.key);
                                    }
                                }
                                lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                                if (previousNewFiber === null) {
                                    resultingFirstChild = _newFiber4;
                                } else {
                                    previousNewFiber.sibling = _newFiber4;
                                }
                                previousNewFiber = _newFiber4;
                            }
                        }
                        if (shouldTrackSideEffects) {
                            existingChildren.forEach(function (child) {
                                return deleteChild(returnFiber, child);
                            });
                        }
                        return resultingFirstChild;
                    }
                    function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, priority) {
                        if (currentFirstChild !== null && currentFirstChild.tag === HostText$5) {
                            deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                            var existing = useFiber(currentFirstChild, priority);
                            existing.pendingProps = textContent;
                            existing['return'] = returnFiber;
                            return existing;
                        }
                        deleteRemainingChildren(returnFiber, currentFirstChild);
                        var created = createFiberFromText$1(textContent, returnFiber.internalContextTag, priority);
                        created['return'] = returnFiber;
                        return created;
                    }
                    function reconcileSingleElement(returnFiber, currentFirstChild, element, priority) {
                        var key = element.key;
                        var child = currentFirstChild;
                        while (child !== null) {
                            if (child.key === key) {
                                if (child.type === element.type) {
                                    deleteRemainingChildren(returnFiber, child.sibling);
                                    var existing = useFiber(child, priority);
                                    existing.ref = coerceRef(child, element);
                                    existing.pendingProps = element.props;
                                    existing['return'] = returnFiber;
                                    {
                                        existing._debugSource = element._source;
                                        existing._debugOwner = element._owner;
                                    }
                                    return existing;
                                } else {
                                    deleteRemainingChildren(returnFiber, child);
                                    break;
                                }
                            } else {
                                deleteChild(returnFiber, child);
                            }
                            child = child.sibling;
                        }
                        var created = createFiberFromElement$1(element, returnFiber.internalContextTag, priority);
                        created.ref = coerceRef(currentFirstChild, element);
                        created['return'] = returnFiber;
                        return created;
                    }
                    function reconcileSingleCoroutine(returnFiber, currentFirstChild, coroutine, priority) {
                        var key = coroutine.key;
                        var child = currentFirstChild;
                        while (child !== null) {
                            if (child.key === key) {
                                if (child.tag === CoroutineComponent$2) {
                                    deleteRemainingChildren(returnFiber, child.sibling);
                                    var existing = useFiber(child, priority);
                                    existing.pendingProps = coroutine;
                                    existing['return'] = returnFiber;
                                    return existing;
                                } else {
                                    deleteRemainingChildren(returnFiber, child);
                                    break;
                                }
                            } else {
                                deleteChild(returnFiber, child);
                            }
                            child = child.sibling;
                        }
                        var created = createFiberFromCoroutine$1(coroutine, returnFiber.internalContextTag, priority);
                        created['return'] = returnFiber;
                        return created;
                    }
                    function reconcileSingleYield(returnFiber, currentFirstChild, yieldNode, priority) {
                        var child = currentFirstChild;
                        if (child !== null) {
                            if (child.tag === YieldComponent$3) {
                                deleteRemainingChildren(returnFiber, child.sibling);
                                var existing = useFiber(child, priority);
                                existing.type = yieldNode.value;
                                existing['return'] = returnFiber;
                                return existing;
                            } else {
                                deleteRemainingChildren(returnFiber, child);
                            }
                        }
                        var created = createFiberFromYield$1(yieldNode, returnFiber.internalContextTag, priority);
                        created.type = yieldNode.value;
                        created['return'] = returnFiber;
                        return created;
                    }
                    function reconcileSinglePortal(returnFiber, currentFirstChild, portal, priority) {
                        var key = portal.key;
                        var child = currentFirstChild;
                        while (child !== null) {
                            if (child.key === key) {
                                if (child.tag === HostPortal$5 && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                                    deleteRemainingChildren(returnFiber, child.sibling);
                                    var existing = useFiber(child, priority);
                                    existing.pendingProps = portal.children || [];
                                    existing['return'] = returnFiber;
                                    return existing;
                                } else {
                                    deleteRemainingChildren(returnFiber, child);
                                    break;
                                }
                            } else {
                                deleteChild(returnFiber, child);
                            }
                            child = child.sibling;
                        }
                        var created = createFiberFromPortal$1(portal, returnFiber.internalContextTag, priority);
                        created['return'] = returnFiber;
                        return created;
                    }
                    function reconcileChildFibers(returnFiber, currentFirstChild, newChild, priority) {
                        var isObject = typeof newChild === 'object' && newChild !== null;
                        if (isObject) {
                            switch (newChild.$$typeof) {
                            case REACT_ELEMENT_TYPE:
                                return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, priority));
                            case REACT_COROUTINE_TYPE:
                                return placeSingleChild(reconcileSingleCoroutine(returnFiber, currentFirstChild, newChild, priority));
                            case REACT_YIELD_TYPE:
                                return placeSingleChild(reconcileSingleYield(returnFiber, currentFirstChild, newChild, priority));
                            case REACT_PORTAL_TYPE:
                                return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, priority));
                            }
                        }
                        if (typeof newChild === 'string' || typeof newChild === 'number') {
                            return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, '' + newChild, priority));
                        }
                        if (isArray(newChild)) {
                            return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, priority);
                        }
                        if (getIteratorFn(newChild)) {
                            return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, priority);
                        }
                        if (isObject) {
                            throwOnInvalidObjectType(returnFiber, newChild);
                        }
                        {
                            if (typeof newChild === 'function') {
                                warnOnFunctionType();
                            }
                        }
                        if (typeof newChild === 'undefined') {
                            switch (returnFiber.tag) {
                            case ClassComponent$7: {
                                    {
                                        var instance = returnFiber.stateNode;
                                        if (instance.render._isMockFunction) {
                                            break;
                                        }
                                    }
                                }
                            case FunctionalComponent$2: {
                                    var Component = returnFiber.type;
                                    invariant(false, '%s(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.', Component.displayName || Component.name || 'Component');
                                }
                            }
                        }
                        return deleteRemainingChildren(returnFiber, currentFirstChild);
                    }
                    return reconcileChildFibers;
                }
                var reconcileChildFibers$1 = ChildReconciler(true, true);
                var reconcileChildFibersInPlace$1 = ChildReconciler(false, true);
                var mountChildFibersInPlace$1 = ChildReconciler(false, false);
                var cloneChildFibers$1 = function (current, workInProgress) {
                    !(current === null || workInProgress.child === current.child) ? invariant(false, 'Resuming work not yet implemented.') : void 0;
                    if (workInProgress.child === null) {
                        return;
                    }
                    var currentChild = workInProgress.child;
                    var newChild = createWorkInProgress$2(currentChild, currentChild.pendingWorkPriority);
                    newChild.pendingProps = currentChild.pendingProps;
                    workInProgress.child = newChild;
                    newChild['return'] = workInProgress;
                    while (currentChild.sibling !== null) {
                        currentChild = currentChild.sibling;
                        newChild = newChild.sibling = createWorkInProgress$2(currentChild, currentChild.pendingWorkPriority);
                        newChild.pendingProps = currentChild.pendingProps;
                        newChild['return'] = workInProgress;
                    }
                    newChild.sibling = null;
                };
                var ReactChildFiber = {
                    reconcileChildFibers: reconcileChildFibers$1,
                    reconcileChildFibersInPlace: reconcileChildFibersInPlace$1,
                    mountChildFibersInPlace: mountChildFibersInPlace$1,
                    cloneChildFibers: cloneChildFibers$1
                };
                var Update$1 = ReactTypeOfSideEffect.Update;
                var AsyncUpdates$1 = ReactTypeOfInternalContext.AsyncUpdates;
                var cacheContext$1 = ReactFiberContext.cacheContext;
                var getMaskedContext$2 = ReactFiberContext.getMaskedContext;
                var getUnmaskedContext$2 = ReactFiberContext.getUnmaskedContext;
                var isContextConsumer$1 = ReactFiberContext.isContextConsumer;
                var addUpdate$1 = ReactFiberUpdateQueue.addUpdate;
                var addReplaceUpdate$1 = ReactFiberUpdateQueue.addReplaceUpdate;
                var addForceUpdate$1 = ReactFiberUpdateQueue.addForceUpdate;
                var beginUpdateQueue$2 = ReactFiberUpdateQueue.beginUpdateQueue;
                var _require5 = ReactFiberContext;
                var hasContextChanged$2 = _require5.hasContextChanged;
                var isMounted$1 = ReactFiberTreeReflection.isMounted;
                var fakeInternalInstance = {};
                var isArray$1 = Array.isArray;
                {
                    var _require7$1 = ReactDebugFiberPerf_1, startPhaseTimer$1 = _require7$1.startPhaseTimer, stopPhaseTimer$1 = _require7$1.stopPhaseTimer;
                    var warning$25 = require$$0;
                    var warnOnInvalidCallback = function (callback, callerName) {
                        warning$25(callback === null || typeof callback === 'function', '%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);
                    };
                    Object.defineProperty(fakeInternalInstance, '_processChildContext', {
                        enumerable: false,
                        value: function () {
                            invariant(false, '_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn\'t supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).');
                        }
                    });
                    Object.freeze(fakeInternalInstance);
                }
                var ReactFiberClassComponent = function (scheduleUpdate, getPriorityContext, memoizeProps, memoizeState) {
                    var updater = {
                        isMounted: isMounted$1,
                        enqueueSetState: function (instance, partialState, callback) {
                            var fiber = ReactInstanceMap_1.get(instance);
                            var priorityLevel = getPriorityContext(fiber, false);
                            callback = callback === undefined ? null : callback;
                            {
                                warnOnInvalidCallback(callback, 'setState');
                            }
                            addUpdate$1(fiber, partialState, callback, priorityLevel);
                            scheduleUpdate(fiber, priorityLevel);
                        },
                        enqueueReplaceState: function (instance, state, callback) {
                            var fiber = ReactInstanceMap_1.get(instance);
                            var priorityLevel = getPriorityContext(fiber, false);
                            callback = callback === undefined ? null : callback;
                            {
                                warnOnInvalidCallback(callback, 'replaceState');
                            }
                            addReplaceUpdate$1(fiber, state, callback, priorityLevel);
                            scheduleUpdate(fiber, priorityLevel);
                        },
                        enqueueForceUpdate: function (instance, callback) {
                            var fiber = ReactInstanceMap_1.get(instance);
                            var priorityLevel = getPriorityContext(fiber, false);
                            callback = callback === undefined ? null : callback;
                            {
                                warnOnInvalidCallback(callback, 'forceUpdate');
                            }
                            addForceUpdate$1(fiber, callback, priorityLevel);
                            scheduleUpdate(fiber, priorityLevel);
                        }
                    };
                    function checkShouldComponentUpdate(workInProgress, oldProps, newProps, oldState, newState, newContext) {
                        if (oldProps === null || workInProgress.updateQueue !== null && workInProgress.updateQueue.hasForceUpdate) {
                            return true;
                        }
                        var instance = workInProgress.stateNode;
                        var type = workInProgress.type;
                        if (typeof instance.shouldComponentUpdate === 'function') {
                            {
                                startPhaseTimer$1(workInProgress, 'shouldComponentUpdate');
                            }
                            var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, newContext);
                            {
                                stopPhaseTimer$1();
                            }
                            {
                                warning$25(shouldUpdate !== undefined, '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', getComponentName_1(workInProgress) || 'Unknown');
                            }
                            return shouldUpdate;
                        }
                        if (type.prototype && type.prototype.isPureReactComponent) {
                            return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
                        }
                        return true;
                    }
                    function checkClassInstance(workInProgress) {
                        var instance = workInProgress.stateNode;
                        var type = workInProgress.type;
                        {
                            var name = getComponentName_1(workInProgress);
                            var renderPresent = instance.render;
                            warning$25(renderPresent, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', name);
                            var noGetInitialStateOnES6 = !instance.getInitialState || instance.getInitialState.isReactClassApproved || instance.state;
                            warning$25(noGetInitialStateOnES6, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', name);
                            var noGetDefaultPropsOnES6 = !instance.getDefaultProps || instance.getDefaultProps.isReactClassApproved;
                            warning$25(noGetDefaultPropsOnES6, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', name);
                            var noInstancePropTypes = !instance.propTypes;
                            warning$25(noInstancePropTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', name);
                            var noInstanceContextTypes = !instance.contextTypes;
                            warning$25(noInstanceContextTypes, 'contextTypes was defined as an instance property on %s. Use a static ' + 'property to define contextTypes instead.', name);
                            var noComponentShouldUpdate = typeof instance.componentShouldUpdate !== 'function';
                            warning$25(noComponentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', name);
                            if (type.prototype && type.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== 'undefined') {
                                warning$25(false, '%s has a method called shouldComponentUpdate(). ' + 'shouldComponentUpdate should not be used when extending React.PureComponent. ' + 'Please extend React.Component if shouldComponentUpdate is used.', getComponentName_1(workInProgress) || 'A pure component');
                            }
                            var noComponentDidUnmount = typeof instance.componentDidUnmount !== 'function';
                            warning$25(noComponentDidUnmount, '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', name);
                            var noComponentWillRecieveProps = typeof instance.componentWillRecieveProps !== 'function';
                            warning$25(noComponentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', name);
                            var hasMutatedProps = instance.props !== workInProgress.pendingProps;
                            warning$25(instance.props === undefined || !hasMutatedProps, '%s(...): When calling super() in `%s`, make sure to pass ' + 'up the same props that your component\'s constructor was passed.', name, name);
                            var noInstanceDefaultProps = !instance.defaultProps;
                            warning$25(noInstanceDefaultProps, 'Setting defaultProps as an instance property on %s is not supported and will be ignored.' + ' Instead, define defaultProps as a static property on %s.', name, name);
                        }
                        var state = instance.state;
                        if (state && (typeof state !== 'object' || isArray$1(state))) {
                            invariant(false, '%s.state: must be set to an object or null', getComponentName_1(workInProgress));
                        }
                        if (typeof instance.getChildContext === 'function') {
                            !(typeof workInProgress.type.childContextTypes === 'object') ? invariant(false, '%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().', getComponentName_1(workInProgress)) : void 0;
                        }
                    }
                    function resetInputPointers(workInProgress, instance) {
                        instance.props = workInProgress.memoizedProps;
                        instance.state = workInProgress.memoizedState;
                    }
                    function adoptClassInstance(workInProgress, instance) {
                        instance.updater = updater;
                        workInProgress.stateNode = instance;
                        ReactInstanceMap_1.set(instance, workInProgress);
                        {
                            instance._reactInternalInstance = fakeInternalInstance;
                        }
                    }
                    function constructClassInstance(workInProgress, props) {
                        var ctor = workInProgress.type;
                        var unmaskedContext = getUnmaskedContext$2(workInProgress);
                        var needsContext = isContextConsumer$1(workInProgress);
                        var context = needsContext ? getMaskedContext$2(workInProgress, unmaskedContext) : emptyObject;
                        var instance = new ctor(props, context);
                        adoptClassInstance(workInProgress, instance);
                        if (needsContext) {
                            cacheContext$1(workInProgress, unmaskedContext, context);
                        }
                        return instance;
                    }
                    function callComponentWillMount(workInProgress, instance) {
                        {
                            startPhaseTimer$1(workInProgress, 'componentWillMount');
                        }
                        var oldState = instance.state;
                        instance.componentWillMount();
                        {
                            stopPhaseTimer$1();
                        }
                        if (oldState !== instance.state) {
                            {
                                warning$25(false, '%s.componentWillMount(): Assigning directly to this.state is ' + 'deprecated (except inside a component\'s ' + 'constructor). Use setState instead.', getComponentName_1(workInProgress));
                            }
                            updater.enqueueReplaceState(instance, instance.state, null);
                        }
                    }
                    function callComponentWillReceiveProps(workInProgress, instance, newProps, newContext) {
                        {
                            startPhaseTimer$1(workInProgress, 'componentWillReceiveProps');
                        }
                        var oldState = instance.state;
                        instance.componentWillReceiveProps(newProps, newContext);
                        {
                            stopPhaseTimer$1();
                        }
                        if (instance.state !== oldState) {
                            {
                                warning$25(false, '%s.componentWillReceiveProps(): Assigning directly to ' + 'this.state is deprecated (except inside a component\'s ' + 'constructor). Use setState instead.', getComponentName_1(workInProgress));
                            }
                            updater.enqueueReplaceState(instance, instance.state, null);
                        }
                    }
                    function mountClassInstance(workInProgress, priorityLevel) {
                        var current = workInProgress.alternate;
                        {
                            checkClassInstance(workInProgress);
                        }
                        var instance = workInProgress.stateNode;
                        var state = instance.state || null;
                        var props = workInProgress.pendingProps;
                        !props ? invariant(false, 'There must be pending props for an initial mount. This error is likely caused by a bug in React. Please file an issue.') : void 0;
                        var unmaskedContext = getUnmaskedContext$2(workInProgress);
                        instance.props = props;
                        instance.state = state;
                        instance.refs = emptyObject;
                        instance.context = getMaskedContext$2(workInProgress, unmaskedContext);
                        if (ReactFeatureFlags_1.enableAsyncSubtreeAPI && workInProgress.type != null && workInProgress.type.prototype != null && workInProgress.type.prototype.unstable_isAsyncReactComponent === true) {
                            workInProgress.internalContextTag |= AsyncUpdates$1;
                        }
                        if (typeof instance.componentWillMount === 'function') {
                            callComponentWillMount(workInProgress, instance);
                            var updateQueue = workInProgress.updateQueue;
                            if (updateQueue !== null) {
                                instance.state = beginUpdateQueue$2(current, workInProgress, updateQueue, instance, state, props, priorityLevel);
                            }
                        }
                        if (typeof instance.componentDidMount === 'function') {
                            workInProgress.effectTag |= Update$1;
                        }
                    }
                    function updateClassInstance(current, workInProgress, priorityLevel) {
                        var instance = workInProgress.stateNode;
                        resetInputPointers(workInProgress, instance);
                        var oldProps = workInProgress.memoizedProps;
                        var newProps = workInProgress.pendingProps;
                        if (!newProps) {
                            newProps = oldProps;
                            !(newProps != null) ? invariant(false, 'There should always be pending or memoized props. This error is likely caused by a bug in React. Please file an issue.') : void 0;
                        }
                        var oldContext = instance.context;
                        var newUnmaskedContext = getUnmaskedContext$2(workInProgress);
                        var newContext = getMaskedContext$2(workInProgress, newUnmaskedContext);
                        if (typeof instance.componentWillReceiveProps === 'function' && (oldProps !== newProps || oldContext !== newContext)) {
                            callComponentWillReceiveProps(workInProgress, instance, newProps, newContext);
                        }
                        var oldState = workInProgress.memoizedState;
                        var newState = void 0;
                        if (workInProgress.updateQueue !== null) {
                            newState = beginUpdateQueue$2(current, workInProgress, workInProgress.updateQueue, instance, oldState, newProps, priorityLevel);
                        } else {
                            newState = oldState;
                        }
                        if (oldProps === newProps && oldState === newState && !hasContextChanged$2() && !(workInProgress.updateQueue !== null && workInProgress.updateQueue.hasForceUpdate)) {
                            if (typeof instance.componentDidUpdate === 'function') {
                                if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
                                    workInProgress.effectTag |= Update$1;
                                }
                            }
                            return false;
                        }
                        var shouldUpdate = checkShouldComponentUpdate(workInProgress, oldProps, newProps, oldState, newState, newContext);
                        if (shouldUpdate) {
                            if (typeof instance.componentWillUpdate === 'function') {
                                {
                                    startPhaseTimer$1(workInProgress, 'componentWillUpdate');
                                }
                                instance.componentWillUpdate(newProps, newState, newContext);
                                {
                                    stopPhaseTimer$1();
                                }
                            }
                            if (typeof instance.componentDidUpdate === 'function') {
                                workInProgress.effectTag |= Update$1;
                            }
                        } else {
                            if (typeof instance.componentDidUpdate === 'function') {
                                if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
                                    workInProgress.effectTag |= Update$1;
                                }
                            }
                            memoizeProps(workInProgress, newProps);
                            memoizeState(workInProgress, newState);
                        }
                        instance.props = newProps;
                        instance.state = newState;
                        instance.context = newContext;
                        return shouldUpdate;
                    }
                    return {
                        adoptClassInstance: adoptClassInstance,
                        constructClassInstance: constructClassInstance,
                        mountClassInstance: mountClassInstance,
                        updateClassInstance: updateClassInstance
                    };
                };
                var mountChildFibersInPlace = ReactChildFiber.mountChildFibersInPlace;
                var reconcileChildFibers = ReactChildFiber.reconcileChildFibers;
                var reconcileChildFibersInPlace = ReactChildFiber.reconcileChildFibersInPlace;
                var cloneChildFibers = ReactChildFiber.cloneChildFibers;
                var beginUpdateQueue$1 = ReactFiberUpdateQueue.beginUpdateQueue;
                var getMaskedContext$1 = ReactFiberContext.getMaskedContext;
                var getUnmaskedContext$1 = ReactFiberContext.getUnmaskedContext;
                var hasContextChanged$1 = ReactFiberContext.hasContextChanged;
                var pushContextProvider$1 = ReactFiberContext.pushContextProvider;
                var pushTopLevelContextObject$1 = ReactFiberContext.pushTopLevelContextObject;
                var invalidateContextProvider$1 = ReactFiberContext.invalidateContextProvider;
                var IndeterminateComponent$2 = ReactTypeOfWork.IndeterminateComponent;
                var FunctionalComponent$1 = ReactTypeOfWork.FunctionalComponent;
                var ClassComponent$6 = ReactTypeOfWork.ClassComponent;
                var HostRoot$7 = ReactTypeOfWork.HostRoot;
                var HostComponent$7 = ReactTypeOfWork.HostComponent;
                var HostText$4 = ReactTypeOfWork.HostText;
                var HostPortal$4 = ReactTypeOfWork.HostPortal;
                var CoroutineComponent$1 = ReactTypeOfWork.CoroutineComponent;
                var CoroutineHandlerPhase = ReactTypeOfWork.CoroutineHandlerPhase;
                var YieldComponent$2 = ReactTypeOfWork.YieldComponent;
                var Fragment$2 = ReactTypeOfWork.Fragment;
                var NoWork$3 = ReactPriorityLevel.NoWork;
                var OffscreenPriority$1 = ReactPriorityLevel.OffscreenPriority;
                var PerformedWork$1 = ReactTypeOfSideEffect.PerformedWork;
                var Placement$2 = ReactTypeOfSideEffect.Placement;
                var ContentReset$1 = ReactTypeOfSideEffect.ContentReset;
                var Err$1 = ReactTypeOfSideEffect.Err;
                var Ref$1 = ReactTypeOfSideEffect.Ref;
                var ReactCurrentOwner$2 = ReactGlobalSharedState_1.ReactCurrentOwner;
                {
                    var ReactDebugCurrentFiber$4 = ReactDebugCurrentFiber_1;
                    var _require7 = ReactDebugFiberPerf_1, cancelWorkTimer = _require7.cancelWorkTimer;
                    var warning$23 = require$$0;
                    var warnedAboutStatelessRefs = {};
                }
                var ReactFiberBeginWork = function (config, hostContext, hydrationContext, scheduleUpdate, getPriorityContext) {
                    var shouldSetTextContent = config.shouldSetTextContent, useSyncScheduling = config.useSyncScheduling, shouldDeprioritizeSubtree = config.shouldDeprioritizeSubtree;
                    var pushHostContext = hostContext.pushHostContext, pushHostContainer = hostContext.pushHostContainer;
                    var enterHydrationState = hydrationContext.enterHydrationState, resetHydrationState = hydrationContext.resetHydrationState, tryToClaimNextHydratableInstance = hydrationContext.tryToClaimNextHydratableInstance;
                    var _ReactFiberClassCompo = ReactFiberClassComponent(scheduleUpdate, getPriorityContext, memoizeProps, memoizeState), adoptClassInstance = _ReactFiberClassCompo.adoptClassInstance, constructClassInstance = _ReactFiberClassCompo.constructClassInstance, mountClassInstance = _ReactFiberClassCompo.mountClassInstance, updateClassInstance = _ReactFiberClassCompo.updateClassInstance;
                    function reconcileChildren(current, workInProgress, nextChildren) {
                        var priorityLevel = workInProgress.pendingWorkPriority;
                        reconcileChildrenAtPriority(current, workInProgress, nextChildren, priorityLevel);
                    }
                    function reconcileChildrenAtPriority(current, workInProgress, nextChildren, priorityLevel) {
                        if (current === null) {
                            workInProgress.child = mountChildFibersInPlace(workInProgress, workInProgress.child, nextChildren, priorityLevel);
                        } else if (current.child === workInProgress.child) {
                            workInProgress.child = reconcileChildFibers(workInProgress, workInProgress.child, nextChildren, priorityLevel);
                        } else {
                            workInProgress.child = reconcileChildFibersInPlace(workInProgress, workInProgress.child, nextChildren, priorityLevel);
                        }
                    }
                    function updateFragment(current, workInProgress) {
                        var nextChildren = workInProgress.pendingProps;
                        if (hasContextChanged$1()) {
                            if (nextChildren === null) {
                                nextChildren = workInProgress.memoizedProps;
                            }
                        } else if (nextChildren === null || workInProgress.memoizedProps === nextChildren) {
                            return bailoutOnAlreadyFinishedWork(current, workInProgress);
                        }
                        reconcileChildren(current, workInProgress, nextChildren);
                        memoizeProps(workInProgress, nextChildren);
                        return workInProgress.child;
                    }
                    function markRef(current, workInProgress) {
                        var ref = workInProgress.ref;
                        if (ref !== null && (!current || current.ref !== ref)) {
                            workInProgress.effectTag |= Ref$1;
                        }
                    }
                    function updateFunctionalComponent(current, workInProgress) {
                        var fn = workInProgress.type;
                        var nextProps = workInProgress.pendingProps;
                        var memoizedProps = workInProgress.memoizedProps;
                        if (hasContextChanged$1()) {
                            if (nextProps === null) {
                                nextProps = memoizedProps;
                            }
                        } else {
                            if (nextProps === null || memoizedProps === nextProps) {
                                return bailoutOnAlreadyFinishedWork(current, workInProgress);
                            }
                        }
                        var unmaskedContext = getUnmaskedContext$1(workInProgress);
                        var context = getMaskedContext$1(workInProgress, unmaskedContext);
                        var nextChildren;
                        {
                            ReactCurrentOwner$2.current = workInProgress;
                            ReactDebugCurrentFiber$4.setCurrentFiber(workInProgress, 'render');
                            nextChildren = fn(nextProps, context);
                            ReactDebugCurrentFiber$4.setCurrentFiber(workInProgress, null);
                        }
                        workInProgress.effectTag |= PerformedWork$1;
                        reconcileChildren(current, workInProgress, nextChildren);
                        memoizeProps(workInProgress, nextProps);
                        return workInProgress.child;
                    }
                    function updateClassComponent(current, workInProgress, priorityLevel) {
                        var hasContext = pushContextProvider$1(workInProgress);
                        var shouldUpdate = void 0;
                        if (current === null) {
                            if (!workInProgress.stateNode) {
                                constructClassInstance(workInProgress, workInProgress.pendingProps);
                                mountClassInstance(workInProgress, priorityLevel);
                                shouldUpdate = true;
                            } else {
                                invariant(false, 'Resuming work not yet implemented.');
                            }
                        } else {
                            shouldUpdate = updateClassInstance(current, workInProgress, priorityLevel);
                        }
                        return finishClassComponent(current, workInProgress, shouldUpdate, hasContext);
                    }
                    function finishClassComponent(current, workInProgress, shouldUpdate, hasContext) {
                        markRef(current, workInProgress);
                        if (!shouldUpdate) {
                            if (hasContext) {
                                invalidateContextProvider$1(workInProgress, false);
                            }
                            return bailoutOnAlreadyFinishedWork(current, workInProgress);
                        }
                        var instance = workInProgress.stateNode;
                        ReactCurrentOwner$2.current = workInProgress;
                        var nextChildren = void 0;
                        {
                            ReactDebugCurrentFiber$4.setCurrentFiber(workInProgress, 'render');
                            nextChildren = instance.render();
                            ReactDebugCurrentFiber$4.setCurrentFiber(workInProgress, null);
                        }
                        workInProgress.effectTag |= PerformedWork$1;
                        reconcileChildren(current, workInProgress, nextChildren);
                        memoizeState(workInProgress, instance.state);
                        memoizeProps(workInProgress, instance.props);
                        if (hasContext) {
                            invalidateContextProvider$1(workInProgress, true);
                        }
                        return workInProgress.child;
                    }
                    function pushHostRootContext(workInProgress) {
                        var root = workInProgress.stateNode;
                        if (root.pendingContext) {
                            pushTopLevelContextObject$1(workInProgress, root.pendingContext, root.pendingContext !== root.context);
                        } else if (root.context) {
                            pushTopLevelContextObject$1(workInProgress, root.context, false);
                        }
                        pushHostContainer(workInProgress, root.containerInfo);
                    }
                    function updateHostRoot(current, workInProgress, priorityLevel) {
                        pushHostRootContext(workInProgress);
                        var updateQueue = workInProgress.updateQueue;
                        if (updateQueue !== null) {
                            var prevState = workInProgress.memoizedState;
                            var state = beginUpdateQueue$1(current, workInProgress, updateQueue, null, prevState, null, priorityLevel);
                            if (prevState === state) {
                                resetHydrationState();
                                return bailoutOnAlreadyFinishedWork(current, workInProgress);
                            }
                            var element = state.element;
                            if ((current === null || current.child === null) && enterHydrationState(workInProgress)) {
                                workInProgress.effectTag |= Placement$2;
                                workInProgress.child = mountChildFibersInPlace(workInProgress, workInProgress.child, element, priorityLevel);
                            } else {
                                resetHydrationState();
                                reconcileChildren(current, workInProgress, element);
                            }
                            memoizeState(workInProgress, state);
                            return workInProgress.child;
                        }
                        resetHydrationState();
                        return bailoutOnAlreadyFinishedWork(current, workInProgress);
                    }
                    function updateHostComponent(current, workInProgress, renderPriority) {
                        pushHostContext(workInProgress);
                        if (current === null) {
                            tryToClaimNextHydratableInstance(workInProgress);
                        }
                        var type = workInProgress.type;
                        var memoizedProps = workInProgress.memoizedProps;
                        var nextProps = workInProgress.pendingProps;
                        if (nextProps === null) {
                            nextProps = memoizedProps;
                            !(nextProps !== null) ? invariant(false, 'We should always have pending or current props. This error is likely caused by a bug in React. Please file an issue.') : void 0;
                        }
                        var prevProps = current !== null ? current.memoizedProps : null;
                        if (hasContextChanged$1()) {
                        } else if (nextProps === null || memoizedProps === nextProps) {
                            return bailoutOnAlreadyFinishedWork(current, workInProgress);
                        }
                        var nextChildren = nextProps.children;
                        var isDirectTextChild = shouldSetTextContent(type, nextProps);
                        if (isDirectTextChild) {
                            nextChildren = null;
                        } else if (prevProps && shouldSetTextContent(type, prevProps)) {
                            workInProgress.effectTag |= ContentReset$1;
                        }
                        markRef(current, workInProgress);
                        if (renderPriority !== OffscreenPriority$1 && !useSyncScheduling && shouldDeprioritizeSubtree(type, nextProps)) {
                            workInProgress.pendingWorkPriority = OffscreenPriority$1;
                            return null;
                        }
                        reconcileChildren(current, workInProgress, nextChildren);
                        memoizeProps(workInProgress, nextProps);
                        return workInProgress.child;
                    }
                    function updateHostText(current, workInProgress) {
                        if (current === null) {
                            tryToClaimNextHydratableInstance(workInProgress);
                        }
                        var nextProps = workInProgress.pendingProps;
                        if (nextProps === null) {
                            nextProps = workInProgress.memoizedProps;
                        }
                        memoizeProps(workInProgress, nextProps);
                        return null;
                    }
                    function mountIndeterminateComponent(current, workInProgress, priorityLevel) {
                        !(current === null) ? invariant(false, 'An indeterminate component should never have mounted. This error is likely caused by a bug in React. Please file an issue.') : void 0;
                        var fn = workInProgress.type;
                        var props = workInProgress.pendingProps;
                        var unmaskedContext = getUnmaskedContext$1(workInProgress);
                        var context = getMaskedContext$1(workInProgress, unmaskedContext);
                        var value;
                        {
                            ReactCurrentOwner$2.current = workInProgress;
                            value = fn(props, context);
                        }
                        workInProgress.effectTag |= PerformedWork$1;
                        if (typeof value === 'object' && value !== null && typeof value.render === 'function') {
                            workInProgress.tag = ClassComponent$6;
                            var hasContext = pushContextProvider$1(workInProgress);
                            adoptClassInstance(workInProgress, value);
                            mountClassInstance(workInProgress, priorityLevel);
                            return finishClassComponent(current, workInProgress, true, hasContext);
                        } else {
                            workInProgress.tag = FunctionalComponent$1;
                            {
                                var Component = workInProgress.type;
                                if (Component) {
                                    warning$23(!Component.childContextTypes, '%s(...): childContextTypes cannot be defined on a functional component.', Component.displayName || Component.name || 'Component');
                                }
                                if (workInProgress.ref !== null) {
                                    var info = '';
                                    var ownerName = ReactDebugCurrentFiber$4.getCurrentFiberOwnerName();
                                    if (ownerName) {
                                        info += '\n\nCheck the render method of `' + ownerName + '`.';
                                    }
                                    var warningKey = ownerName || workInProgress._debugID || '';
                                    var debugSource = workInProgress._debugSource;
                                    if (debugSource) {
                                        warningKey = debugSource.fileName + ':' + debugSource.lineNumber;
                                    }
                                    if (!warnedAboutStatelessRefs[warningKey]) {
                                        warnedAboutStatelessRefs[warningKey] = true;
                                        warning$23(false, 'Stateless function components cannot be given refs. ' + 'Attempts to access this ref will fail.%s%s', info, ReactDebugCurrentFiber$4.getCurrentFiberStackAddendum());
                                    }
                                }
                            }
                            reconcileChildren(current, workInProgress, value);
                            memoizeProps(workInProgress, props);
                            return workInProgress.child;
                        }
                    }
                    function updateCoroutineComponent(current, workInProgress) {
                        var nextCoroutine = workInProgress.pendingProps;
                        if (hasContextChanged$1()) {
                            if (nextCoroutine === null) {
                                nextCoroutine = current && current.memoizedProps;
                                !(nextCoroutine !== null) ? invariant(false, 'We should always have pending or current props. This error is likely caused by a bug in React. Please file an issue.') : void 0;
                            }
                        } else if (nextCoroutine === null || workInProgress.memoizedProps === nextCoroutine) {
                            nextCoroutine = workInProgress.memoizedProps;
                        }
                        var nextChildren = nextCoroutine.children;
                        var priorityLevel = workInProgress.pendingWorkPriority;
                        if (current === null) {
                            workInProgress.stateNode = mountChildFibersInPlace(workInProgress, workInProgress.stateNode, nextChildren, priorityLevel);
                        } else if (current.child === workInProgress.child) {
                            workInProgress.stateNode = reconcileChildFibers(workInProgress, workInProgress.stateNode, nextChildren, priorityLevel);
                        } else {
                            workInProgress.stateNode = reconcileChildFibersInPlace(workInProgress, workInProgress.stateNode, nextChildren, priorityLevel);
                        }
                        memoizeProps(workInProgress, nextCoroutine);
                        return workInProgress.stateNode;
                    }
                    function updatePortalComponent(current, workInProgress) {
                        pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
                        var priorityLevel = workInProgress.pendingWorkPriority;
                        var nextChildren = workInProgress.pendingProps;
                        if (hasContextChanged$1()) {
                            if (nextChildren === null) {
                                nextChildren = current && current.memoizedProps;
                                !(nextChildren != null) ? invariant(false, 'We should always have pending or current props. This error is likely caused by a bug in React. Please file an issue.') : void 0;
                            }
                        } else if (nextChildren === null || workInProgress.memoizedProps === nextChildren) {
                            return bailoutOnAlreadyFinishedWork(current, workInProgress);
                        }
                        if (current === null) {
                            workInProgress.child = reconcileChildFibersInPlace(workInProgress, workInProgress.child, nextChildren, priorityLevel);
                            memoizeProps(workInProgress, nextChildren);
                        } else {
                            reconcileChildren(current, workInProgress, nextChildren);
                            memoizeProps(workInProgress, nextChildren);
                        }
                        return workInProgress.child;
                    }
                    function bailoutOnAlreadyFinishedWork(current, workInProgress) {
                        {
                            cancelWorkTimer(workInProgress);
                        }
                        cloneChildFibers(current, workInProgress);
                        return workInProgress.child;
                    }
                    function bailoutOnLowPriority(current, workInProgress) {
                        {
                            cancelWorkTimer(workInProgress);
                        }
                        switch (workInProgress.tag) {
                        case HostRoot$7:
                            pushHostRootContext(workInProgress);
                            break;
                        case ClassComponent$6:
                            pushContextProvider$1(workInProgress);
                            break;
                        case HostPortal$4:
                            pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
                            break;
                        }
                        return null;
                    }
                    function memoizeProps(workInProgress, nextProps) {
                        workInProgress.memoizedProps = nextProps;
                    }
                    function memoizeState(workInProgress, nextState) {
                        workInProgress.memoizedState = nextState;
                    }
                    function beginWork(current, workInProgress, priorityLevel) {
                        if (workInProgress.pendingWorkPriority === NoWork$3 || workInProgress.pendingWorkPriority > priorityLevel) {
                            return bailoutOnLowPriority(current, workInProgress);
                        }
                        {
                            ReactDebugCurrentFiber$4.setCurrentFiber(workInProgress, null);
                        }
                        switch (workInProgress.tag) {
                        case IndeterminateComponent$2:
                            return mountIndeterminateComponent(current, workInProgress, priorityLevel);
                        case FunctionalComponent$1:
                            return updateFunctionalComponent(current, workInProgress);
                        case ClassComponent$6:
                            return updateClassComponent(current, workInProgress, priorityLevel);
                        case HostRoot$7:
                            return updateHostRoot(current, workInProgress, priorityLevel);
                        case HostComponent$7:
                            return updateHostComponent(current, workInProgress, priorityLevel);
                        case HostText$4:
                            return updateHostText(current, workInProgress);
                        case CoroutineHandlerPhase:
                            workInProgress.tag = CoroutineComponent$1;
                        case CoroutineComponent$1:
                            return updateCoroutineComponent(current, workInProgress);
                        case YieldComponent$2:
                            return null;
                        case HostPortal$4:
                            return updatePortalComponent(current, workInProgress);
                        case Fragment$2:
                            return updateFragment(current, workInProgress);
                        default:
                            invariant(false, 'Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue.');
                        }
                    }
                    function beginFailedWork(current, workInProgress, priorityLevel) {
                        switch (workInProgress.tag) {
                        case ClassComponent$6:
                            pushContextProvider$1(workInProgress);
                            break;
                        case HostRoot$7:
                            pushHostRootContext(workInProgress);
                            break;
                        default:
                            invariant(false, 'Invalid type of work. This error is likely caused by a bug in React. Please file an issue.');
                        }
                        workInProgress.effectTag |= Err$1;
                        if (current === null) {
                            workInProgress.child = null;
                        } else if (workInProgress.child !== current.child) {
                            workInProgress.child = current.child;
                        }
                        if (workInProgress.pendingWorkPriority === NoWork$3 || workInProgress.pendingWorkPriority > priorityLevel) {
                            return bailoutOnLowPriority(current, workInProgress);
                        }
                        workInProgress.firstEffect = null;
                        workInProgress.lastEffect = null;
                        var nextChildren = null;
                        reconcileChildrenAtPriority(current, workInProgress, nextChildren, priorityLevel);
                        if (workInProgress.tag === ClassComponent$6) {
                            var instance = workInProgress.stateNode;
                            workInProgress.memoizedProps = instance.props;
                            workInProgress.memoizedState = instance.state;
                        }
                        return workInProgress.child;
                    }
                    return {
                        beginWork: beginWork,
                        beginFailedWork: beginFailedWork
                    };
                };
                var reconcileChildFibers$2 = ReactChildFiber.reconcileChildFibers;
                var popContextProvider$2 = ReactFiberContext.popContextProvider;
                var popTopLevelContextObject$1 = ReactFiberContext.popTopLevelContextObject;
                var IndeterminateComponent$3 = ReactTypeOfWork.IndeterminateComponent;
                var FunctionalComponent$3 = ReactTypeOfWork.FunctionalComponent;
                var ClassComponent$8 = ReactTypeOfWork.ClassComponent;
                var HostRoot$8 = ReactTypeOfWork.HostRoot;
                var HostComponent$8 = ReactTypeOfWork.HostComponent;
                var HostText$6 = ReactTypeOfWork.HostText;
                var HostPortal$6 = ReactTypeOfWork.HostPortal;
                var CoroutineComponent$3 = ReactTypeOfWork.CoroutineComponent;
                var CoroutineHandlerPhase$1 = ReactTypeOfWork.CoroutineHandlerPhase;
                var YieldComponent$4 = ReactTypeOfWork.YieldComponent;
                var Fragment$4 = ReactTypeOfWork.Fragment;
                var Placement$4 = ReactTypeOfSideEffect.Placement;
                var Ref$2 = ReactTypeOfSideEffect.Ref;
                var Update$2 = ReactTypeOfSideEffect.Update;
                var OffscreenPriority$2 = ReactPriorityLevel.OffscreenPriority;
                {
                    var ReactDebugCurrentFiber$5 = ReactDebugCurrentFiber_1;
                }
                var ReactFiberCompleteWork = function (config, hostContext, hydrationContext) {
                    var createInstance = config.createInstance, createTextInstance = config.createTextInstance, appendInitialChild = config.appendInitialChild, finalizeInitialChildren = config.finalizeInitialChildren, prepareUpdate = config.prepareUpdate;
                    var getRootHostContainer = hostContext.getRootHostContainer, popHostContext = hostContext.popHostContext, getHostContext = hostContext.getHostContext, popHostContainer = hostContext.popHostContainer;
                    var prepareToHydrateHostInstance = hydrationContext.prepareToHydrateHostInstance, prepareToHydrateHostTextInstance = hydrationContext.prepareToHydrateHostTextInstance, popHydrationState = hydrationContext.popHydrationState;
                    function markUpdate(workInProgress) {
                        workInProgress.effectTag |= Update$2;
                    }
                    function markRef(workInProgress) {
                        workInProgress.effectTag |= Ref$2;
                    }
                    function appendAllYields(yields, workInProgress) {
                        var node = workInProgress.stateNode;
                        if (node) {
                            node['return'] = workInProgress;
                        }
                        while (node !== null) {
                            if (node.tag === HostComponent$8 || node.tag === HostText$6 || node.tag === HostPortal$6) {
                                invariant(false, 'A coroutine cannot have host component children.');
                            } else if (node.tag === YieldComponent$4) {
                                yields.push(node.type);
                            } else if (node.child !== null) {
                                node.child['return'] = node;
                                node = node.child;
                                continue;
                            }
                            while (node.sibling === null) {
                                if (node['return'] === null || node['return'] === workInProgress) {
                                    return;
                                }
                                node = node['return'];
                            }
                            node.sibling['return'] = node['return'];
                            node = node.sibling;
                        }
                    }
                    function moveCoroutineToHandlerPhase(current, workInProgress) {
                        var coroutine = workInProgress.memoizedProps;
                        !coroutine ? invariant(false, 'Should be resolved by now. This error is likely caused by a bug in React. Please file an issue.') : void 0;
                        workInProgress.tag = CoroutineHandlerPhase$1;
                        var yields = [];
                        appendAllYields(yields, workInProgress);
                        var fn = coroutine.handler;
                        var props = coroutine.props;
                        var nextChildren = fn(props, yields);
                        var currentFirstChild = current !== null ? current.child : null;
                        var priority = workInProgress.pendingWorkPriority;
                        workInProgress.child = reconcileChildFibers$2(workInProgress, currentFirstChild, nextChildren, priority);
                        return workInProgress.child;
                    }
                    function appendAllChildren(parent, workInProgress) {
                        var node = workInProgress.child;
                        while (node !== null) {
                            if (node.tag === HostComponent$8 || node.tag === HostText$6) {
                                appendInitialChild(parent, node.stateNode);
                            } else if (node.tag === HostPortal$6) {
                            } else if (node.child !== null) {
                                node = node.child;
                                continue;
                            }
                            if (node === workInProgress) {
                                return;
                            }
                            while (node.sibling === null) {
                                if (node['return'] === null || node['return'] === workInProgress) {
                                    return;
                                }
                                node = node['return'];
                            }
                            node = node.sibling;
                        }
                    }
                    function completeWork(current, workInProgress, renderPriority) {
                        {
                            ReactDebugCurrentFiber$5.setCurrentFiber(workInProgress, null);
                        }
                        var newProps = workInProgress.pendingProps;
                        if (newProps === null) {
                            newProps = workInProgress.memoizedProps;
                        } else if (workInProgress.pendingWorkPriority !== OffscreenPriority$2 || renderPriority === OffscreenPriority$2) {
                            workInProgress.pendingProps = null;
                        }
                        switch (workInProgress.tag) {
                        case FunctionalComponent$3:
                            return null;
                        case ClassComponent$8: {
                                popContextProvider$2(workInProgress);
                                return null;
                            }
                        case HostRoot$8: {
                                popHostContainer(workInProgress);
                                popTopLevelContextObject$1(workInProgress);
                                var fiberRoot = workInProgress.stateNode;
                                if (fiberRoot.pendingContext) {
                                    fiberRoot.context = fiberRoot.pendingContext;
                                    fiberRoot.pendingContext = null;
                                }
                                if (current === null || current.child === null) {
                                    popHydrationState(workInProgress);
                                    workInProgress.effectTag &= ~Placement$4;
                                }
                                return null;
                            }
                        case HostComponent$8: {
                                popHostContext(workInProgress);
                                var rootContainerInstance = getRootHostContainer();
                                var type = workInProgress.type;
                                if (current !== null && workInProgress.stateNode != null) {
                                    var oldProps = current.memoizedProps;
                                    var instance = workInProgress.stateNode;
                                    var currentHostContext = getHostContext();
                                    var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
                                    workInProgress.updateQueue = updatePayload;
                                    if (updatePayload) {
                                        markUpdate(workInProgress);
                                    }
                                    if (current.ref !== workInProgress.ref) {
                                        markRef(workInProgress);
                                    }
                                } else {
                                    if (!newProps) {
                                        !(workInProgress.stateNode !== null) ? invariant(false, 'We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.') : void 0;
                                        return null;
                                    }
                                    var _currentHostContext = getHostContext();
                                    var wasHydrated = popHydrationState(workInProgress);
                                    if (wasHydrated) {
                                        if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, _currentHostContext)) {
                                            markUpdate(workInProgress);
                                        }
                                    } else {
                                        var _instance = createInstance(type, newProps, rootContainerInstance, _currentHostContext, workInProgress);
                                        appendAllChildren(_instance, workInProgress);
                                        if (finalizeInitialChildren(_instance, type, newProps, rootContainerInstance)) {
                                            markUpdate(workInProgress);
                                        }
                                        workInProgress.stateNode = _instance;
                                    }
                                    if (workInProgress.ref !== null) {
                                        markRef(workInProgress);
                                    }
                                }
                                return null;
                            }
                        case HostText$6: {
                                var newText = newProps;
                                if (current && workInProgress.stateNode != null) {
                                    var oldText = current.memoizedProps;
                                    if (oldText !== newText) {
                                        markUpdate(workInProgress);
                                    }
                                } else {
                                    if (typeof newText !== 'string') {
                                        !(workInProgress.stateNode !== null) ? invariant(false, 'We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.') : void 0;
                                        return null;
                                    }
                                    var _rootContainerInstance = getRootHostContainer();
                                    var _currentHostContext2 = getHostContext();
                                    var _wasHydrated = popHydrationState(workInProgress);
                                    if (_wasHydrated) {
                                        if (prepareToHydrateHostTextInstance(workInProgress)) {
                                            markUpdate(workInProgress);
                                        }
                                    } else {
                                        workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext2, workInProgress);
                                    }
                                }
                                return null;
                            }
                        case CoroutineComponent$3:
                            return moveCoroutineToHandlerPhase(current, workInProgress);
                        case CoroutineHandlerPhase$1:
                            workInProgress.tag = CoroutineComponent$3;
                            return null;
                        case YieldComponent$4:
                            return null;
                        case Fragment$4:
                            return null;
                        case HostPortal$6:
                            markUpdate(workInProgress);
                            popHostContainer(workInProgress);
                            return null;
                        case IndeterminateComponent$3:
                            invariant(false, 'An indeterminate component should have become determinate before completing. This error is likely caused by a bug in React. Please file an issue.');
                        default:
                            invariant(false, 'Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue.');
                        }
                    }
                    return { completeWork: completeWork };
                };
                {
                    var warning$26 = require$$0;
                }
                var onCommitFiberRoot = null;
                var onCommitFiberUnmount = null;
                var hasLoggedError = false;
                function catchErrors(fn) {
                    return function (arg) {
                        try {
                            return fn(arg);
                        } catch (err) {
                            if (true && !hasLoggedError) {
                                hasLoggedError = true;
                                warning$26(false, 'React DevTools encountered an error: %s', err);
                            }
                        }
                    };
                }
                function injectInternals$1(internals) {
                    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
                        return false;
                    }
                    var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
                    if (!hook.supportsFiber) {
                        {
                            warning$26(false, 'The installed version of React DevTools is too old and will not work ' + 'with the current version of React. Please update React DevTools. ' + 'https://fb.me/react-devtools');
                        }
                        return true;
                    }
                    try {
                        var rendererID = hook.inject(internals);
                        onCommitFiberRoot = catchErrors(function (root) {
                            return hook.onCommitFiberRoot(rendererID, root);
                        });
                        onCommitFiberUnmount = catchErrors(function (fiber) {
                            return hook.onCommitFiberUnmount(rendererID, fiber);
                        });
                    } catch (err) {
                        {
                            warning$26(false, 'React DevTools encountered an error: %s.', err);
                        }
                    }
                    return true;
                }
                function onCommitRoot$1(root) {
                    if (typeof onCommitFiberRoot === 'function') {
                        onCommitFiberRoot(root);
                    }
                }
                function onCommitUnmount$1(fiber) {
                    if (typeof onCommitFiberUnmount === 'function') {
                        onCommitFiberUnmount(fiber);
                    }
                }
                var injectInternals_1 = injectInternals$1;
                var onCommitRoot_1 = onCommitRoot$1;
                var onCommitUnmount_1 = onCommitUnmount$1;
                var ReactFiberDevToolsHook = {
                    injectInternals: injectInternals_1,
                    onCommitRoot: onCommitRoot_1,
                    onCommitUnmount: onCommitUnmount_1
                };
                var ClassComponent$9 = ReactTypeOfWork.ClassComponent;
                var HostRoot$9 = ReactTypeOfWork.HostRoot;
                var HostComponent$9 = ReactTypeOfWork.HostComponent;
                var HostText$7 = ReactTypeOfWork.HostText;
                var HostPortal$7 = ReactTypeOfWork.HostPortal;
                var CoroutineComponent$4 = ReactTypeOfWork.CoroutineComponent;
                var commitCallbacks$1 = ReactFiberUpdateQueue.commitCallbacks;
                var onCommitUnmount = ReactFiberDevToolsHook.onCommitUnmount;
                var invokeGuardedCallback$2 = ReactErrorUtils_1.invokeGuardedCallback;
                var hasCaughtError$1 = ReactErrorUtils_1.hasCaughtError;
                var clearCaughtError$1 = ReactErrorUtils_1.clearCaughtError;
                var Placement$5 = ReactTypeOfSideEffect.Placement;
                var Update$3 = ReactTypeOfSideEffect.Update;
                var Callback$1 = ReactTypeOfSideEffect.Callback;
                var ContentReset$2 = ReactTypeOfSideEffect.ContentReset;
                {
                    var _require5$1 = ReactDebugFiberPerf_1, startPhaseTimer$2 = _require5$1.startPhaseTimer, stopPhaseTimer$2 = _require5$1.stopPhaseTimer;
                }
                var ReactFiberCommitWork = function (config, captureError) {
                    var commitMount = config.commitMount, commitUpdate = config.commitUpdate, resetTextContent = config.resetTextContent, commitTextUpdate = config.commitTextUpdate, appendChild = config.appendChild, appendChildToContainer = config.appendChildToContainer, insertBefore = config.insertBefore, insertInContainerBefore = config.insertInContainerBefore, removeChild = config.removeChild, removeChildFromContainer = config.removeChildFromContainer, getPublicInstance = config.getPublicInstance;
                    {
                        var callComponentWillUnmountWithTimerInDev = function (current, instance) {
                            startPhaseTimer$2(current, 'componentWillUnmount');
                            instance.props = current.memoizedProps;
                            instance.state = current.memoizedState;
                            instance.componentWillUnmount();
                            stopPhaseTimer$2();
                        };
                    }
                    function safelyCallComponentWillUnmount(current, instance) {
                        {
                            invokeGuardedCallback$2(null, callComponentWillUnmountWithTimerInDev, null, current, instance);
                            if (hasCaughtError$1()) {
                                var unmountError = clearCaughtError$1();
                                captureError(current, unmountError);
                            }
                        }
                    }
                    function safelyDetachRef(current) {
                        var ref = current.ref;
                        if (ref !== null) {
                            {
                                invokeGuardedCallback$2(null, ref, null, null);
                                if (hasCaughtError$1()) {
                                    var refError = clearCaughtError$1();
                                    captureError(current, refError);
                                }
                            }
                        }
                    }
                    function getHostParentFiber(fiber) {
                        var parent = fiber['return'];
                        while (parent !== null) {
                            if (isHostParent(parent)) {
                                return parent;
                            }
                            parent = parent['return'];
                        }
                        invariant(false, 'Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.');
                    }
                    function isHostParent(fiber) {
                        return fiber.tag === HostComponent$9 || fiber.tag === HostRoot$9 || fiber.tag === HostPortal$7;
                    }
                    function getHostSibling(fiber) {
                        var node = fiber;
                        siblings:
                            while (true) {
                                while (node.sibling === null) {
                                    if (node['return'] === null || isHostParent(node['return'])) {
                                        return null;
                                    }
                                    node = node['return'];
                                }
                                node.sibling['return'] = node['return'];
                                node = node.sibling;
                                while (node.tag !== HostComponent$9 && node.tag !== HostText$7) {
                                    if (node.effectTag & Placement$5) {
                                        continue siblings;
                                    }
                                    if (node.child === null || node.tag === HostPortal$7) {
                                        continue siblings;
                                    } else {
                                        node.child['return'] = node;
                                        node = node.child;
                                    }
                                }
                                if (!(node.effectTag & Placement$5)) {
                                    return node.stateNode;
                                }
                            }
                    }
                    function commitPlacement(finishedWork) {
                        var parentFiber = getHostParentFiber(finishedWork);
                        var parent = void 0;
                        var isContainer = void 0;
                        switch (parentFiber.tag) {
                        case HostComponent$9:
                            parent = parentFiber.stateNode;
                            isContainer = false;
                            break;
                        case HostRoot$9:
                            parent = parentFiber.stateNode.containerInfo;
                            isContainer = true;
                            break;
                        case HostPortal$7:
                            parent = parentFiber.stateNode.containerInfo;
                            isContainer = true;
                            break;
                        default:
                            invariant(false, 'Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.');
                        }
                        if (parentFiber.effectTag & ContentReset$2) {
                            resetTextContent(parent);
                            parentFiber.effectTag &= ~ContentReset$2;
                        }
                        var before = getHostSibling(finishedWork);
                        var node = finishedWork;
                        while (true) {
                            if (node.tag === HostComponent$9 || node.tag === HostText$7) {
                                if (before) {
                                    if (isContainer) {
                                        insertInContainerBefore(parent, node.stateNode, before);
                                    } else {
                                        insertBefore(parent, node.stateNode, before);
                                    }
                                } else {
                                    if (isContainer) {
                                        appendChildToContainer(parent, node.stateNode);
                                    } else {
                                        appendChild(parent, node.stateNode);
                                    }
                                }
                            } else if (node.tag === HostPortal$7) {
                            } else if (node.child !== null) {
                                node.child['return'] = node;
                                node = node.child;
                                continue;
                            }
                            if (node === finishedWork) {
                                return;
                            }
                            while (node.sibling === null) {
                                if (node['return'] === null || node['return'] === finishedWork) {
                                    return;
                                }
                                node = node['return'];
                            }
                            node.sibling['return'] = node['return'];
                            node = node.sibling;
                        }
                    }
                    function commitNestedUnmounts(root) {
                        var node = root;
                        while (true) {
                            commitUnmount(node);
                            if (node.child !== null && node.tag !== HostPortal$7) {
                                node.child['return'] = node;
                                node = node.child;
                                continue;
                            }
                            if (node === root) {
                                return;
                            }
                            while (node.sibling === null) {
                                if (node['return'] === null || node['return'] === root) {
                                    return;
                                }
                                node = node['return'];
                            }
                            node.sibling['return'] = node['return'];
                            node = node.sibling;
                        }
                    }
                    function unmountHostComponents(current) {
                        var node = current;
                        var currentParentIsValid = false;
                        var currentParent = void 0;
                        var currentParentIsContainer = void 0;
                        while (true) {
                            if (!currentParentIsValid) {
                                var parent = node['return'];
                                findParent:
                                    while (true) {
                                        !(parent !== null) ? invariant(false, 'Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.') : void 0;
                                        switch (parent.tag) {
                                        case HostComponent$9:
                                            currentParent = parent.stateNode;
                                            currentParentIsContainer = false;
                                            break findParent;
                                        case HostRoot$9:
                                            currentParent = parent.stateNode.containerInfo;
                                            currentParentIsContainer = true;
                                            break findParent;
                                        case HostPortal$7:
                                            currentParent = parent.stateNode.containerInfo;
                                            currentParentIsContainer = true;
                                            break findParent;
                                        }
                                        parent = parent['return'];
                                    }
                                currentParentIsValid = true;
                            }
                            if (node.tag === HostComponent$9 || node.tag === HostText$7) {
                                commitNestedUnmounts(node);
                                if (currentParentIsContainer) {
                                    removeChildFromContainer(currentParent, node.stateNode);
                                } else {
                                    removeChild(currentParent, node.stateNode);
                                }
                            } else if (node.tag === HostPortal$7) {
                                currentParent = node.stateNode.containerInfo;
                                if (node.child !== null) {
                                    node.child['return'] = node;
                                    node = node.child;
                                    continue;
                                }
                            } else {
                                commitUnmount(node);
                                if (node.child !== null) {
                                    node.child['return'] = node;
                                    node = node.child;
                                    continue;
                                }
                            }
                            if (node === current) {
                                return;
                            }
                            while (node.sibling === null) {
                                if (node['return'] === null || node['return'] === current) {
                                    return;
                                }
                                node = node['return'];
                                if (node.tag === HostPortal$7) {
                                    currentParentIsValid = false;
                                }
                            }
                            node.sibling['return'] = node['return'];
                            node = node.sibling;
                        }
                    }
                    function commitDeletion(current) {
                        unmountHostComponents(current);
                        current['return'] = null;
                        current.child = null;
                        if (current.alternate) {
                            current.alternate.child = null;
                            current.alternate['return'] = null;
                        }
                    }
                    function commitUnmount(current) {
                        if (typeof onCommitUnmount === 'function') {
                            onCommitUnmount(current);
                        }
                        switch (current.tag) {
                        case ClassComponent$9: {
                                safelyDetachRef(current);
                                var instance = current.stateNode;
                                if (typeof instance.componentWillUnmount === 'function') {
                                    safelyCallComponentWillUnmount(current, instance);
                                }
                                return;
                            }
                        case HostComponent$9: {
                                safelyDetachRef(current);
                                return;
                            }
                        case CoroutineComponent$4: {
                                commitNestedUnmounts(current.stateNode);
                                return;
                            }
                        case HostPortal$7: {
                                unmountHostComponents(current);
                                return;
                            }
                        }
                    }
                    function commitWork(current, finishedWork) {
                        switch (finishedWork.tag) {
                        case ClassComponent$9: {
                                return;
                            }
                        case HostComponent$9: {
                                var instance = finishedWork.stateNode;
                                if (instance != null) {
                                    var newProps = finishedWork.memoizedProps;
                                    var oldProps = current !== null ? current.memoizedProps : newProps;
                                    var type = finishedWork.type;
                                    var updatePayload = finishedWork.updateQueue;
                                    finishedWork.updateQueue = null;
                                    if (updatePayload !== null) {
                                        commitUpdate(instance, updatePayload, type, oldProps, newProps, finishedWork);
                                    }
                                }
                                return;
                            }
                        case HostText$7: {
                                !(finishedWork.stateNode !== null) ? invariant(false, 'This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.') : void 0;
                                var textInstance = finishedWork.stateNode;
                                var newText = finishedWork.memoizedProps;
                                var oldText = current !== null ? current.memoizedProps : newText;
                                commitTextUpdate(textInstance, oldText, newText);
                                return;
                            }
                        case HostRoot$9: {
                                return;
                            }
                        case HostPortal$7: {
                                return;
                            }
                        default: {
                                invariant(false, 'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');
                            }
                        }
                    }
                    function commitLifeCycles(current, finishedWork) {
                        switch (finishedWork.tag) {
                        case ClassComponent$9: {
                                var instance = finishedWork.stateNode;
                                if (finishedWork.effectTag & Update$3) {
                                    if (current === null) {
                                        {
                                            startPhaseTimer$2(finishedWork, 'componentDidMount');
                                        }
                                        instance.props = finishedWork.memoizedProps;
                                        instance.state = finishedWork.memoizedState;
                                        instance.componentDidMount();
                                        {
                                            stopPhaseTimer$2();
                                        }
                                    } else {
                                        var prevProps = current.memoizedProps;
                                        var prevState = current.memoizedState;
                                        {
                                            startPhaseTimer$2(finishedWork, 'componentDidUpdate');
                                        }
                                        instance.props = finishedWork.memoizedProps;
                                        instance.state = finishedWork.memoizedState;
                                        instance.componentDidUpdate(prevProps, prevState);
                                        {
                                            stopPhaseTimer$2();
                                        }
                                    }
                                }
                                if (finishedWork.effectTag & Callback$1 && finishedWork.updateQueue !== null) {
                                    commitCallbacks$1(finishedWork, finishedWork.updateQueue, instance);
                                }
                                return;
                            }
                        case HostRoot$9: {
                                var updateQueue = finishedWork.updateQueue;
                                if (updateQueue !== null) {
                                    var _instance = finishedWork.child && finishedWork.child.stateNode;
                                    commitCallbacks$1(finishedWork, updateQueue, _instance);
                                }
                                return;
                            }
                        case HostComponent$9: {
                                var _instance2 = finishedWork.stateNode;
                                if (current === null && finishedWork.effectTag & Update$3) {
                                    var type = finishedWork.type;
                                    var props = finishedWork.memoizedProps;
                                    commitMount(_instance2, type, props, finishedWork);
                                }
                                return;
                            }
                        case HostText$7: {
                                return;
                            }
                        case HostPortal$7: {
                                return;
                            }
                        default: {
                                invariant(false, 'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');
                            }
                        }
                    }
                    function commitAttachRef(finishedWork) {
                        var ref = finishedWork.ref;
                        if (ref !== null) {
                            var instance = finishedWork.stateNode;
                            switch (finishedWork.tag) {
                            case HostComponent$9:
                                ref(getPublicInstance(instance));
                                break;
                            default:
                                ref(instance);
                            }
                        }
                    }
                    function commitDetachRef(current) {
                        var currentRef = current.ref;
                        if (currentRef !== null) {
                            currentRef(null);
                        }
                    }
                    return {
                        commitPlacement: commitPlacement,
                        commitDeletion: commitDeletion,
                        commitWork: commitWork,
                        commitLifeCycles: commitLifeCycles,
                        commitAttachRef: commitAttachRef,
                        commitDetachRef: commitDetachRef
                    };
                };
                var createCursor$2 = ReactFiberStack.createCursor;
                var pop$2 = ReactFiberStack.pop;
                var push$2 = ReactFiberStack.push;
                var NO_CONTEXT = {};
                var ReactFiberHostContext = function (config) {
                    var getChildHostContext = config.getChildHostContext, getRootHostContext = config.getRootHostContext;
                    var contextStackCursor = createCursor$2(NO_CONTEXT);
                    var contextFiberStackCursor = createCursor$2(NO_CONTEXT);
                    var rootInstanceStackCursor = createCursor$2(NO_CONTEXT);
                    function requiredContext(c) {
                        !(c !== NO_CONTEXT) ? invariant(false, 'Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.') : void 0;
                        return c;
                    }
                    function getRootHostContainer() {
                        var rootInstance = requiredContext(rootInstanceStackCursor.current);
                        return rootInstance;
                    }
                    function pushHostContainer(fiber, nextRootInstance) {
                        push$2(rootInstanceStackCursor, nextRootInstance, fiber);
                        var nextRootContext = getRootHostContext(nextRootInstance);
                        push$2(contextFiberStackCursor, fiber, fiber);
                        push$2(contextStackCursor, nextRootContext, fiber);
                    }
                    function popHostContainer(fiber) {
                        pop$2(contextStackCursor, fiber);
                        pop$2(contextFiberStackCursor, fiber);
                        pop$2(rootInstanceStackCursor, fiber);
                    }
                    function getHostContext() {
                        var context = requiredContext(contextStackCursor.current);
                        return context;
                    }
                    function pushHostContext(fiber) {
                        var rootInstance = requiredContext(rootInstanceStackCursor.current);
                        var context = requiredContext(contextStackCursor.current);
                        var nextContext = getChildHostContext(context, fiber.type, rootInstance);
                        if (context === nextContext) {
                            return;
                        }
                        push$2(contextFiberStackCursor, fiber, fiber);
                        push$2(contextStackCursor, nextContext, fiber);
                    }
                    function popHostContext(fiber) {
                        if (contextFiberStackCursor.current !== fiber) {
                            return;
                        }
                        pop$2(contextStackCursor, fiber);
                        pop$2(contextFiberStackCursor, fiber);
                    }
                    function resetHostContainer() {
                        contextStackCursor.current = NO_CONTEXT;
                        rootInstanceStackCursor.current = NO_CONTEXT;
                    }
                    return {
                        getHostContext: getHostContext,
                        getRootHostContainer: getRootHostContainer,
                        popHostContainer: popHostContainer,
                        popHostContext: popHostContext,
                        pushHostContainer: pushHostContainer,
                        pushHostContext: pushHostContext,
                        resetHostContainer: resetHostContainer
                    };
                };
                var HostComponent$10 = ReactTypeOfWork.HostComponent;
                var HostText$8 = ReactTypeOfWork.HostText;
                var HostRoot$10 = ReactTypeOfWork.HostRoot;
                var Deletion$2 = ReactTypeOfSideEffect.Deletion;
                var Placement$6 = ReactTypeOfSideEffect.Placement;
                var createFiberFromHostInstanceForDeletion$1 = ReactFiber.createFiberFromHostInstanceForDeletion;
                var ReactFiberHydrationContext = function (config) {
                    var shouldSetTextContent = config.shouldSetTextContent, canHydrateInstance = config.canHydrateInstance, canHydrateTextInstance = config.canHydrateTextInstance, getNextHydratableSibling = config.getNextHydratableSibling, getFirstHydratableChild = config.getFirstHydratableChild, hydrateInstance = config.hydrateInstance, hydrateTextInstance = config.hydrateTextInstance, didNotHydrateInstance = config.didNotHydrateInstance, didNotFindHydratableInstance = config.didNotFindHydratableInstance, didNotFindHydratableTextInstance = config.didNotFindHydratableTextInstance;
                    if (!(canHydrateInstance && canHydrateTextInstance && getNextHydratableSibling && getFirstHydratableChild && hydrateInstance && hydrateTextInstance && didNotHydrateInstance && didNotFindHydratableInstance && didNotFindHydratableTextInstance)) {
                        return {
                            enterHydrationState: function () {
                                return false;
                            },
                            resetHydrationState: function () {
                            },
                            tryToClaimNextHydratableInstance: function () {
                            },
                            prepareToHydrateHostInstance: function () {
                                invariant(false, 'Expected prepareToHydrateHostInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.');
                            },
                            prepareToHydrateHostTextInstance: function () {
                                invariant(false, 'Expected prepareToHydrateHostTextInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.');
                            },
                            popHydrationState: function (fiber) {
                                return false;
                            }
                        };
                    }
                    var hydrationParentFiber = null;
                    var nextHydratableInstance = null;
                    var isHydrating = false;
                    function enterHydrationState(fiber) {
                        var parentInstance = fiber.stateNode.containerInfo;
                        nextHydratableInstance = getFirstHydratableChild(parentInstance);
                        hydrationParentFiber = fiber;
                        isHydrating = true;
                        return true;
                    }
                    function deleteHydratableInstance(returnFiber, instance) {
                        {
                            switch (returnFiber.tag) {
                            case HostRoot$10:
                                didNotHydrateInstance(returnFiber.stateNode.containerInfo, instance);
                                break;
                            case HostComponent$10:
                                didNotHydrateInstance(returnFiber.stateNode, instance);
                                break;
                            }
                        }
                        var childToDelete = createFiberFromHostInstanceForDeletion$1();
                        childToDelete.stateNode = instance;
                        childToDelete['return'] = returnFiber;
                        childToDelete.effectTag = Deletion$2;
                        if (returnFiber.lastEffect !== null) {
                            returnFiber.lastEffect.nextEffect = childToDelete;
                            returnFiber.lastEffect = childToDelete;
                        } else {
                            returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
                        }
                    }
                    function insertNonHydratedInstance(returnFiber, fiber) {
                        fiber.effectTag |= Placement$6;
                        {
                            var parentInstance;
                            switch (returnFiber.tag) {
                            case HostComponent$10:
                                parentInstance = returnFiber.stateNode;
                                break;
                            default:
                                return;
                            }
                            switch (fiber.tag) {
                            case HostComponent$10:
                                var type = fiber.type;
                                var props = fiber.pendingProps;
                                didNotFindHydratableInstance(parentInstance, type, props);
                                break;
                            case HostText$8:
                                var text = fiber.pendingProps;
                                didNotFindHydratableTextInstance(parentInstance, text);
                                break;
                            }
                        }
                    }
                    function canHydrate(fiber, nextInstance) {
                        switch (fiber.tag) {
                        case HostComponent$10: {
                                var type = fiber.type;
                                var props = fiber.pendingProps;
                                return canHydrateInstance(nextInstance, type, props);
                            }
                        case HostText$8: {
                                var text = fiber.pendingProps;
                                return canHydrateTextInstance(nextInstance, text);
                            }
                        default:
                            return false;
                        }
                    }
                    function tryToClaimNextHydratableInstance(fiber) {
                        if (!isHydrating) {
                            return;
                        }
                        var nextInstance = nextHydratableInstance;
                        if (!nextInstance) {
                            insertNonHydratedInstance(hydrationParentFiber, fiber);
                            isHydrating = false;
                            hydrationParentFiber = fiber;
                            return;
                        }
                        if (!canHydrate(fiber, nextInstance)) {
                            nextInstance = getNextHydratableSibling(nextInstance);
                            if (!nextInstance || !canHydrate(fiber, nextInstance)) {
                                insertNonHydratedInstance(hydrationParentFiber, fiber);
                                isHydrating = false;
                                hydrationParentFiber = fiber;
                                return;
                            }
                            deleteHydratableInstance(hydrationParentFiber, nextHydratableInstance);
                        }
                        fiber.stateNode = nextInstance;
                        hydrationParentFiber = fiber;
                        nextHydratableInstance = getFirstHydratableChild(nextInstance);
                    }
                    function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
                        var instance = fiber.stateNode;
                        var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber);
                        fiber.updateQueue = updatePayload;
                        if (updatePayload !== null) {
                            return true;
                        }
                        return false;
                    }
                    function prepareToHydrateHostTextInstance(fiber) {
                        var textInstance = fiber.stateNode;
                        var shouldUpdate = hydrateTextInstance(textInstance, fiber.memoizedProps, fiber);
                        return shouldUpdate;
                    }
                    function popToNextHostParent(fiber) {
                        var parent = fiber['return'];
                        while (parent !== null && parent.tag !== HostComponent$10 && parent.tag !== HostRoot$10) {
                            parent = parent['return'];
                        }
                        hydrationParentFiber = parent;
                    }
                    function popHydrationState(fiber) {
                        if (fiber !== hydrationParentFiber) {
                            return false;
                        }
                        if (!isHydrating) {
                            popToNextHostParent(fiber);
                            isHydrating = true;
                            return false;
                        }
                        var type = fiber.type;
                        if (fiber.tag !== HostComponent$10 || type !== 'head' && type !== 'body' && !shouldSetTextContent(type, fiber.memoizedProps)) {
                            var nextInstance = nextHydratableInstance;
                            while (nextInstance) {
                                deleteHydratableInstance(fiber, nextInstance);
                                nextInstance = getNextHydratableSibling(nextInstance);
                            }
                        }
                        popToNextHostParent(fiber);
                        nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
                        return true;
                    }
                    function resetHydrationState() {
                        hydrationParentFiber = null;
                        nextHydratableInstance = null;
                        isHydrating = false;
                    }
                    return {
                        enterHydrationState: enterHydrationState,
                        resetHydrationState: resetHydrationState,
                        tryToClaimNextHydratableInstance: tryToClaimNextHydratableInstance,
                        prepareToHydrateHostInstance: prepareToHydrateHostInstance,
                        prepareToHydrateHostTextInstance: prepareToHydrateHostTextInstance,
                        popHydrationState: popHydrationState
                    };
                };
                var ReactFiberInstrumentation$2 = { debugTool: null };
                var ReactFiberInstrumentation_1 = ReactFiberInstrumentation$2;
                var popContextProvider$1 = ReactFiberContext.popContextProvider;
                var reset$1 = ReactFiberStack.reset;
                var getStackAddendumByWorkInProgressFiber$2 = ReactFiberComponentTreeHook.getStackAddendumByWorkInProgressFiber;
                var logCapturedError = ReactFiberErrorLogger.logCapturedError;
                var invokeGuardedCallback$1 = ReactErrorUtils_1.invokeGuardedCallback;
                var hasCaughtError = ReactErrorUtils_1.hasCaughtError;
                var clearCaughtError = ReactErrorUtils_1.clearCaughtError;
                var ReactCurrentOwner$1 = ReactGlobalSharedState_1.ReactCurrentOwner;
                var createWorkInProgress$1 = ReactFiber.createWorkInProgress;
                var largerPriority$1 = ReactFiber.largerPriority;
                var onCommitRoot = ReactFiberDevToolsHook.onCommitRoot;
                var NoWork$2 = ReactPriorityLevel.NoWork;
                var SynchronousPriority$1 = ReactPriorityLevel.SynchronousPriority;
                var TaskPriority$1 = ReactPriorityLevel.TaskPriority;
                var HighPriority = ReactPriorityLevel.HighPriority;
                var LowPriority = ReactPriorityLevel.LowPriority;
                var OffscreenPriority = ReactPriorityLevel.OffscreenPriority;
                var AsyncUpdates = ReactTypeOfInternalContext.AsyncUpdates;
                var PerformedWork = ReactTypeOfSideEffect.PerformedWork;
                var Placement$1 = ReactTypeOfSideEffect.Placement;
                var Update = ReactTypeOfSideEffect.Update;
                var PlacementAndUpdate = ReactTypeOfSideEffect.PlacementAndUpdate;
                var Deletion = ReactTypeOfSideEffect.Deletion;
                var ContentReset = ReactTypeOfSideEffect.ContentReset;
                var Callback = ReactTypeOfSideEffect.Callback;
                var Err = ReactTypeOfSideEffect.Err;
                var Ref = ReactTypeOfSideEffect.Ref;
                var HostRoot$6 = ReactTypeOfWork.HostRoot;
                var HostComponent$6 = ReactTypeOfWork.HostComponent;
                var HostPortal$3 = ReactTypeOfWork.HostPortal;
                var ClassComponent$5 = ReactTypeOfWork.ClassComponent;
                var getUpdatePriority$1 = ReactFiberUpdateQueue.getUpdatePriority;
                var _require14 = ReactFiberContext;
                var resetContext$1 = _require14.resetContext;
                {
                    var warning$22 = require$$0;
                    var ReactFiberInstrumentation$1 = ReactFiberInstrumentation_1;
                    var ReactDebugCurrentFiber$3 = ReactDebugCurrentFiber_1;
                    var _require15 = ReactDebugFiberPerf_1, recordEffect = _require15.recordEffect, recordScheduleUpdate = _require15.recordScheduleUpdate, startWorkTimer = _require15.startWorkTimer, stopWorkTimer = _require15.stopWorkTimer, stopFailedWorkTimer = _require15.stopFailedWorkTimer, startWorkLoopTimer = _require15.startWorkLoopTimer, stopWorkLoopTimer = _require15.stopWorkLoopTimer, startCommitTimer = _require15.startCommitTimer, stopCommitTimer = _require15.stopCommitTimer, startCommitHostEffectsTimer = _require15.startCommitHostEffectsTimer, stopCommitHostEffectsTimer = _require15.stopCommitHostEffectsTimer, startCommitLifeCyclesTimer = _require15.startCommitLifeCyclesTimer, stopCommitLifeCyclesTimer = _require15.stopCommitLifeCyclesTimer;
                    var warnAboutUpdateOnUnmounted = function (instance) {
                        var ctor = instance.constructor;
                        warning$22(false, 'Can only update a mounted or mounting component. This usually means ' + 'you called setState, replaceState, or forceUpdate on an unmounted ' + 'component. This is a no-op.\n\nPlease check the code for the ' + '%s component.', ctor && (ctor.displayName || ctor.name) || 'ReactClass');
                    };
                    var warnAboutInvalidUpdates = function (instance) {
                        switch (ReactDebugCurrentFiber$3.phase) {
                        case 'getChildContext':
                            warning$22(false, 'setState(...): Cannot call setState() inside getChildContext()');
                            break;
                        case 'render':
                            warning$22(false, 'Cannot update during an existing state transition (such as within ' + '`render` or another component\'s constructor). Render methods should ' + 'be a pure function of props and state; constructor side-effects are ' + 'an anti-pattern, but can be moved to `componentWillMount`.');
                            break;
                        }
                    };
                }
                var timeHeuristicForUnitOfWork = 1;
                var ReactFiberScheduler = function (config) {
                    var hostContext = ReactFiberHostContext(config);
                    var hydrationContext = ReactFiberHydrationContext(config);
                    var popHostContainer = hostContext.popHostContainer, popHostContext = hostContext.popHostContext, resetHostContainer = hostContext.resetHostContainer;
                    var _ReactFiberBeginWork = ReactFiberBeginWork(config, hostContext, hydrationContext, scheduleUpdate, getPriorityContext), beginWork = _ReactFiberBeginWork.beginWork, beginFailedWork = _ReactFiberBeginWork.beginFailedWork;
                    var _ReactFiberCompleteWo = ReactFiberCompleteWork(config, hostContext, hydrationContext), completeWork = _ReactFiberCompleteWo.completeWork;
                    var _ReactFiberCommitWork = ReactFiberCommitWork(config, captureError), commitPlacement = _ReactFiberCommitWork.commitPlacement, commitDeletion = _ReactFiberCommitWork.commitDeletion, commitWork = _ReactFiberCommitWork.commitWork, commitLifeCycles = _ReactFiberCommitWork.commitLifeCycles, commitAttachRef = _ReactFiberCommitWork.commitAttachRef, commitDetachRef = _ReactFiberCommitWork.commitDetachRef;
                    var scheduleDeferredCallback = config.scheduleDeferredCallback, useSyncScheduling = config.useSyncScheduling, prepareForCommit = config.prepareForCommit, resetAfterCommit = config.resetAfterCommit;
                    var priorityContext = NoWork$2;
                    var isPerformingWork = false;
                    var deadlineHasExpired = false;
                    var isBatchingUpdates = false;
                    var isUnbatchingUpdates = false;
                    var nextUnitOfWork = null;
                    var nextPriorityLevel = NoWork$2;
                    var nextEffect = null;
                    var pendingCommit = null;
                    var nextScheduledRoot = null;
                    var lastScheduledRoot = null;
                    var isCallbackScheduled = false;
                    var capturedErrors = null;
                    var failedBoundaries = null;
                    var commitPhaseBoundaries = null;
                    var firstUncaughtError = null;
                    var didFatal = false;
                    var isCommitting = false;
                    var isUnmounting = false;
                    var NESTED_UPDATE_LIMIT = 1000;
                    var nestedUpdateCount = 0;
                    var nextRenderedTree = null;
                    function resetContextStack() {
                        reset$1();
                        resetContext$1();
                        resetHostContainer();
                    }
                    function resetNextUnitOfWork() {
                        while (nextScheduledRoot !== null && nextScheduledRoot.current.pendingWorkPriority === NoWork$2) {
                            nextScheduledRoot.isScheduled = false;
                            var next = nextScheduledRoot.nextScheduledRoot;
                            nextScheduledRoot.nextScheduledRoot = null;
                            if (nextScheduledRoot === lastScheduledRoot) {
                                nextScheduledRoot = null;
                                lastScheduledRoot = null;
                                nextPriorityLevel = NoWork$2;
                                return null;
                            }
                            nextScheduledRoot = next;
                        }
                        var root = nextScheduledRoot;
                        var highestPriorityRoot = null;
                        var highestPriorityLevel = NoWork$2;
                        while (root !== null) {
                            if (root.current.pendingWorkPriority !== NoWork$2 && (highestPriorityLevel === NoWork$2 || highestPriorityLevel > root.current.pendingWorkPriority)) {
                                highestPriorityLevel = root.current.pendingWorkPriority;
                                highestPriorityRoot = root;
                            }
                            root = root.nextScheduledRoot;
                        }
                        if (highestPriorityRoot !== null) {
                            nextPriorityLevel = highestPriorityLevel;
                            resetContextStack();
                            nextUnitOfWork = createWorkInProgress$1(highestPriorityRoot.current, highestPriorityLevel);
                            if (highestPriorityRoot !== nextRenderedTree) {
                                nestedUpdateCount = 0;
                                nextRenderedTree = highestPriorityRoot;
                            }
                            return;
                        }
                        nextPriorityLevel = NoWork$2;
                        nextUnitOfWork = null;
                        nextRenderedTree = null;
                        return;
                    }
                    function commitAllHostEffects() {
                        while (nextEffect !== null) {
                            {
                                ReactDebugCurrentFiber$3.setCurrentFiber(nextEffect, null);
                                recordEffect();
                            }
                            var effectTag = nextEffect.effectTag;
                            if (effectTag & ContentReset) {
                                config.resetTextContent(nextEffect.stateNode);
                            }
                            if (effectTag & Ref) {
                                var current = nextEffect.alternate;
                                if (current !== null) {
                                    commitDetachRef(current);
                                }
                            }
                            var primaryEffectTag = effectTag & ~(Callback | Err | ContentReset | Ref | PerformedWork);
                            switch (primaryEffectTag) {
                            case Placement$1: {
                                    commitPlacement(nextEffect);
                                    nextEffect.effectTag &= ~Placement$1;
                                    break;
                                }
                            case PlacementAndUpdate: {
                                    commitPlacement(nextEffect);
                                    nextEffect.effectTag &= ~Placement$1;
                                    var _current = nextEffect.alternate;
                                    commitWork(_current, nextEffect);
                                    break;
                                }
                            case Update: {
                                    var _current2 = nextEffect.alternate;
                                    commitWork(_current2, nextEffect);
                                    break;
                                }
                            case Deletion: {
                                    isUnmounting = true;
                                    commitDeletion(nextEffect);
                                    isUnmounting = false;
                                    break;
                                }
                            }
                            nextEffect = nextEffect.nextEffect;
                        }
                        {
                            ReactDebugCurrentFiber$3.resetCurrentFiber();
                        }
                    }
                    function commitAllLifeCycles() {
                        while (nextEffect !== null) {
                            var effectTag = nextEffect.effectTag;
                            if (effectTag & (Update | Callback)) {
                                {
                                    recordEffect();
                                }
                                var current = nextEffect.alternate;
                                commitLifeCycles(current, nextEffect);
                            }
                            if (effectTag & Ref) {
                                {
                                    recordEffect();
                                }
                                commitAttachRef(nextEffect);
                            }
                            if (effectTag & Err) {
                                {
                                    recordEffect();
                                }
                                commitErrorHandling(nextEffect);
                            }
                            var next = nextEffect.nextEffect;
                            nextEffect.nextEffect = null;
                            nextEffect = next;
                        }
                    }
                    function commitAllWork(finishedWork) {
                        isCommitting = true;
                        {
                            startCommitTimer();
                        }
                        pendingCommit = null;
                        var root = finishedWork.stateNode;
                        !(root.current !== finishedWork) ? invariant(false, 'Cannot commit the same tree as before. This is probably a bug related to the return field. This error is likely caused by a bug in React. Please file an issue.') : void 0;
                        if (nextPriorityLevel === SynchronousPriority$1 || nextPriorityLevel === TaskPriority$1) {
                            nestedUpdateCount++;
                        }
                        ReactCurrentOwner$1.current = null;
                        var firstEffect = void 0;
                        if (finishedWork.effectTag > PerformedWork) {
                            if (finishedWork.lastEffect !== null) {
                                finishedWork.lastEffect.nextEffect = finishedWork;
                                firstEffect = finishedWork.firstEffect;
                            } else {
                                firstEffect = finishedWork;
                            }
                        } else {
                            firstEffect = finishedWork.firstEffect;
                        }
                        prepareForCommit();
                        nextEffect = firstEffect;
                        {
                            startCommitHostEffectsTimer();
                        }
                        while (nextEffect !== null) {
                            var didError = false;
                            var _error = void 0;
                            {
                                invokeGuardedCallback$1(null, commitAllHostEffects, null);
                                if (hasCaughtError()) {
                                    didError = true;
                                    _error = clearCaughtError();
                                }
                            }
                            if (didError) {
                                !(nextEffect !== null) ? invariant(false, 'Should have next effect. This error is likely caused by a bug in React. Please file an issue.') : void 0;
                                captureError(nextEffect, _error);
                                if (nextEffect !== null) {
                                    nextEffect = nextEffect.nextEffect;
                                }
                            }
                        }
                        {
                            stopCommitHostEffectsTimer();
                        }
                        resetAfterCommit();
                        root.current = finishedWork;
                        nextEffect = firstEffect;
                        {
                            startCommitLifeCyclesTimer();
                        }
                        while (nextEffect !== null) {
                            var _didError = false;
                            var _error2 = void 0;
                            {
                                invokeGuardedCallback$1(null, commitAllLifeCycles, null);
                                if (hasCaughtError()) {
                                    _didError = true;
                                    _error2 = clearCaughtError();
                                }
                            }
                            if (_didError) {
                                !(nextEffect !== null) ? invariant(false, 'Should have next effect. This error is likely caused by a bug in React. Please file an issue.') : void 0;
                                captureError(nextEffect, _error2);
                                if (nextEffect !== null) {
                                    nextEffect = nextEffect.nextEffect;
                                }
                            }
                        }
                        isCommitting = false;
                        {
                            stopCommitLifeCyclesTimer();
                            stopCommitTimer();
                        }
                        if (typeof onCommitRoot === 'function') {
                            onCommitRoot(finishedWork.stateNode);
                        }
                        if (true && ReactFiberInstrumentation$1.debugTool) {
                            ReactFiberInstrumentation$1.debugTool.onCommitWork(finishedWork);
                        }
                        if (commitPhaseBoundaries) {
                            commitPhaseBoundaries.forEach(scheduleErrorRecovery);
                            commitPhaseBoundaries = null;
                        }
                        resetNextUnitOfWork();
                    }
                    function resetWorkPriority(workInProgress, renderPriority) {
                        if (workInProgress.pendingWorkPriority !== NoWork$2 && workInProgress.pendingWorkPriority > renderPriority) {
                            return;
                        }
                        var newPriority = getUpdatePriority$1(workInProgress);
                        var child = workInProgress.child;
                        while (child !== null) {
                            newPriority = largerPriority$1(newPriority, child.pendingWorkPriority);
                            child = child.sibling;
                        }
                        workInProgress.pendingWorkPriority = newPriority;
                    }
                    function completeUnitOfWork(workInProgress) {
                        while (true) {
                            var current = workInProgress.alternate;
                            var next = completeWork(current, workInProgress, nextPriorityLevel);
                            var returnFiber = workInProgress['return'];
                            var siblingFiber = workInProgress.sibling;
                            resetWorkPriority(workInProgress, nextPriorityLevel);
                            if (next !== null) {
                                {
                                    stopWorkTimer(workInProgress);
                                }
                                if (true && ReactFiberInstrumentation$1.debugTool) {
                                    ReactFiberInstrumentation$1.debugTool.onCompleteWork(workInProgress);
                                }
                                return next;
                            }
                            if (returnFiber !== null) {
                                if (returnFiber.firstEffect === null) {
                                    returnFiber.firstEffect = workInProgress.firstEffect;
                                }
                                if (workInProgress.lastEffect !== null) {
                                    if (returnFiber.lastEffect !== null) {
                                        returnFiber.lastEffect.nextEffect = workInProgress.firstEffect;
                                    }
                                    returnFiber.lastEffect = workInProgress.lastEffect;
                                }
                                var effectTag = workInProgress.effectTag;
                                if (effectTag > PerformedWork) {
                                    if (returnFiber.lastEffect !== null) {
                                        returnFiber.lastEffect.nextEffect = workInProgress;
                                    } else {
                                        returnFiber.firstEffect = workInProgress;
                                    }
                                    returnFiber.lastEffect = workInProgress;
                                }
                            }
                            {
                                stopWorkTimer(workInProgress);
                            }
                            if (true && ReactFiberInstrumentation$1.debugTool) {
                                ReactFiberInstrumentation$1.debugTool.onCompleteWork(workInProgress);
                            }
                            if (siblingFiber !== null) {
                                return siblingFiber;
                            } else if (returnFiber !== null) {
                                workInProgress = returnFiber;
                                continue;
                            } else {
                                pendingCommit = workInProgress;
                                return null;
                            }
                        }
                        return null;
                    }
                    function performUnitOfWork(workInProgress) {
                        var current = workInProgress.alternate;
                        {
                            startWorkTimer(workInProgress);
                        }
                        var next = beginWork(current, workInProgress, nextPriorityLevel);
                        if (true && ReactFiberInstrumentation$1.debugTool) {
                            ReactFiberInstrumentation$1.debugTool.onBeginWork(workInProgress);
                        }
                        if (next === null) {
                            next = completeUnitOfWork(workInProgress);
                        }
                        ReactCurrentOwner$1.current = null;
                        {
                            ReactDebugCurrentFiber$3.resetCurrentFiber();
                        }
                        return next;
                    }
                    function performFailedUnitOfWork(workInProgress) {
                        var current = workInProgress.alternate;
                        {
                            startWorkTimer(workInProgress);
                        }
                        var next = beginFailedWork(current, workInProgress, nextPriorityLevel);
                        if (true && ReactFiberInstrumentation$1.debugTool) {
                            ReactFiberInstrumentation$1.debugTool.onBeginWork(workInProgress);
                        }
                        if (next === null) {
                            next = completeUnitOfWork(workInProgress);
                        }
                        ReactCurrentOwner$1.current = null;
                        {
                            ReactDebugCurrentFiber$3.resetCurrentFiber();
                        }
                        return next;
                    }
                    function performDeferredWork(deadline) {
                        performWork(OffscreenPriority, deadline);
                    }
                    function handleCommitPhaseErrors() {
                        if (capturedErrors !== null && capturedErrors.size > 0 && nextPriorityLevel === TaskPriority$1) {
                            while (nextUnitOfWork !== null) {
                                if (hasCapturedError(nextUnitOfWork)) {
                                    nextUnitOfWork = performFailedUnitOfWork(nextUnitOfWork);
                                } else {
                                    nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
                                }
                                if (nextUnitOfWork === null) {
                                    !(pendingCommit !== null) ? invariant(false, 'Should have a pending commit. This error is likely caused by a bug in React. Please file an issue.') : void 0;
                                    priorityContext = TaskPriority$1;
                                    commitAllWork(pendingCommit);
                                    priorityContext = nextPriorityLevel;
                                    if (capturedErrors === null || capturedErrors.size === 0 || nextPriorityLevel !== TaskPriority$1) {
                                        break;
                                    }
                                }
                            }
                        }
                    }
                    function workLoop(minPriorityLevel, deadline) {
                        if (pendingCommit !== null) {
                            priorityContext = TaskPriority$1;
                            commitAllWork(pendingCommit);
                            handleCommitPhaseErrors();
                        } else if (nextUnitOfWork === null) {
                            resetNextUnitOfWork();
                        }
                        if (nextPriorityLevel === NoWork$2 || nextPriorityLevel > minPriorityLevel) {
                            return;
                        }
                        priorityContext = nextPriorityLevel;
                        loop:
                            do {
                                if (nextPriorityLevel <= TaskPriority$1) {
                                    while (nextUnitOfWork !== null) {
                                        nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
                                        if (nextUnitOfWork === null) {
                                            !(pendingCommit !== null) ? invariant(false, 'Should have a pending commit. This error is likely caused by a bug in React. Please file an issue.') : void 0;
                                            priorityContext = TaskPriority$1;
                                            commitAllWork(pendingCommit);
                                            priorityContext = nextPriorityLevel;
                                            handleCommitPhaseErrors();
                                            if (nextPriorityLevel === NoWork$2 || nextPriorityLevel > minPriorityLevel || nextPriorityLevel > TaskPriority$1) {
                                                break;
                                            }
                                        }
                                    }
                                } else if (deadline !== null) {
                                    while (nextUnitOfWork !== null && !deadlineHasExpired) {
                                        if (deadline.timeRemaining() > timeHeuristicForUnitOfWork) {
                                            nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
                                            if (nextUnitOfWork === null) {
                                                !(pendingCommit !== null) ? invariant(false, 'Should have a pending commit. This error is likely caused by a bug in React. Please file an issue.') : void 0;
                                                if (deadline.timeRemaining() > timeHeuristicForUnitOfWork) {
                                                    priorityContext = TaskPriority$1;
                                                    commitAllWork(pendingCommit);
                                                    priorityContext = nextPriorityLevel;
                                                    handleCommitPhaseErrors();
                                                    if (nextPriorityLevel === NoWork$2 || nextPriorityLevel > minPriorityLevel || nextPriorityLevel < HighPriority) {
                                                        break;
                                                    }
                                                } else {
                                                    deadlineHasExpired = true;
                                                }
                                            }
                                        } else {
                                            deadlineHasExpired = true;
                                        }
                                    }
                                }
                                switch (nextPriorityLevel) {
                                case SynchronousPriority$1:
                                case TaskPriority$1:
                                    if (nextPriorityLevel <= minPriorityLevel) {
                                        continue loop;
                                    }
                                    break loop;
                                case HighPriority:
                                case LowPriority:
                                case OffscreenPriority:
                                    if (deadline === null) {
                                        break loop;
                                    }
                                    if (!deadlineHasExpired && nextPriorityLevel <= minPriorityLevel) {
                                        continue loop;
                                    }
                                    break loop;
                                case NoWork$2:
                                    break loop;
                                default:
                                    invariant(false, 'Switch statement should be exhuastive. This error is likely caused by a bug in React. Please file an issue.');
                                }
                            } while (true);
                    }
                    function performWorkCatchBlock(failedWork, boundary, minPriorityLevel, deadline) {
                        unwindContexts(failedWork, boundary);
                        nextUnitOfWork = performFailedUnitOfWork(boundary);
                        workLoop(minPriorityLevel, deadline);
                    }
                    function performWork(minPriorityLevel, deadline) {
                        {
                            startWorkLoopTimer();
                        }
                        !!isPerformingWork ? invariant(false, 'performWork was called recursively. This error is likely caused by a bug in React. Please file an issue.') : void 0;
                        isPerformingWork = true;
                        var previousPriorityContext = priorityContext;
                        var didError = false;
                        var error = null;
                        {
                            invokeGuardedCallback$1(null, workLoop, null, minPriorityLevel, deadline);
                            if (hasCaughtError()) {
                                didError = true;
                                error = clearCaughtError();
                            }
                        }
                        while (didError) {
                            if (didFatal) {
                                firstUncaughtError = error;
                                break;
                            }
                            var failedWork = nextUnitOfWork;
                            if (failedWork === null) {
                                didFatal = true;
                                continue;
                            }
                            var boundary = captureError(failedWork, error);
                            !(boundary !== null) ? invariant(false, 'Should have found an error boundary. This error is likely caused by a bug in React. Please file an issue.') : void 0;
                            if (didFatal) {
                                continue;
                            }
                            didError = false;
                            error = null;
                            {
                                invokeGuardedCallback$1(null, performWorkCatchBlock, null, failedWork, boundary, minPriorityLevel, deadline);
                                if (hasCaughtError()) {
                                    didError = true;
                                    error = clearCaughtError();
                                    continue;
                                }
                            }
                            break;
                        }
                        priorityContext = previousPriorityContext;
                        if (deadline !== null) {
                            isCallbackScheduled = false;
                        }
                        if (nextPriorityLevel > TaskPriority$1 && !isCallbackScheduled) {
                            scheduleDeferredCallback(performDeferredWork);
                            isCallbackScheduled = true;
                        }
                        var errorToThrow = firstUncaughtError;
                        isPerformingWork = false;
                        deadlineHasExpired = false;
                        didFatal = false;
                        firstUncaughtError = null;
                        capturedErrors = null;
                        failedBoundaries = null;
                        nextRenderedTree = null;
                        nestedUpdateCount = 0;
                        {
                            stopWorkLoopTimer();
                        }
                        if (errorToThrow !== null) {
                            throw errorToThrow;
                        }
                    }
                    function captureError(failedWork, error) {
                        ReactCurrentOwner$1.current = null;
                        {
                            ReactDebugCurrentFiber$3.resetCurrentFiber();
                        }
                        var boundary = null;
                        var errorBoundaryFound = false;
                        var willRetry = false;
                        var errorBoundaryName = null;
                        if (failedWork.tag === HostRoot$6) {
                            boundary = failedWork;
                            if (isFailedBoundary(failedWork)) {
                                didFatal = true;
                            }
                        } else {
                            var node = failedWork['return'];
                            while (node !== null && boundary === null) {
                                if (node.tag === ClassComponent$5) {
                                    var instance = node.stateNode;
                                    if (typeof instance.componentDidCatch === 'function') {
                                        errorBoundaryFound = true;
                                        errorBoundaryName = getComponentName_1(node);
                                        boundary = node;
                                        willRetry = true;
                                    }
                                } else if (node.tag === HostRoot$6) {
                                    boundary = node;
                                }
                                if (isFailedBoundary(node)) {
                                    if (isUnmounting) {
                                        return null;
                                    }
                                    if (commitPhaseBoundaries !== null && (commitPhaseBoundaries.has(node) || node.alternate !== null && commitPhaseBoundaries.has(node.alternate))) {
                                        return null;
                                    }
                                    boundary = null;
                                    willRetry = false;
                                }
                                node = node['return'];
                            }
                        }
                        if (boundary !== null) {
                            if (failedBoundaries === null) {
                                failedBoundaries = new Set();
                            }
                            failedBoundaries.add(boundary);
                            var _componentStack = getStackAddendumByWorkInProgressFiber$2(failedWork);
                            var _componentName = getComponentName_1(failedWork);
                            if (capturedErrors === null) {
                                capturedErrors = new Map();
                            }
                            var capturedError = {
                                componentName: _componentName,
                                componentStack: _componentStack,
                                error: error,
                                errorBoundary: errorBoundaryFound ? boundary.stateNode : null,
                                errorBoundaryFound: errorBoundaryFound,
                                errorBoundaryName: errorBoundaryName,
                                willRetry: willRetry
                            };
                            capturedErrors.set(boundary, capturedError);
                            try {
                                logCapturedError(capturedError);
                            } catch (e) {
                                console.error(e);
                            }
                            if (isCommitting) {
                                if (commitPhaseBoundaries === null) {
                                    commitPhaseBoundaries = new Set();
                                }
                                commitPhaseBoundaries.add(boundary);
                            } else {
                                scheduleErrorRecovery(boundary);
                            }
                            return boundary;
                        } else if (firstUncaughtError === null) {
                            firstUncaughtError = error;
                        }
                        return null;
                    }
                    function hasCapturedError(fiber) {
                        return capturedErrors !== null && (capturedErrors.has(fiber) || fiber.alternate !== null && capturedErrors.has(fiber.alternate));
                    }
                    function isFailedBoundary(fiber) {
                        return failedBoundaries !== null && (failedBoundaries.has(fiber) || fiber.alternate !== null && failedBoundaries.has(fiber.alternate));
                    }
                    function commitErrorHandling(effectfulFiber) {
                        var capturedError = void 0;
                        if (capturedErrors !== null) {
                            capturedError = capturedErrors.get(effectfulFiber);
                            capturedErrors['delete'](effectfulFiber);
                            if (capturedError == null) {
                                if (effectfulFiber.alternate !== null) {
                                    effectfulFiber = effectfulFiber.alternate;
                                    capturedError = capturedErrors.get(effectfulFiber);
                                    capturedErrors['delete'](effectfulFiber);
                                }
                            }
                        }
                        !(capturedError != null) ? invariant(false, 'No error for given unit of work. This error is likely caused by a bug in React. Please file an issue.') : void 0;
                        switch (effectfulFiber.tag) {
                        case ClassComponent$5:
                            var instance = effectfulFiber.stateNode;
                            var info = { componentStack: capturedError.componentStack };
                            instance.componentDidCatch(capturedError.error, info);
                            return;
                        case HostRoot$6:
                            if (firstUncaughtError === null) {
                                firstUncaughtError = capturedError.error;
                            }
                            return;
                        default:
                            invariant(false, 'Invalid type of work. This error is likely caused by a bug in React. Please file an issue.');
                        }
                    }
                    function unwindContexts(from, to) {
                        var node = from;
                        while (node !== null) {
                            switch (node.tag) {
                            case ClassComponent$5:
                                popContextProvider$1(node);
                                break;
                            case HostComponent$6:
                                popHostContext(node);
                                break;
                            case HostRoot$6:
                                popHostContainer(node);
                                break;
                            case HostPortal$3:
                                popHostContainer(node);
                                break;
                            }
                            if (node === to || node.alternate === to) {
                                {
                                    stopFailedWorkTimer(node);
                                }
                                break;
                            } else {
                                stopWorkTimer(node);
                            }
                            node = node['return'];
                        }
                    }
                    function scheduleRoot(root, priorityLevel) {
                        if (priorityLevel === NoWork$2) {
                            return;
                        }
                        if (!root.isScheduled) {
                            root.isScheduled = true;
                            if (lastScheduledRoot) {
                                lastScheduledRoot.nextScheduledRoot = root;
                                lastScheduledRoot = root;
                            } else {
                                nextScheduledRoot = root;
                                lastScheduledRoot = root;
                            }
                        }
                    }
                    function scheduleUpdate(fiber, priorityLevel) {
                        return scheduleUpdateImpl(fiber, priorityLevel, false);
                    }
                    function scheduleUpdateImpl(fiber, priorityLevel, isErrorRecovery) {
                        {
                            recordScheduleUpdate();
                        }
                        if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
                            didFatal = true;
                            invariant(false, 'Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.');
                        }
                        if (!isPerformingWork && priorityLevel <= nextPriorityLevel) {
                            nextUnitOfWork = null;
                        }
                        {
                            if (!isErrorRecovery && fiber.tag === ClassComponent$5) {
                                var instance = fiber.stateNode;
                                warnAboutInvalidUpdates(instance);
                            }
                        }
                        var node = fiber;
                        var shouldContinue = true;
                        while (node !== null && shouldContinue) {
                            shouldContinue = false;
                            if (node.pendingWorkPriority === NoWork$2 || node.pendingWorkPriority > priorityLevel) {
                                shouldContinue = true;
                                node.pendingWorkPriority = priorityLevel;
                            }
                            if (node.alternate !== null) {
                                if (node.alternate.pendingWorkPriority === NoWork$2 || node.alternate.pendingWorkPriority > priorityLevel) {
                                    shouldContinue = true;
                                    node.alternate.pendingWorkPriority = priorityLevel;
                                }
                            }
                            if (node['return'] === null) {
                                if (node.tag === HostRoot$6) {
                                    var root = node.stateNode;
                                    scheduleRoot(root, priorityLevel);
                                    if (!isPerformingWork) {
                                        switch (priorityLevel) {
                                        case SynchronousPriority$1:
                                            if (isUnbatchingUpdates) {
                                                performWork(SynchronousPriority$1, null);
                                            } else {
                                                performWork(TaskPriority$1, null);
                                            }
                                            break;
                                        case TaskPriority$1:
                                            !isBatchingUpdates ? invariant(false, 'Task updates can only be scheduled as a nested update or inside batchedUpdates.') : void 0;
                                            break;
                                        default:
                                            if (!isCallbackScheduled) {
                                                scheduleDeferredCallback(performDeferredWork);
                                                isCallbackScheduled = true;
                                            }
                                        }
                                    }
                                } else {
                                    {
                                        if (!isErrorRecovery && fiber.tag === ClassComponent$5) {
                                            warnAboutUpdateOnUnmounted(fiber.stateNode);
                                        }
                                    }
                                    return;
                                }
                            }
                            node = node['return'];
                        }
                    }
                    function getPriorityContext(fiber, forceAsync) {
                        var priorityLevel = priorityContext;
                        if (priorityLevel === NoWork$2) {
                            if (!useSyncScheduling || fiber.internalContextTag & AsyncUpdates || forceAsync) {
                                priorityLevel = LowPriority;
                            } else {
                                priorityLevel = SynchronousPriority$1;
                            }
                        }
                        if (priorityLevel === SynchronousPriority$1 && (isPerformingWork || isBatchingUpdates)) {
                            return TaskPriority$1;
                        }
                        return priorityLevel;
                    }
                    function scheduleErrorRecovery(fiber) {
                        scheduleUpdateImpl(fiber, TaskPriority$1, true);
                    }
                    function batchedUpdates(fn, a) {
                        var previousIsBatchingUpdates = isBatchingUpdates;
                        isBatchingUpdates = true;
                        try {
                            return fn(a);
                        } finally {
                            isBatchingUpdates = previousIsBatchingUpdates;
                            if (!isPerformingWork && !isBatchingUpdates) {
                                performWork(TaskPriority$1, null);
                            }
                        }
                    }
                    function unbatchedUpdates(fn) {
                        var previousIsUnbatchingUpdates = isUnbatchingUpdates;
                        var previousIsBatchingUpdates = isBatchingUpdates;
                        isUnbatchingUpdates = isBatchingUpdates;
                        isBatchingUpdates = false;
                        try {
                            return fn();
                        } finally {
                            isBatchingUpdates = previousIsBatchingUpdates;
                            isUnbatchingUpdates = previousIsUnbatchingUpdates;
                        }
                    }
                    function flushSync(batch) {
                        var previousIsBatchingUpdates = isBatchingUpdates;
                        var previousPriorityContext = priorityContext;
                        isBatchingUpdates = true;
                        priorityContext = SynchronousPriority$1;
                        try {
                            return batch();
                        } finally {
                            isBatchingUpdates = previousIsBatchingUpdates;
                            priorityContext = previousPriorityContext;
                            !!isPerformingWork ? invariant(false, 'flushSync was called from inside a lifecycle method. It cannot be called when React is already rendering.') : void 0;
                            performWork(TaskPriority$1, null);
                        }
                    }
                    function deferredUpdates(fn) {
                        var previousPriorityContext = priorityContext;
                        priorityContext = LowPriority;
                        try {
                            return fn();
                        } finally {
                            priorityContext = previousPriorityContext;
                        }
                    }
                    return {
                        scheduleUpdate: scheduleUpdate,
                        getPriorityContext: getPriorityContext,
                        batchedUpdates: batchedUpdates,
                        unbatchedUpdates: unbatchedUpdates,
                        flushSync: flushSync,
                        deferredUpdates: deferredUpdates
                    };
                };
                var getContextFiber = function (arg) {
                    invariant(false, 'Missing injection for fiber getContextForSubtree');
                };
                function getContextForSubtree(parentComponent) {
                    if (!parentComponent) {
                        return emptyObject;
                    }
                    var instance = ReactInstanceMap_1.get(parentComponent);
                    if (typeof instance.tag === 'number') {
                        return getContextFiber(instance);
                    } else {
                        return instance._processChildContext(instance._context);
                    }
                }
                getContextForSubtree._injectFiber = function (fn) {
                    getContextFiber = fn;
                };
                var getContextForSubtree_1 = getContextForSubtree;
                var addTopLevelUpdate = ReactFiberUpdateQueue.addTopLevelUpdate;
                var findCurrentUnmaskedContext = ReactFiberContext.findCurrentUnmaskedContext;
                var isContextProvider = ReactFiberContext.isContextProvider;
                var processChildContext = ReactFiberContext.processChildContext;
                var createFiberRoot = ReactFiberRoot.createFiberRoot;
                var HostComponent$3 = ReactTypeOfWork.HostComponent;
                {
                    var warning$18 = require$$0;
                    var ReactFiberInstrumentation = ReactFiberInstrumentation_1;
                    var ReactDebugCurrentFiber$1 = ReactDebugCurrentFiber_1;
                    var getComponentName$4 = getComponentName_1;
                }
                var findCurrentHostFiber$1 = ReactFiberTreeReflection.findCurrentHostFiber;
                var findCurrentHostFiberWithNoPortals$1 = ReactFiberTreeReflection.findCurrentHostFiberWithNoPortals;
                getContextForSubtree_1._injectFiber(function (fiber) {
                    var parentContext = findCurrentUnmaskedContext(fiber);
                    return isContextProvider(fiber) ? processChildContext(fiber, parentContext, false) : parentContext;
                });
                var ReactFiberReconciler = function (config) {
                    var getPublicInstance = config.getPublicInstance;
                    var _ReactFiberScheduler = ReactFiberScheduler(config), scheduleUpdate = _ReactFiberScheduler.scheduleUpdate, getPriorityContext = _ReactFiberScheduler.getPriorityContext, batchedUpdates = _ReactFiberScheduler.batchedUpdates, unbatchedUpdates = _ReactFiberScheduler.unbatchedUpdates, flushSync = _ReactFiberScheduler.flushSync, deferredUpdates = _ReactFiberScheduler.deferredUpdates;
                    function scheduleTopLevelUpdate(current, element, callback) {
                        {
                            if (ReactDebugCurrentFiber$1.phase === 'render' && ReactDebugCurrentFiber$1.current !== null) {
                                warning$18(false, 'Render methods should be a pure function of props and state; ' + 'triggering nested component updates from render is not allowed. ' + 'If necessary, trigger nested updates in componentDidUpdate.\n\n' + 'Check the render method of %s.', getComponentName$4(ReactDebugCurrentFiber$1.current) || 'Unknown');
                            }
                        }
                        var forceAsync = ReactFeatureFlags_1.enableAsyncSubtreeAPI && element != null && element.type != null && element.type.prototype != null && element.type.prototype.unstable_isAsyncReactComponent === true;
                        var priorityLevel = getPriorityContext(current, forceAsync);
                        var nextState = { element: element };
                        callback = callback === undefined ? null : callback;
                        {
                            warning$18(callback === null || typeof callback === 'function', 'render(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callback);
                        }
                        addTopLevelUpdate(current, nextState, callback, priorityLevel);
                        scheduleUpdate(current, priorityLevel);
                    }
                    return {
                        createContainer: function (containerInfo) {
                            return createFiberRoot(containerInfo);
                        },
                        updateContainer: function (element, container, parentComponent, callback) {
                            var current = container.current;
                            {
                                if (ReactFiberInstrumentation.debugTool) {
                                    if (current.alternate === null) {
                                        ReactFiberInstrumentation.debugTool.onMountContainer(container);
                                    } else if (element === null) {
                                        ReactFiberInstrumentation.debugTool.onUnmountContainer(container);
                                    } else {
                                        ReactFiberInstrumentation.debugTool.onUpdateContainer(container);
                                    }
                                }
                            }
                            var context = getContextForSubtree_1(parentComponent);
                            if (container.context === null) {
                                container.context = context;
                            } else {
                                container.pendingContext = context;
                            }
                            scheduleTopLevelUpdate(current, element, callback);
                        },
                        batchedUpdates: batchedUpdates,
                        unbatchedUpdates: unbatchedUpdates,
                        deferredUpdates: deferredUpdates,
                        flushSync: flushSync,
                        getPublicRootInstance: function (container) {
                            var containerFiber = container.current;
                            if (!containerFiber.child) {
                                return null;
                            }
                            switch (containerFiber.child.tag) {
                            case HostComponent$3:
                                return getPublicInstance(containerFiber.child.stateNode);
                            default:
                                return containerFiber.child.stateNode;
                            }
                        },
                        findHostInstance: function (fiber) {
                            var hostFiber = findCurrentHostFiber$1(fiber);
                            if (hostFiber === null) {
                                return null;
                            }
                            return hostFiber.stateNode;
                        },
                        findHostInstanceWithNoPortals: function (fiber) {
                            var hostFiber = findCurrentHostFiberWithNoPortals$1(fiber);
                            if (hostFiber === null) {
                                return null;
                            }
                            return hostFiber.stateNode;
                        }
                    };
                };
                var TEXT_NODE$3 = HTMLNodeType_1.TEXT_NODE;
                function getLeafNode(node) {
                    while (node && node.firstChild) {
                        node = node.firstChild;
                    }
                    return node;
                }
                function getSiblingNode(node) {
                    while (node) {
                        if (node.nextSibling) {
                            return node.nextSibling;
                        }
                        node = node.parentNode;
                    }
                }
                function getNodeForCharacterOffset(root, offset) {
                    var node = getLeafNode(root);
                    var nodeStart = 0;
                    var nodeEnd = 0;
                    while (node) {
                        if (node.nodeType === TEXT_NODE$3) {
                            nodeEnd = nodeStart + node.textContent.length;
                            if (nodeStart <= offset && nodeEnd >= offset) {
                                return {
                                    node: node,
                                    offset: offset - nodeStart
                                };
                            }
                            nodeStart = nodeEnd;
                        }
                        node = getLeafNode(getSiblingNode(node));
                    }
                }
                var getNodeForCharacterOffset_1 = getNodeForCharacterOffset;
                var contentKey = null;
                function getTextContentAccessor() {
                    if (!contentKey && ExecutionEnvironment.canUseDOM) {
                        contentKey = 'textContent' in document.documentElement ? 'textContent' : 'innerText';
                    }
                    return contentKey;
                }
                var getTextContentAccessor_1 = getTextContentAccessor;
                function isCollapsed(anchorNode, anchorOffset, focusNode$$1, focusOffset) {
                    return anchorNode === focusNode$$1 && anchorOffset === focusOffset;
                }
                function getModernOffsets(node) {
                    var selection = window.getSelection && window.getSelection();
                    if (!selection || selection.rangeCount === 0) {
                        return null;
                    }
                    var anchorNode = selection.anchorNode;
                    var anchorOffset = selection.anchorOffset;
                    var focusNode$$1 = selection.focusNode;
                    var focusOffset = selection.focusOffset;
                    var currentRange = selection.getRangeAt(0);
                    try {
                        currentRange.startContainer.nodeType;
                        currentRange.endContainer.nodeType;
                    } catch (e) {
                        return null;
                    }
                    var isSelectionCollapsed = isCollapsed(selection.anchorNode, selection.anchorOffset, selection.focusNode, selection.focusOffset);
                    var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;
                    var tempRange = currentRange.cloneRange();
                    tempRange.selectNodeContents(node);
                    tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);
                    var isTempRangeCollapsed = isCollapsed(tempRange.startContainer, tempRange.startOffset, tempRange.endContainer, tempRange.endOffset);
                    var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
                    var end = start + rangeLength;
                    var detectionRange = document.createRange();
                    detectionRange.setStart(anchorNode, anchorOffset);
                    detectionRange.setEnd(focusNode$$1, focusOffset);
                    var isBackward = detectionRange.collapsed;
                    return {
                        start: isBackward ? end : start,
                        end: isBackward ? start : end
                    };
                }
                function setModernOffsets(node, offsets) {
                    if (!window.getSelection) {
                        return;
                    }
                    var selection = window.getSelection();
                    var length = node[getTextContentAccessor_1()].length;
                    var start = Math.min(offsets.start, length);
                    var end = offsets.end === undefined ? start : Math.min(offsets.end, length);
                    if (!selection.extend && start > end) {
                        var temp = end;
                        end = start;
                        start = temp;
                    }
                    var startMarker = getNodeForCharacterOffset_1(node, start);
                    var endMarker = getNodeForCharacterOffset_1(node, end);
                    if (startMarker && endMarker) {
                        var range = document.createRange();
                        range.setStart(startMarker.node, startMarker.offset);
                        selection.removeAllRanges();
                        if (start > end) {
                            selection.addRange(range);
                            selection.extend(endMarker.node, endMarker.offset);
                        } else {
                            range.setEnd(endMarker.node, endMarker.offset);
                            selection.addRange(range);
                        }
                    }
                }
                var ReactDOMSelection = {
                    getOffsets: getModernOffsets,
                    setOffsets: setModernOffsets
                };
                var ReactDOMSelection_1 = ReactDOMSelection;
                var ELEMENT_NODE$2 = HTMLNodeType_1.ELEMENT_NODE;
                function isInDocument(node) {
                    return containsNode(document.documentElement, node);
                }
                var ReactInputSelection = {
                    hasSelectionCapabilities: function (elem) {
                        var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
                        return nodeName && (nodeName === 'input' && elem.type === 'text' || nodeName === 'textarea' || elem.contentEditable === 'true');
                    },
                    getSelectionInformation: function () {
                        var focusedElem = getActiveElement();
                        return {
                            focusedElem: focusedElem,
                            selectionRange: ReactInputSelection.hasSelectionCapabilities(focusedElem) ? ReactInputSelection.getSelection(focusedElem) : null
                        };
                    },
                    restoreSelection: function (priorSelectionInformation) {
                        var curFocusedElem = getActiveElement();
                        var priorFocusedElem = priorSelectionInformation.focusedElem;
                        var priorSelectionRange = priorSelectionInformation.selectionRange;
                        if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
                            if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
                                ReactInputSelection.setSelection(priorFocusedElem, priorSelectionRange);
                            }
                            var ancestors = [];
                            var ancestor = priorFocusedElem;
                            while (ancestor = ancestor.parentNode) {
                                if (ancestor.nodeType === ELEMENT_NODE$2) {
                                    ancestors.push({
                                        element: ancestor,
                                        left: ancestor.scrollLeft,
                                        top: ancestor.scrollTop
                                    });
                                }
                            }
                            focusNode(priorFocusedElem);
                            for (var i = 0; i < ancestors.length; i++) {
                                var info = ancestors[i];
                                info.element.scrollLeft = info.left;
                                info.element.scrollTop = info.top;
                            }
                        }
                    },
                    getSelection: function (input) {
                        var selection;
                        if ('selectionStart' in input) {
                            selection = {
                                start: input.selectionStart,
                                end: input.selectionEnd
                            };
                        } else {
                            selection = ReactDOMSelection_1.getOffsets(input);
                        }
                        return selection || {
                            start: 0,
                            end: 0
                        };
                    },
                    setSelection: function (input, offsets) {
                        var start = offsets.start;
                        var end = offsets.end;
                        if (end === undefined) {
                            end = start;
                        }
                        if ('selectionStart' in input) {
                            input.selectionStart = start;
                            input.selectionEnd = Math.min(end, input.value.length);
                        } else {
                            ReactDOMSelection_1.setOffsets(input, offsets);
                        }
                    }
                };
                var ReactInputSelection_1 = ReactInputSelection;
                var ReactVersion = '16.0.0';
                var ELEMENT_NODE$3 = HTMLNodeType_1.ELEMENT_NODE;
                var ReactCurrentOwner$3 = ReactGlobalSharedState_1.ReactCurrentOwner;
                {
                    var warning$27 = require$$0;
                }
                var findFiber = function (arg) {
                    invariant(false, 'Missing injection for fiber findDOMNode');
                };
                var findStack = function (arg) {
                    invariant(false, 'Missing injection for stack findDOMNode');
                };
                var findDOMNode = function (componentOrElement) {
                    {
                        var owner = ReactCurrentOwner$3.current;
                        if (owner !== null) {
                            var isFiber = typeof owner.tag === 'number';
                            var warnedAboutRefsInRender = isFiber ? owner.stateNode._warnedAboutRefsInRender : owner._warnedAboutRefsInRender;
                            warning$27(warnedAboutRefsInRender, '%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentName_1(owner) || 'A component');
                            if (isFiber) {
                                owner.stateNode._warnedAboutRefsInRender = true;
                            } else {
                                owner._warnedAboutRefsInRender = true;
                            }
                        }
                    }
                    if (componentOrElement == null) {
                        return null;
                    }
                    if (componentOrElement.nodeType === ELEMENT_NODE$3) {
                        return componentOrElement;
                    }
                    var inst = ReactInstanceMap_1.get(componentOrElement);
                    if (inst) {
                        if (typeof inst.tag === 'number') {
                            return findFiber(inst);
                        } else {
                            return findStack(inst);
                        }
                    }
                    if (typeof componentOrElement.render === 'function') {
                        invariant(false, 'Unable to find node on an unmounted component.');
                    } else {
                        invariant(false, 'Element appears to be neither ReactComponent nor DOMNode. Keys: %s', Object.keys(componentOrElement));
                    }
                };
                findDOMNode._injectFiber = function (fn) {
                    findFiber = fn;
                };
                findDOMNode._injectStack = function (fn) {
                    findStack = fn;
                };
                var findDOMNode_1 = findDOMNode;
                var lowPriorityWarning$1 = function () {
                };
                {
                    var printWarning = function (format) {
                        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                            args[_key - 1] = arguments[_key];
                        }
                        var argIndex = 0;
                        var message = 'Warning: ' + format.replace(/%s/g, function () {
                            return args[argIndex++];
                        });
                        if (typeof console !== 'undefined') {
                            console.warn(message);
                        }
                        try {
                            throw new Error(message);
                        } catch (x) {
                        }
                    };
                    lowPriorityWarning$1 = function (condition, format) {
                        if (format === undefined) {
                            throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
                        }
                        if (!condition) {
                            for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
                                args[_key2 - 2] = arguments[_key2];
                            }
                            printWarning.apply(undefined, [format].concat(args));
                        }
                    };
                }
                var lowPriorityWarning_1 = lowPriorityWarning$1;
                var validateDOMNesting$1 = emptyFunction;
                {
                    var warning$28 = require$$0;
                    var _require$13 = ReactDebugCurrentFiber_1, getCurrentFiberStackAddendum$6 = _require$13.getCurrentFiberStackAddendum;
                    var specialTags = [
                        'address',
                        'applet',
                        'area',
                        'article',
                        'aside',
                        'base',
                        'basefont',
                        'bgsound',
                        'blockquote',
                        'body',
                        'br',
                        'button',
                        'caption',
                        'center',
                        'col',
                        'colgroup',
                        'dd',
                        'details',
                        'dir',
                        'div',
                        'dl',
                        'dt',
                        'embed',
                        'fieldset',
                        'figcaption',
                        'figure',
                        'footer',
                        'form',
                        'frame',
                        'frameset',
                        'h1',
                        'h2',
                        'h3',
                        'h4',
                        'h5',
                        'h6',
                        'head',
                        'header',
                        'hgroup',
                        'hr',
                        'html',
                        'iframe',
                        'img',
                        'input',
                        'isindex',
                        'li',
                        'link',
                        'listing',
                        'main',
                        'marquee',
                        'menu',
                        'menuitem',
                        'meta',
                        'nav',
                        'noembed',
                        'noframes',
                        'noscript',
                        'object',
                        'ol',
                        'p',
                        'param',
                        'plaintext',
                        'pre',
                        'script',
                        'section',
                        'select',
                        'source',
                        'style',
                        'summary',
                        'table',
                        'tbody',
                        'td',
                        'template',
                        'textarea',
                        'tfoot',
                        'th',
                        'thead',
                        'title',
                        'tr',
                        'track',
                        'ul',
                        'wbr',
                        'xmp'
                    ];
                    var inScopeTags = [
                        'applet',
                        'caption',
                        'html',
                        'table',
                        'td',
                        'th',
                        'marquee',
                        'object',
                        'template',
                        'foreignObject',
                        'desc',
                        'title'
                    ];
                    var buttonScopeTags = inScopeTags.concat(['button']);
                    var impliedEndTags = [
                        'dd',
                        'dt',
                        'li',
                        'option',
                        'optgroup',
                        'p',
                        'rp',
                        'rt'
                    ];
                    var emptyAncestorInfo = {
                        current: null,
                        formTag: null,
                        aTagInScope: null,
                        buttonTagInScope: null,
                        nobrTagInScope: null,
                        pTagInButtonScope: null,
                        listItemTagAutoclosing: null,
                        dlItemTagAutoclosing: null
                    };
                    var updatedAncestorInfo$1 = function (oldInfo, tag, instance) {
                        var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);
                        var info = {
                            tag: tag,
                            instance: instance
                        };
                        if (inScopeTags.indexOf(tag) !== -1) {
                            ancestorInfo.aTagInScope = null;
                            ancestorInfo.buttonTagInScope = null;
                            ancestorInfo.nobrTagInScope = null;
                        }
                        if (buttonScopeTags.indexOf(tag) !== -1) {
                            ancestorInfo.pTagInButtonScope = null;
                        }
                        if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
                            ancestorInfo.listItemTagAutoclosing = null;
                            ancestorInfo.dlItemTagAutoclosing = null;
                        }
                        ancestorInfo.current = info;
                        if (tag === 'form') {
                            ancestorInfo.formTag = info;
                        }
                        if (tag === 'a') {
                            ancestorInfo.aTagInScope = info;
                        }
                        if (tag === 'button') {
                            ancestorInfo.buttonTagInScope = info;
                        }
                        if (tag === 'nobr') {
                            ancestorInfo.nobrTagInScope = info;
                        }
                        if (tag === 'p') {
                            ancestorInfo.pTagInButtonScope = info;
                        }
                        if (tag === 'li') {
                            ancestorInfo.listItemTagAutoclosing = info;
                        }
                        if (tag === 'dd' || tag === 'dt') {
                            ancestorInfo.dlItemTagAutoclosing = info;
                        }
                        return ancestorInfo;
                    };
                    var isTagValidWithParent = function (tag, parentTag) {
                        switch (parentTag) {
                        case 'select':
                            return tag === 'option' || tag === 'optgroup' || tag === '#text';
                        case 'optgroup':
                            return tag === 'option' || tag === '#text';
                        case 'option':
                            return tag === '#text';
                        case 'tr':
                            return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';
                        case 'tbody':
                        case 'thead':
                        case 'tfoot':
                            return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';
                        case 'colgroup':
                            return tag === 'col' || tag === 'template';
                        case 'table':
                            return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';
                        case 'head':
                            return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';
                        case 'html':
                            return tag === 'head' || tag === 'body';
                        case '#document':
                            return tag === 'html';
                        }
                        switch (tag) {
                        case 'h1':
                        case 'h2':
                        case 'h3':
                        case 'h4':
                        case 'h5':
                        case 'h6':
                            return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';
                        case 'rp':
                        case 'rt':
                            return impliedEndTags.indexOf(parentTag) === -1;
                        case 'body':
                        case 'caption':
                        case 'col':
                        case 'colgroup':
                        case 'frame':
                        case 'head':
                        case 'html':
                        case 'tbody':
                        case 'td':
                        case 'tfoot':
                        case 'th':
                        case 'thead':
                        case 'tr':
                            return parentTag == null;
                        }
                        return true;
                    };
                    var findInvalidAncestorForTag = function (tag, ancestorInfo) {
                        switch (tag) {
                        case 'address':
                        case 'article':
                        case 'aside':
                        case 'blockquote':
                        case 'center':
                        case 'details':
                        case 'dialog':
                        case 'dir':
                        case 'div':
                        case 'dl':
                        case 'fieldset':
                        case 'figcaption':
                        case 'figure':
                        case 'footer':
                        case 'header':
                        case 'hgroup':
                        case 'main':
                        case 'menu':
                        case 'nav':
                        case 'ol':
                        case 'p':
                        case 'section':
                        case 'summary':
                        case 'ul':
                        case 'pre':
                        case 'listing':
                        case 'table':
                        case 'hr':
                        case 'xmp':
                        case 'h1':
                        case 'h2':
                        case 'h3':
                        case 'h4':
                        case 'h5':
                        case 'h6':
                            return ancestorInfo.pTagInButtonScope;
                        case 'form':
                            return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
                        case 'li':
                            return ancestorInfo.listItemTagAutoclosing;
                        case 'dd':
                        case 'dt':
                            return ancestorInfo.dlItemTagAutoclosing;
                        case 'button':
                            return ancestorInfo.buttonTagInScope;
                        case 'a':
                            return ancestorInfo.aTagInScope;
                        case 'nobr':
                            return ancestorInfo.nobrTagInScope;
                        }
                        return null;
                    };
                    var findOwnerStack = function (instance) {
                        if (!instance) {
                            return [];
                        }
                        var stack = [];
                        do {
                            stack.push(instance);
                        } while (instance = instance._currentElement._owner);
                        stack.reverse();
                        return stack;
                    };
                    var getOwnerInfo = function (childInstance, childTag, ancestorInstance, ancestorTag, isParent) {
                        var childOwner = childInstance && childInstance._currentElement._owner;
                        var ancestorOwner = ancestorInstance && ancestorInstance._currentElement._owner;
                        var childOwners = findOwnerStack(childOwner);
                        var ancestorOwners = findOwnerStack(ancestorOwner);
                        var minStackLen = Math.min(childOwners.length, ancestorOwners.length);
                        var i;
                        var deepestCommon = -1;
                        for (i = 0; i < minStackLen; i++) {
                            if (childOwners[i] === ancestorOwners[i]) {
                                deepestCommon = i;
                            } else {
                                break;
                            }
                        }
                        var UNKNOWN = '(unknown)';
                        var childOwnerNames = childOwners.slice(deepestCommon + 1).map(function (inst) {
                            return getComponentName_1(inst) || UNKNOWN;
                        });
                        var ancestorOwnerNames = ancestorOwners.slice(deepestCommon + 1).map(function (inst) {
                            return getComponentName_1(inst) || UNKNOWN;
                        });
                        var ownerInfo = [].concat(deepestCommon !== -1 ? getComponentName_1(childOwners[deepestCommon]) || UNKNOWN : [], ancestorOwnerNames, ancestorTag, isParent ? [] : ['...'], childOwnerNames, childTag).join(' > ');
                        return ownerInfo;
                    };
                    var didWarn = {};
                    validateDOMNesting$1 = function (childTag, childText, childInstance, ancestorInfo) {
                        ancestorInfo = ancestorInfo || emptyAncestorInfo;
                        var parentInfo = ancestorInfo.current;
                        var parentTag = parentInfo && parentInfo.tag;
                        if (childText != null) {
                            warning$28(childTag == null, 'validateDOMNesting: when childText is passed, childTag should be null');
                            childTag = '#text';
                        }
                        var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
                        var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
                        var invalidParentOrAncestor = invalidParent || invalidAncestor;
                        if (!invalidParentOrAncestor) {
                            return;
                        }
                        var ancestorInstance = invalidParentOrAncestor.instance;
                        var ancestorTag = invalidParentOrAncestor.tag;
                        var addendum;
                        if (childInstance != null) {
                            addendum = ' See ' + getOwnerInfo(childInstance, childTag, ancestorInstance, ancestorTag, !!invalidParent) + '.';
                        } else {
                            addendum = getCurrentFiberStackAddendum$6();
                        }
                        var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + addendum;
                        if (didWarn[warnKey]) {
                            return;
                        }
                        didWarn[warnKey] = true;
                        var tagDisplayName = childTag;
                        var whitespaceInfo = '';
                        if (childTag === '#text') {
                            if (/\S/.test(childText)) {
                                tagDisplayName = 'Text nodes';
                            } else {
                                tagDisplayName = 'Whitespace text nodes';
                                whitespaceInfo = ' Make sure you don\'t have any extra whitespace between tags on ' + 'each line of your source code.';
                            }
                        } else {
                            tagDisplayName = '<' + childTag + '>';
                        }
                        if (invalidParent) {
                            var info = '';
                            if (ancestorTag === 'table' && childTag === 'tr') {
                                info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';
                            }
                            warning$28(false, 'validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s%s', tagDisplayName, ancestorTag, whitespaceInfo, info, addendum);
                        } else {
                            warning$28(false, 'validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>.%s', tagDisplayName, ancestorTag, addendum);
                        }
                    };
                    validateDOMNesting$1.updatedAncestorInfo = updatedAncestorInfo$1;
                    validateDOMNesting$1.isTagValidInContext = function (tag, ancestorInfo) {
                        ancestorInfo = ancestorInfo || emptyAncestorInfo;
                        var parentInfo = ancestorInfo.current;
                        var parentTag = parentInfo && parentInfo.tag;
                        return isTagValidWithParent(tag, parentTag) && !findInvalidAncestorForTag(tag, ancestorInfo);
                    };
                }
                var validateDOMNesting_1 = validateDOMNesting$1;
                var HostComponent$11 = ReactTypeOfWork.HostComponent;
                function getParent(inst) {
                    if (inst._hostParent !== undefined) {
                        return inst._hostParent;
                    }
                    if (typeof inst.tag === 'number') {
                        do {
                            inst = inst['return'];
                        } while (inst && inst.tag !== HostComponent$11);
                        if (inst) {
                            return inst;
                        }
                    }
                    return null;
                }
                function getLowestCommonAncestor(instA, instB) {
                    var depthA = 0;
                    for (var tempA = instA; tempA; tempA = getParent(tempA)) {
                        depthA++;
                    }
                    var depthB = 0;
                    for (var tempB = instB; tempB; tempB = getParent(tempB)) {
                        depthB++;
                    }
                    while (depthA - depthB > 0) {
                        instA = getParent(instA);
                        depthA--;
                    }
                    while (depthB - depthA > 0) {
                        instB = getParent(instB);
                        depthB--;
                    }
                    var depth = depthA;
                    while (depth--) {
                        if (instA === instB || instA === instB.alternate) {
                            return instA;
                        }
                        instA = getParent(instA);
                        instB = getParent(instB);
                    }
                    return null;
                }
                function isAncestor(instA, instB) {
                    while (instB) {
                        if (instA === instB || instA === instB.alternate) {
                            return true;
                        }
                        instB = getParent(instB);
                    }
                    return false;
                }
                function getParentInstance(inst) {
                    return getParent(inst);
                }
                function traverseTwoPhase(inst, fn, arg) {
                    var path = [];
                    while (inst) {
                        path.push(inst);
                        inst = getParent(inst);
                    }
                    var i;
                    for (i = path.length; i-- > 0;) {
                        fn(path[i], 'captured', arg);
                    }
                    for (i = 0; i < path.length; i++) {
                        fn(path[i], 'bubbled', arg);
                    }
                }
                function traverseEnterLeave(from, to, fn, argFrom, argTo) {
                    var common = from && to ? getLowestCommonAncestor(from, to) : null;
                    var pathFrom = [];
                    while (from && from !== common) {
                        pathFrom.push(from);
                        from = getParent(from);
                    }
                    var pathTo = [];
                    while (to && to !== common) {
                        pathTo.push(to);
                        to = getParent(to);
                    }
                    var i;
                    for (i = 0; i < pathFrom.length; i++) {
                        fn(pathFrom[i], 'bubbled', argFrom);
                    }
                    for (i = pathTo.length; i-- > 0;) {
                        fn(pathTo[i], 'captured', argTo);
                    }
                }
                var ReactTreeTraversal = {
                    isAncestor: isAncestor,
                    getLowestCommonAncestor: getLowestCommonAncestor,
                    getParentInstance: getParentInstance,
                    traverseTwoPhase: traverseTwoPhase,
                    traverseEnterLeave: traverseEnterLeave
                };
                var getListener = EventPluginHub_1.getListener;
                {
                    var warning$29 = require$$0;
                }
                function listenerAtPhase(inst, event, propagationPhase) {
                    var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
                    return getListener(inst, registrationName);
                }
                function accumulateDirectionalDispatches(inst, phase, event) {
                    {
                        warning$29(inst, 'Dispatching inst must not be null');
                    }
                    var listener = listenerAtPhase(inst, event, phase);
                    if (listener) {
                        event._dispatchListeners = accumulateInto_1(event._dispatchListeners, listener);
                        event._dispatchInstances = accumulateInto_1(event._dispatchInstances, inst);
                    }
                }
                function accumulateTwoPhaseDispatchesSingle(event) {
                    if (event && event.dispatchConfig.phasedRegistrationNames) {
                        ReactTreeTraversal.traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
                    }
                }
                function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
                    if (event && event.dispatchConfig.phasedRegistrationNames) {
                        var targetInst = event._targetInst;
                        var parentInst = targetInst ? ReactTreeTraversal.getParentInstance(targetInst) : null;
                        ReactTreeTraversal.traverseTwoPhase(parentInst, accumulateDirectionalDispatches, event);
                    }
                }
                function accumulateDispatches(inst, ignoredDirection, event) {
                    if (inst && event && event.dispatchConfig.registrationName) {
                        var registrationName = event.dispatchConfig.registrationName;
                        var listener = getListener(inst, registrationName);
                        if (listener) {
                            event._dispatchListeners = accumulateInto_1(event._dispatchListeners, listener);
                            event._dispatchInstances = accumulateInto_1(event._dispatchInstances, inst);
                        }
                    }
                }
                function accumulateDirectDispatchesSingle(event) {
                    if (event && event.dispatchConfig.registrationName) {
                        accumulateDispatches(event._targetInst, null, event);
                    }
                }
                function accumulateTwoPhaseDispatches(events) {
                    forEachAccumulated_1(events, accumulateTwoPhaseDispatchesSingle);
                }
                function accumulateTwoPhaseDispatchesSkipTarget(events) {
                    forEachAccumulated_1(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
                }
                function accumulateEnterLeaveDispatches(leave, enter, from, to) {
                    ReactTreeTraversal.traverseEnterLeave(from, to, accumulateDispatches, leave, enter);
                }
                function accumulateDirectDispatches(events) {
                    forEachAccumulated_1(events, accumulateDirectDispatchesSingle);
                }
                var EventPropagators = {
                    accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
                    accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,
                    accumulateDirectDispatches: accumulateDirectDispatches,
                    accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
                };
                var EventPropagators_1 = EventPropagators;
                var compositionState = {
                    _root: null,
                    _startText: null,
                    _fallbackText: null
                };
                var FallbackCompositionState = {
                    initialize: function (nativeEventTarget) {
                        compositionState._root = nativeEventTarget;
                        compositionState._startText = FallbackCompositionState.getText();
                        return true;
                    },
                    reset: function () {
                        compositionState._root = null;
                        compositionState._startText = null;
                        compositionState._fallbackText = null;
                    },
                    getData: function () {
                        if (compositionState._fallbackText) {
                            return compositionState._fallbackText;
                        }
                        var start;
                        var startValue = compositionState._startText;
                        var startLength = startValue.length;
                        var end;
                        var endValue = FallbackCompositionState.getText();
                        var endLength = endValue.length;
                        for (start = 0; start < startLength; start++) {
                            if (startValue[start] !== endValue[start]) {
                                break;
                            }
                        }
                        var minEnd = startLength - start;
                        for (end = 1; end <= minEnd; end++) {
                            if (startValue[startLength - end] !== endValue[endLength - end]) {
                                break;
                            }
                        }
                        var sliceTail = end > 1 ? 1 - end : undefined;
                        compositionState._fallbackText = endValue.slice(start, sliceTail);
                        return compositionState._fallbackText;
                    },
                    getText: function () {
                        if ('value' in compositionState._root) {
                            return compositionState._root.value;
                        }
                        return compositionState._root[getTextContentAccessor_1()];
                    }
                };
                var FallbackCompositionState_1 = FallbackCompositionState;
                var didWarnForAddedNewProperty = false;
                var isProxySupported = typeof Proxy === 'function';
                var EVENT_POOL_SIZE = 10;
                {
                    var warning$30 = require$$0;
                }
                var shouldBeReleasedProperties = [
                    'dispatchConfig',
                    '_targetInst',
                    'nativeEvent',
                    'isDefaultPrevented',
                    'isPropagationStopped',
                    '_dispatchListeners',
                    '_dispatchInstances'
                ];
                var EventInterface = {
                    type: null,
                    target: null,
                    currentTarget: emptyFunction.thatReturnsNull,
                    eventPhase: null,
                    bubbles: null,
                    cancelable: null,
                    timeStamp: function (event) {
                        return event.timeStamp || Date.now();
                    },
                    defaultPrevented: null,
                    isTrusted: null
                };
                function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
                    {
                        delete this.nativeEvent;
                        delete this.preventDefault;
                        delete this.stopPropagation;
                    }
                    this.dispatchConfig = dispatchConfig;
                    this._targetInst = targetInst;
                    this.nativeEvent = nativeEvent;
                    var Interface = this.constructor.Interface;
                    for (var propName in Interface) {
                        if (!Interface.hasOwnProperty(propName)) {
                            continue;
                        }
                        {
                            delete this[propName];
                        }
                        var normalize = Interface[propName];
                        if (normalize) {
                            this[propName] = normalize(nativeEvent);
                        } else {
                            if (propName === 'target') {
                                this.target = nativeEventTarget;
                            } else {
                                this[propName] = nativeEvent[propName];
                            }
                        }
                    }
                    var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
                    if (defaultPrevented) {
                        this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
                    } else {
                        this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
                    }
                    this.isPropagationStopped = emptyFunction.thatReturnsFalse;
                    return this;
                }
                _assign(SyntheticEvent.prototype, {
                    preventDefault: function () {
                        this.defaultPrevented = true;
                        var event = this.nativeEvent;
                        if (!event) {
                            return;
                        }
                        if (event.preventDefault) {
                            event.preventDefault();
                        } else if (typeof event.returnValue !== 'unknown') {
                            event.returnValue = false;
                        }
                        this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
                    },
                    stopPropagation: function () {
                        var event = this.nativeEvent;
                        if (!event) {
                            return;
                        }
                        if (event.stopPropagation) {
                            event.stopPropagation();
                        } else if (typeof event.cancelBubble !== 'unknown') {
                            event.cancelBubble = true;
                        }
                        this.isPropagationStopped = emptyFunction.thatReturnsTrue;
                    },
                    persist: function () {
                        this.isPersistent = emptyFunction.thatReturnsTrue;
                    },
                    isPersistent: emptyFunction.thatReturnsFalse,
                    destructor: function () {
                        var Interface = this.constructor.Interface;
                        for (var propName in Interface) {
                            {
                                Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
                            }
                        }
                        for (var i = 0; i < shouldBeReleasedProperties.length; i++) {
                            this[shouldBeReleasedProperties[i]] = null;
                        }
                        {
                            Object.defineProperty(this, 'nativeEvent', getPooledWarningPropertyDefinition('nativeEvent', null));
                            Object.defineProperty(this, 'preventDefault', getPooledWarningPropertyDefinition('preventDefault', emptyFunction));
                            Object.defineProperty(this, 'stopPropagation', getPooledWarningPropertyDefinition('stopPropagation', emptyFunction));
                        }
                    }
                });
                SyntheticEvent.Interface = EventInterface;
                SyntheticEvent.augmentClass = function (Class, Interface) {
                    var Super = this;
                    var E = function () {
                    };
                    E.prototype = Super.prototype;
                    var prototype = new E();
                    _assign(prototype, Class.prototype);
                    Class.prototype = prototype;
                    Class.prototype.constructor = Class;
                    Class.Interface = _assign({}, Super.Interface, Interface);
                    Class.augmentClass = Super.augmentClass;
                    addEventPoolingTo(Class);
                };
                {
                    if (isProxySupported) {
                        SyntheticEvent = new Proxy(SyntheticEvent, {
                            construct: function (target, args) {
                                return this.apply(target, Object.create(target.prototype), args);
                            },
                            apply: function (constructor, that, args) {
                                return new Proxy(constructor.apply(that, args), {
                                    set: function (target, prop, value) {
                                        if (prop !== 'isPersistent' && !target.constructor.Interface.hasOwnProperty(prop) && shouldBeReleasedProperties.indexOf(prop) === -1) {
                                            warning$30(didWarnForAddedNewProperty || target.isPersistent(), 'This synthetic event is reused for performance reasons. If you\'re ' + 'seeing this, you\'re adding a new property in the synthetic event object. ' + 'The property is never released. See ' + 'https://fb.me/react-event-pooling for more information.');
                                            didWarnForAddedNewProperty = true;
                                        }
                                        target[prop] = value;
                                        return true;
                                    }
                                });
                            }
                        });
                    }
                }
                addEventPoolingTo(SyntheticEvent);
                var SyntheticEvent_1 = SyntheticEvent;
                function getPooledWarningPropertyDefinition(propName, getVal) {
                    var isFunction = typeof getVal === 'function';
                    return {
                        configurable: true,
                        set: set,
                        get: get
                    };
                    function set(val) {
                        var action = isFunction ? 'setting the method' : 'setting the property';
                        warn(action, 'This is effectively a no-op');
                        return val;
                    }
                    function get() {
                        var action = isFunction ? 'accessing the method' : 'accessing the property';
                        var result = isFunction ? 'This is a no-op function' : 'This is set to null';
                        warn(action, result);
                        return getVal;
                    }
                    function warn(action, result) {
                        var warningCondition = false;
                        warning$30(warningCondition, 'This synthetic event is reused for performance reasons. If you\'re seeing this, ' + 'you\'re %s `%s` on a released/nullified synthetic event. %s. ' + 'If you must keep the original synthetic event around, use event.persist(). ' + 'See https://fb.me/react-event-pooling for more information.', action, propName, result);
                    }
                }
                function getPooledEvent(dispatchConfig, targetInst, nativeEvent, nativeInst) {
                    var EventConstructor = this;
                    if (EventConstructor.eventPool.length) {
                        var instance = EventConstructor.eventPool.pop();
                        EventConstructor.call(instance, dispatchConfig, targetInst, nativeEvent, nativeInst);
                        return instance;
                    }
                    return new EventConstructor(dispatchConfig, targetInst, nativeEvent, nativeInst);
                }
                function releasePooledEvent(event) {
                    var EventConstructor = this;
                    !(event instanceof EventConstructor) ? invariant(false, 'Trying to release an event instance  into a pool of a different type.') : void 0;
                    event.destructor();
                    if (EventConstructor.eventPool.length < EVENT_POOL_SIZE) {
                        EventConstructor.eventPool.push(event);
                    }
                }
                function addEventPoolingTo(EventConstructor) {
                    EventConstructor.eventPool = [];
                    EventConstructor.getPooled = getPooledEvent;
                    EventConstructor.release = releasePooledEvent;
                }
                var CompositionEventInterface = { data: null };
                function SyntheticCompositionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
                    return SyntheticEvent_1.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
                }
                SyntheticEvent_1.augmentClass(SyntheticCompositionEvent, CompositionEventInterface);
                var SyntheticCompositionEvent_1 = SyntheticCompositionEvent;
                var InputEventInterface = { data: null };
                function SyntheticInputEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
                    return SyntheticEvent_1.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
                }
                SyntheticEvent_1.augmentClass(SyntheticInputEvent, InputEventInterface);
                var SyntheticInputEvent_1 = SyntheticInputEvent;
                var END_KEYCODES = [
                    9,
                    13,
                    27,
                    32
                ];
                var START_KEYCODE = 229;
                var canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;
                var documentMode = null;
                if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
                    documentMode = document.documentMode;
                }
                var canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();
                var useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
                function isPresto() {
                    var opera = window.opera;
                    return typeof opera === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;
                }
                var SPACEBAR_CODE = 32;
                var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
                var eventTypes = {
                    beforeInput: {
                        phasedRegistrationNames: {
                            bubbled: 'onBeforeInput',
                            captured: 'onBeforeInputCapture'
                        },
                        dependencies: [
                            'topCompositionEnd',
                            'topKeyPress',
                            'topTextInput',
                            'topPaste'
                        ]
                    },
                    compositionEnd: {
                        phasedRegistrationNames: {
                            bubbled: 'onCompositionEnd',
                            captured: 'onCompositionEndCapture'
                        },
                        dependencies: [
                            'topBlur',
                            'topCompositionEnd',
                            'topKeyDown',
                            'topKeyPress',
                            'topKeyUp',
                            'topMouseDown'
                        ]
                    },
                    compositionStart: {
                        phasedRegistrationNames: {
                            bubbled: 'onCompositionStart',
                            captured: 'onCompositionStartCapture'
                        },
                        dependencies: [
                            'topBlur',
                            'topCompositionStart',
                            'topKeyDown',
                            'topKeyPress',
                            'topKeyUp',
                            'topMouseDown'
                        ]
                    },
                    compositionUpdate: {
                        phasedRegistrationNames: {
                            bubbled: 'onCompositionUpdate',
                            captured: 'onCompositionUpdateCapture'
                        },
                        dependencies: [
                            'topBlur',
                            'topCompositionUpdate',
                            'topKeyDown',
                            'topKeyPress',
                            'topKeyUp',
                            'topMouseDown'
                        ]
                    }
                };
                var hasSpaceKeypress = false;
                function isKeypressCommand(nativeEvent) {
                    return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && !(nativeEvent.ctrlKey && nativeEvent.altKey);
                }
                function getCompositionEventType(topLevelType) {
                    switch (topLevelType) {
                    case 'topCompositionStart':
                        return eventTypes.compositionStart;
                    case 'topCompositionEnd':
                        return eventTypes.compositionEnd;
                    case 'topCompositionUpdate':
                        return eventTypes.compositionUpdate;
                    }
                }
                function isFallbackCompositionStart(topLevelType, nativeEvent) {
                    return topLevelType === 'topKeyDown' && nativeEvent.keyCode === START_KEYCODE;
                }
                function isFallbackCompositionEnd(topLevelType, nativeEvent) {
                    switch (topLevelType) {
                    case 'topKeyUp':
                        return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
                    case 'topKeyDown':
                        return nativeEvent.keyCode !== START_KEYCODE;
                    case 'topKeyPress':
                    case 'topMouseDown':
                    case 'topBlur':
                        return true;
                    default:
                        return false;
                    }
                }
                function getDataFromCustomEvent(nativeEvent) {
                    var detail = nativeEvent.detail;
                    if (typeof detail === 'object' && 'data' in detail) {
                        return detail.data;
                    }
                    return null;
                }
                var isComposing = false;
                function extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
                    var eventType;
                    var fallbackData;
                    if (canUseCompositionEvent) {
                        eventType = getCompositionEventType(topLevelType);
                    } else if (!isComposing) {
                        if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
                            eventType = eventTypes.compositionStart;
                        }
                    } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
                        eventType = eventTypes.compositionEnd;
                    }
                    if (!eventType) {
                        return null;
                    }
                    if (useFallbackCompositionData) {
                        if (!isComposing && eventType === eventTypes.compositionStart) {
                            isComposing = FallbackCompositionState_1.initialize(nativeEventTarget);
                        } else if (eventType === eventTypes.compositionEnd) {
                            if (isComposing) {
                                fallbackData = FallbackCompositionState_1.getData();
                            }
                        }
                    }
                    var event = SyntheticCompositionEvent_1.getPooled(eventType, targetInst, nativeEvent, nativeEventTarget);
                    if (fallbackData) {
                        event.data = fallbackData;
                    } else {
                        var customData = getDataFromCustomEvent(nativeEvent);
                        if (customData !== null) {
                            event.data = customData;
                        }
                    }
                    EventPropagators_1.accumulateTwoPhaseDispatches(event);
                    return event;
                }
                function getNativeBeforeInputChars(topLevelType, nativeEvent) {
                    switch (topLevelType) {
                    case 'topCompositionEnd':
                        return getDataFromCustomEvent(nativeEvent);
                    case 'topKeyPress':
                        var which = nativeEvent.which;
                        if (which !== SPACEBAR_CODE) {
                            return null;
                        }
                        hasSpaceKeypress = true;
                        return SPACEBAR_CHAR;
                    case 'topTextInput':
                        var chars = nativeEvent.data;
                        if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                            return null;
                        }
                        return chars;
                    default:
                        return null;
                    }
                }
                function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
                    if (isComposing) {
                        if (topLevelType === 'topCompositionEnd' || !canUseCompositionEvent && isFallbackCompositionEnd(topLevelType, nativeEvent)) {
                            var chars = FallbackCompositionState_1.getData();
                            FallbackCompositionState_1.reset();
                            isComposing = false;
                            return chars;
                        }
                        return null;
                    }
                    switch (topLevelType) {
                    case 'topPaste':
                        return null;
                    case 'topKeyPress':
                        if (!isKeypressCommand(nativeEvent)) {
                            if (nativeEvent.char && nativeEvent.char.length > 1) {
                                return nativeEvent.char;
                            } else if (nativeEvent.which) {
                                return String.fromCharCode(nativeEvent.which);
                            }
                        }
                        return null;
                    case 'topCompositionEnd':
                        return useFallbackCompositionData ? null : nativeEvent.data;
                    default:
                        return null;
                    }
                }
                function extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
                    var chars;
                    if (canUseTextInputEvent) {
                        chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
                    } else {
                        chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
                    }
                    if (!chars) {
                        return null;
                    }
                    var event = SyntheticInputEvent_1.getPooled(eventTypes.beforeInput, targetInst, nativeEvent, nativeEventTarget);
                    event.data = chars;
                    EventPropagators_1.accumulateTwoPhaseDispatches(event);
                    return event;
                }
                var BeforeInputEventPlugin = {
                    eventTypes: eventTypes,
                    extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
                        return [
                            extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget),
                            extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget)
                        ];
                    }
                };
                var BeforeInputEventPlugin_1 = BeforeInputEventPlugin;
                var supportedInputTypes = {
                    color: true,
                    date: true,
                    datetime: true,
                    'datetime-local': true,
                    email: true,
                    month: true,
                    number: true,
                    password: true,
                    range: true,
                    search: true,
                    tel: true,
                    text: true,
                    time: true,
                    url: true,
                    week: true
                };
                function isTextInputElement(elem) {
                    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
                    if (nodeName === 'input') {
                        return !!supportedInputTypes[elem.type];
                    }
                    if (nodeName === 'textarea') {
                        return true;
                    }
                    return false;
                }
                var isTextInputElement_1 = isTextInputElement;
                var eventTypes$1 = {
                    change: {
                        phasedRegistrationNames: {
                            bubbled: 'onChange',
                            captured: 'onChangeCapture'
                        },
                        dependencies: [
                            'topBlur',
                            'topChange',
                            'topClick',
                            'topFocus',
                            'topInput',
                            'topKeyDown',
                            'topKeyUp',
                            'topSelectionChange'
                        ]
                    }
                };
                function createAndAccumulateChangeEvent(inst, nativeEvent, target) {
                    var event = SyntheticEvent_1.getPooled(eventTypes$1.change, inst, nativeEvent, target);
                    event.type = 'change';
                    ReactControlledComponent_1.enqueueStateRestore(target);
                    EventPropagators_1.accumulateTwoPhaseDispatches(event);
                    return event;
                }
                var activeElement = null;
                var activeElementInst = null;
                function shouldUseChangeEvent(elem) {
                    var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
                    return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
                }
                function manualDispatchChangeEvent(nativeEvent) {
                    var event = createAndAccumulateChangeEvent(activeElementInst, nativeEvent, getEventTarget_1(nativeEvent));
                    ReactGenericBatching_1.batchedUpdates(runEventInBatch, event);
                }
                function runEventInBatch(event) {
                    EventPluginHub_1.enqueueEvents(event);
                    EventPluginHub_1.processEventQueue(false);
                }
                function getInstIfValueChanged(targetInst) {
                    var targetNode = ReactDOMComponentTree_1.getNodeFromInstance(targetInst);
                    if (inputValueTracking_1.updateValueIfChanged(targetNode)) {
                        return targetInst;
                    }
                }
                function getTargetInstForChangeEvent(topLevelType, targetInst) {
                    if (topLevelType === 'topChange') {
                        return targetInst;
                    }
                }
                var isInputEventSupported = false;
                if (ExecutionEnvironment.canUseDOM) {
                    isInputEventSupported = isEventSupported_1('input') && (!document.documentMode || document.documentMode > 9);
                }
                function startWatchingForValueChange(target, targetInst) {
                    activeElement = target;
                    activeElementInst = targetInst;
                    activeElement.attachEvent('onpropertychange', handlePropertyChange);
                }
                function stopWatchingForValueChange() {
                    if (!activeElement) {
                        return;
                    }
                    activeElement.detachEvent('onpropertychange', handlePropertyChange);
                    activeElement = null;
                    activeElementInst = null;
                }
                function handlePropertyChange(nativeEvent) {
                    if (nativeEvent.propertyName !== 'value') {
                        return;
                    }
                    if (getInstIfValueChanged(activeElementInst)) {
                        manualDispatchChangeEvent(nativeEvent);
                    }
                }
                function handleEventsForInputEventPolyfill(topLevelType, target, targetInst) {
                    if (topLevelType === 'topFocus') {
                        stopWatchingForValueChange();
                        startWatchingForValueChange(target, targetInst);
                    } else if (topLevelType === 'topBlur') {
                        stopWatchingForValueChange();
                    }
                }
                function getTargetInstForInputEventPolyfill(topLevelType, targetInst) {
                    if (topLevelType === 'topSelectionChange' || topLevelType === 'topKeyUp' || topLevelType === 'topKeyDown') {
                        return getInstIfValueChanged(activeElementInst);
                    }
                }
                function shouldUseClickEvent(elem) {
                    var nodeName = elem.nodeName;
                    return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
                }
                function getTargetInstForClickEvent(topLevelType, targetInst) {
                    if (topLevelType === 'topClick') {
                        return getInstIfValueChanged(targetInst);
                    }
                }
                function getTargetInstForInputOrChangeEvent(topLevelType, targetInst) {
                    if (topLevelType === 'topInput' || topLevelType === 'topChange') {
                        return getInstIfValueChanged(targetInst);
                    }
                }
                function handleControlledInputBlur(inst, node) {
                    if (inst == null) {
                        return;
                    }
                    var state = inst._wrapperState || node._wrapperState;
                    if (!state || !state.controlled || node.type !== 'number') {
                        return;
                    }
                    var value = '' + node.value;
                    if (node.getAttribute('value') !== value) {
                        node.setAttribute('value', value);
                    }
                }
                var ChangeEventPlugin = {
                    eventTypes: eventTypes$1,
                    _isInputEventSupported: isInputEventSupported,
                    extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
                        var targetNode = targetInst ? ReactDOMComponentTree_1.getNodeFromInstance(targetInst) : window;
                        var getTargetInstFunc, handleEventFunc;
                        if (shouldUseChangeEvent(targetNode)) {
                            getTargetInstFunc = getTargetInstForChangeEvent;
                        } else if (isTextInputElement_1(targetNode)) {
                            if (isInputEventSupported) {
                                getTargetInstFunc = getTargetInstForInputOrChangeEvent;
                            } else {
                                getTargetInstFunc = getTargetInstForInputEventPolyfill;
                                handleEventFunc = handleEventsForInputEventPolyfill;
                            }
                        } else if (shouldUseClickEvent(targetNode)) {
                            getTargetInstFunc = getTargetInstForClickEvent;
                        }
                        if (getTargetInstFunc) {
                            var inst = getTargetInstFunc(topLevelType, targetInst);
                            if (inst) {
                                var event = createAndAccumulateChangeEvent(inst, nativeEvent, nativeEventTarget);
                                return event;
                            }
                        }
                        if (handleEventFunc) {
                            handleEventFunc(topLevelType, targetNode, targetInst);
                        }
                        if (topLevelType === 'topBlur') {
                            handleControlledInputBlur(targetInst, targetNode);
                        }
                    }
                };
                var ChangeEventPlugin_1 = ChangeEventPlugin;
                var DOMEventPluginOrder = [
                    'ResponderEventPlugin',
                    'SimpleEventPlugin',
                    'TapEventPlugin',
                    'EnterLeaveEventPlugin',
                    'ChangeEventPlugin',
                    'SelectEventPlugin',
                    'BeforeInputEventPlugin'
                ];
                var DOMEventPluginOrder_1 = DOMEventPluginOrder;
                var UIEventInterface = {
                    view: function (event) {
                        if (event.view) {
                            return event.view;
                        }
                        var target = getEventTarget_1(event);
                        if (target.window === target) {
                            return target;
                        }
                        var doc = target.ownerDocument;
                        if (doc) {
                            return doc.defaultView || doc.parentWindow;
                        } else {
                            return window;
                        }
                    },
                    detail: function (event) {
                        return event.detail || 0;
                    }
                };
                function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
                    return SyntheticEvent_1.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
                }
                SyntheticEvent_1.augmentClass(SyntheticUIEvent, UIEventInterface);
                var SyntheticUIEvent_1 = SyntheticUIEvent;
                var modifierKeyToProp = {
                    Alt: 'altKey',
                    Control: 'ctrlKey',
                    Meta: 'metaKey',
                    Shift: 'shiftKey'
                };
                function modifierStateGetter(keyArg) {
                    var syntheticEvent = this;
                    var nativeEvent = syntheticEvent.nativeEvent;
                    if (nativeEvent.getModifierState) {
                        return nativeEvent.getModifierState(keyArg);
                    }
                    var keyProp = modifierKeyToProp[keyArg];
                    return keyProp ? !!nativeEvent[keyProp] : false;
                }
                function getEventModifierState(nativeEvent) {
                    return modifierStateGetter;
                }
                var getEventModifierState_1 = getEventModifierState;
                var MouseEventInterface = {
                    screenX: null,
                    screenY: null,
                    clientX: null,
                    clientY: null,
                    pageX: null,
                    pageY: null,
                    ctrlKey: null,
                    shiftKey: null,
                    altKey: null,
                    metaKey: null,
                    getModifierState: getEventModifierState_1,
                    button: null,
                    buttons: null,
                    relatedTarget: function (event) {
                        return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
                    }
                };
                function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
                    return SyntheticUIEvent_1.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
                }
                SyntheticUIEvent_1.augmentClass(SyntheticMouseEvent, MouseEventInterface);
                var SyntheticMouseEvent_1 = SyntheticMouseEvent;
                var eventTypes$2 = {
                    mouseEnter: {
                        registrationName: 'onMouseEnter',
                        dependencies: [
                            'topMouseOut',
                            'topMouseOver'
                        ]
                    },
                    mouseLeave: {
                        registrationName: 'onMouseLeave',
                        dependencies: [
                            'topMouseOut',
                            'topMouseOver'
                        ]
                    }
                };
                var EnterLeaveEventPlugin = {
                    eventTypes: eventTypes$2,
                    extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
                        if (topLevelType === 'topMouseOver' && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
                            return null;
                        }
                        if (topLevelType !== 'topMouseOut' && topLevelType !== 'topMouseOver') {
                            return null;
                        }
                        var win;
                        if (nativeEventTarget.window === nativeEventTarget) {
                            win = nativeEventTarget;
                        } else {
                            var doc = nativeEventTarget.ownerDocument;
                            if (doc) {
                                win = doc.defaultView || doc.parentWindow;
                            } else {
                                win = window;
                            }
                        }
                        var from;
                        var to;
                        if (topLevelType === 'topMouseOut') {
                            from = targetInst;
                            var related = nativeEvent.relatedTarget || nativeEvent.toElement;
                            to = related ? ReactDOMComponentTree_1.getClosestInstanceFromNode(related) : null;
                        } else {
                            from = null;
                            to = targetInst;
                        }
                        if (from === to) {
                            return null;
                        }
                        var fromNode = from == null ? win : ReactDOMComponentTree_1.getNodeFromInstance(from);
                        var toNode = to == null ? win : ReactDOMComponentTree_1.getNodeFromInstance(to);
                        var leave = SyntheticMouseEvent_1.getPooled(eventTypes$2.mouseLeave, from, nativeEvent, nativeEventTarget);
                        leave.type = 'mouseleave';
                        leave.target = fromNode;
                        leave.relatedTarget = toNode;
                        var enter = SyntheticMouseEvent_1.getPooled(eventTypes$2.mouseEnter, to, nativeEvent, nativeEventTarget);
                        enter.type = 'mouseenter';
                        enter.target = toNode;
                        enter.relatedTarget = fromNode;
                        EventPropagators_1.accumulateEnterLeaveDispatches(leave, enter, from, to);
                        return [
                            leave,
                            enter
                        ];
                    }
                };
                var EnterLeaveEventPlugin_1 = EnterLeaveEventPlugin;
                var DOCUMENT_NODE$2 = HTMLNodeType_1.DOCUMENT_NODE;
                var skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && 'documentMode' in document && document.documentMode <= 11;
                var eventTypes$3 = {
                    select: {
                        phasedRegistrationNames: {
                            bubbled: 'onSelect',
                            captured: 'onSelectCapture'
                        },
                        dependencies: [
                            'topBlur',
                            'topContextMenu',
                            'topFocus',
                            'topKeyDown',
                            'topKeyUp',
                            'topMouseDown',
                            'topMouseUp',
                            'topSelectionChange'
                        ]
                    }
                };
                var activeElement$1 = null;
                var activeElementInst$1 = null;
                var lastSelection = null;
                var mouseDown = false;
                var isListeningToAllDependencies = ReactBrowserEventEmitter_1.isListeningToAllDependencies;
                function getSelection(node) {
                    if ('selectionStart' in node && ReactInputSelection_1.hasSelectionCapabilities(node)) {
                        return {
                            start: node.selectionStart,
                            end: node.selectionEnd
                        };
                    } else if (window.getSelection) {
                        var selection = window.getSelection();
                        return {
                            anchorNode: selection.anchorNode,
                            anchorOffset: selection.anchorOffset,
                            focusNode: selection.focusNode,
                            focusOffset: selection.focusOffset
                        };
                    }
                }
                function constructSelectEvent(nativeEvent, nativeEventTarget) {
                    if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement()) {
                        return null;
                    }
                    var currentSelection = getSelection(activeElement$1);
                    if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
                        lastSelection = currentSelection;
                        var syntheticEvent = SyntheticEvent_1.getPooled(eventTypes$3.select, activeElementInst$1, nativeEvent, nativeEventTarget);
                        syntheticEvent.type = 'select';
                        syntheticEvent.target = activeElement$1;
                        EventPropagators_1.accumulateTwoPhaseDispatches(syntheticEvent);
                        return syntheticEvent;
                    }
                    return null;
                }
                var SelectEventPlugin = {
                    eventTypes: eventTypes$3,
                    extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
                        var doc = nativeEventTarget.window === nativeEventTarget ? nativeEventTarget.document : nativeEventTarget.nodeType === DOCUMENT_NODE$2 ? nativeEventTarget : nativeEventTarget.ownerDocument;
                        if (!doc || !isListeningToAllDependencies('onSelect', doc)) {
                            return null;
                        }
                        var targetNode = targetInst ? ReactDOMComponentTree_1.getNodeFromInstance(targetInst) : window;
                        switch (topLevelType) {
                        case 'topFocus':
                            if (isTextInputElement_1(targetNode) || targetNode.contentEditable === 'true') {
                                activeElement$1 = targetNode;
                                activeElementInst$1 = targetInst;
                                lastSelection = null;
                            }
                            break;
                        case 'topBlur':
                            activeElement$1 = null;
                            activeElementInst$1 = null;
                            lastSelection = null;
                            break;
                        case 'topMouseDown':
                            mouseDown = true;
                            break;
                        case 'topContextMenu':
                        case 'topMouseUp':
                            mouseDown = false;
                            return constructSelectEvent(nativeEvent, nativeEventTarget);
                        case 'topSelectionChange':
                            if (skipSelectionChangeEvent) {
                                break;
                            }
                        case 'topKeyDown':
                        case 'topKeyUp':
                            return constructSelectEvent(nativeEvent, nativeEventTarget);
                        }
                        return null;
                    }
                };
                var SelectEventPlugin_1 = SelectEventPlugin;
                var AnimationEventInterface = {
                    animationName: null,
                    elapsedTime: null,
                    pseudoElement: null
                };
                function SyntheticAnimationEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
                    return SyntheticEvent_1.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
                }
                SyntheticEvent_1.augmentClass(SyntheticAnimationEvent, AnimationEventInterface);
                var SyntheticAnimationEvent_1 = SyntheticAnimationEvent;
                var ClipboardEventInterface = {
                    clipboardData: function (event) {
                        return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
                    }
                };
                function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
                    return SyntheticEvent_1.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
                }
                SyntheticEvent_1.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);
                var SyntheticClipboardEvent_1 = SyntheticClipboardEvent;
                var FocusEventInterface = { relatedTarget: null };
                function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
                    return SyntheticUIEvent_1.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
                }
                SyntheticUIEvent_1.augmentClass(SyntheticFocusEvent, FocusEventInterface);
                var SyntheticFocusEvent_1 = SyntheticFocusEvent;
                function getEventCharCode(nativeEvent) {
                    var charCode;
                    var keyCode = nativeEvent.keyCode;
                    if ('charCode' in nativeEvent) {
                        charCode = nativeEvent.charCode;
                        if (charCode === 0 && keyCode === 13) {
                            charCode = 13;
                        }
                    } else {
                        charCode = keyCode;
                    }
                    if (charCode >= 32 || charCode === 13) {
                        return charCode;
                    }
                    return 0;
                }
                var getEventCharCode_1 = getEventCharCode;
                var normalizeKey = {
                    Esc: 'Escape',
                    Spacebar: ' ',
                    Left: 'ArrowLeft',
                    Up: 'ArrowUp',
                    Right: 'ArrowRight',
                    Down: 'ArrowDown',
                    Del: 'Delete',
                    Win: 'OS',
                    Menu: 'ContextMenu',
                    Apps: 'ContextMenu',
                    Scroll: 'ScrollLock',
                    MozPrintableKey: 'Unidentified'
                };
                var translateToKey = {
                    8: 'Backspace',
                    9: 'Tab',
                    12: 'Clear',
                    13: 'Enter',
                    16: 'Shift',
                    17: 'Control',
                    18: 'Alt',
                    19: 'Pause',
                    20: 'CapsLock',
                    27: 'Escape',
                    32: ' ',
                    33: 'PageUp',
                    34: 'PageDown',
                    35: 'End',
                    36: 'Home',
                    37: 'ArrowLeft',
                    38: 'ArrowUp',
                    39: 'ArrowRight',
                    40: 'ArrowDown',
                    45: 'Insert',
                    46: 'Delete',
                    112: 'F1',
                    113: 'F2',
                    114: 'F3',
                    115: 'F4',
                    116: 'F5',
                    117: 'F6',
                    118: 'F7',
                    119: 'F8',
                    120: 'F9',
                    121: 'F10',
                    122: 'F11',
                    123: 'F12',
                    144: 'NumLock',
                    145: 'ScrollLock',
                    224: 'Meta'
                };
                function getEventKey(nativeEvent) {
                    if (nativeEvent.key) {
                        var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
                        if (key !== 'Unidentified') {
                            return key;
                        }
                    }
                    if (nativeEvent.type === 'keypress') {
                        var charCode = getEventCharCode_1(nativeEvent);
                        return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
                    }
                    if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
                        return translateToKey[nativeEvent.keyCode] || 'Unidentified';
                    }
                    return '';
                }
                var getEventKey_1 = getEventKey;
                var KeyboardEventInterface = {
                    key: getEventKey_1,
                    location: null,
                    ctrlKey: null,
                    shiftKey: null,
                    altKey: null,
                    metaKey: null,
                    repeat: null,
                    locale: null,
                    getModifierState: getEventModifierState_1,
                    charCode: function (event) {
                        if (event.type === 'keypress') {
                            return getEventCharCode_1(event);
                        }
                        return 0;
                    },
                    keyCode: function (event) {
                        if (event.type === 'keydown' || event.type === 'keyup') {
                            return event.keyCode;
                        }
                        return 0;
                    },
                    which: function (event) {
                        if (event.type === 'keypress') {
                            return getEventCharCode_1(event);
                        }
                        if (event.type === 'keydown' || event.type === 'keyup') {
                            return event.keyCode;
                        }
                        return 0;
                    }
                };
                function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
                    return SyntheticUIEvent_1.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
                }
                SyntheticUIEvent_1.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);
                var SyntheticKeyboardEvent_1 = SyntheticKeyboardEvent;
                var DragEventInterface = { dataTransfer: null };
                function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
                    return SyntheticMouseEvent_1.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
                }
                SyntheticMouseEvent_1.augmentClass(SyntheticDragEvent, DragEventInterface);
                var SyntheticDragEvent_1 = SyntheticDragEvent;
                var TouchEventInterface = {
                    touches: null,
                    targetTouches: null,
                    changedTouches: null,
                    altKey: null,
                    metaKey: null,
                    ctrlKey: null,
                    shiftKey: null,
                    getModifierState: getEventModifierState_1
                };
                function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
                    return SyntheticUIEvent_1.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
                }
                SyntheticUIEvent_1.augmentClass(SyntheticTouchEvent, TouchEventInterface);
                var SyntheticTouchEvent_1 = SyntheticTouchEvent;
                var TransitionEventInterface = {
                    propertyName: null,
                    elapsedTime: null,
                    pseudoElement: null
                };
                function SyntheticTransitionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
                    return SyntheticEvent_1.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
                }
                SyntheticEvent_1.augmentClass(SyntheticTransitionEvent, TransitionEventInterface);
                var SyntheticTransitionEvent_1 = SyntheticTransitionEvent;
                var WheelEventInterface = {
                    deltaX: function (event) {
                        return 'deltaX' in event ? event.deltaX : 'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
                    },
                    deltaY: function (event) {
                        return 'deltaY' in event ? event.deltaY : 'wheelDeltaY' in event ? -event.wheelDeltaY : 'wheelDelta' in event ? -event.wheelDelta : 0;
                    },
                    deltaZ: null,
                    deltaMode: null
                };
                function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
                    return SyntheticMouseEvent_1.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
                }
                SyntheticMouseEvent_1.augmentClass(SyntheticWheelEvent, WheelEventInterface);
                var SyntheticWheelEvent_1 = SyntheticWheelEvent;
                var eventTypes$4 = {};
                var topLevelEventsToDispatchConfig = {};
                [
                    'abort',
                    'animationEnd',
                    'animationIteration',
                    'animationStart',
                    'blur',
                    'cancel',
                    'canPlay',
                    'canPlayThrough',
                    'click',
                    'close',
                    'contextMenu',
                    'copy',
                    'cut',
                    'doubleClick',
                    'drag',
                    'dragEnd',
                    'dragEnter',
                    'dragExit',
                    'dragLeave',
                    'dragOver',
                    'dragStart',
                    'drop',
                    'durationChange',
                    'emptied',
                    'encrypted',
                    'ended',
                    'error',
                    'focus',
                    'input',
                    'invalid',
                    'keyDown',
                    'keyPress',
                    'keyUp',
                    'load',
                    'loadedData',
                    'loadedMetadata',
                    'loadStart',
                    'mouseDown',
                    'mouseMove',
                    'mouseOut',
                    'mouseOver',
                    'mouseUp',
                    'paste',
                    'pause',
                    'play',
                    'playing',
                    'progress',
                    'rateChange',
                    'reset',
                    'scroll',
                    'seeked',
                    'seeking',
                    'stalled',
                    'submit',
                    'suspend',
                    'timeUpdate',
                    'toggle',
                    'touchCancel',
                    'touchEnd',
                    'touchMove',
                    'touchStart',
                    'transitionEnd',
                    'volumeChange',
                    'waiting',
                    'wheel'
                ].forEach(function (event) {
                    var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
                    var onEvent = 'on' + capitalizedEvent;
                    var topEvent = 'top' + capitalizedEvent;
                    var type = {
                        phasedRegistrationNames: {
                            bubbled: onEvent,
                            captured: onEvent + 'Capture'
                        },
                        dependencies: [topEvent]
                    };
                    eventTypes$4[event] = type;
                    topLevelEventsToDispatchConfig[topEvent] = type;
                });
                var SimpleEventPlugin = {
                    eventTypes: eventTypes$4,
                    extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
                        var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
                        if (!dispatchConfig) {
                            return null;
                        }
                        var EventConstructor;
                        switch (topLevelType) {
                        case 'topAbort':
                        case 'topCancel':
                        case 'topCanPlay':
                        case 'topCanPlayThrough':
                        case 'topClose':
                        case 'topDurationChange':
                        case 'topEmptied':
                        case 'topEncrypted':
                        case 'topEnded':
                        case 'topError':
                        case 'topInput':
                        case 'topInvalid':
                        case 'topLoad':
                        case 'topLoadedData':
                        case 'topLoadedMetadata':
                        case 'topLoadStart':
                        case 'topPause':
                        case 'topPlay':
                        case 'topPlaying':
                        case 'topProgress':
                        case 'topRateChange':
                        case 'topReset':
                        case 'topSeeked':
                        case 'topSeeking':
                        case 'topStalled':
                        case 'topSubmit':
                        case 'topSuspend':
                        case 'topTimeUpdate':
                        case 'topToggle':
                        case 'topVolumeChange':
                        case 'topWaiting':
                            EventConstructor = SyntheticEvent_1;
                            break;
                        case 'topKeyPress':
                            if (getEventCharCode_1(nativeEvent) === 0) {
                                return null;
                            }
                        case 'topKeyDown':
                        case 'topKeyUp':
                            EventConstructor = SyntheticKeyboardEvent_1;
                            break;
                        case 'topBlur':
                        case 'topFocus':
                            EventConstructor = SyntheticFocusEvent_1;
                            break;
                        case 'topClick':
                            if (nativeEvent.button === 2) {
                                return null;
                            }
                        case 'topDoubleClick':
                        case 'topMouseDown':
                        case 'topMouseMove':
                        case 'topMouseUp':
                        case 'topMouseOut':
                        case 'topMouseOver':
                        case 'topContextMenu':
                            EventConstructor = SyntheticMouseEvent_1;
                            break;
                        case 'topDrag':
                        case 'topDragEnd':
                        case 'topDragEnter':
                        case 'topDragExit':
                        case 'topDragLeave':
                        case 'topDragOver':
                        case 'topDragStart':
                        case 'topDrop':
                            EventConstructor = SyntheticDragEvent_1;
                            break;
                        case 'topTouchCancel':
                        case 'topTouchEnd':
                        case 'topTouchMove':
                        case 'topTouchStart':
                            EventConstructor = SyntheticTouchEvent_1;
                            break;
                        case 'topAnimationEnd':
                        case 'topAnimationIteration':
                        case 'topAnimationStart':
                            EventConstructor = SyntheticAnimationEvent_1;
                            break;
                        case 'topTransitionEnd':
                            EventConstructor = SyntheticTransitionEvent_1;
                            break;
                        case 'topScroll':
                            EventConstructor = SyntheticUIEvent_1;
                            break;
                        case 'topWheel':
                            EventConstructor = SyntheticWheelEvent_1;
                            break;
                        case 'topCopy':
                        case 'topCut':
                        case 'topPaste':
                            EventConstructor = SyntheticClipboardEvent_1;
                            break;
                        }
                        !EventConstructor ? invariant(false, 'SimpleEventPlugin: Unhandled event type, `%s`.', topLevelType) : void 0;
                        var event = EventConstructor.getPooled(dispatchConfig, targetInst, nativeEvent, nativeEventTarget);
                        EventPropagators_1.accumulateTwoPhaseDispatches(event);
                        return event;
                    }
                };
                var SimpleEventPlugin_1 = SimpleEventPlugin;
                ReactDOMEventListener_1.setHandleTopLevel(ReactBrowserEventEmitter_1.handleTopLevel);
                EventPluginHub_1.injection.injectEventPluginOrder(DOMEventPluginOrder_1);
                EventPluginUtils_1.injection.injectComponentTree(ReactDOMComponentTree_1);
                EventPluginHub_1.injection.injectEventPluginsByName({
                    SimpleEventPlugin: SimpleEventPlugin_1,
                    EnterLeaveEventPlugin: EnterLeaveEventPlugin_1,
                    ChangeEventPlugin: ChangeEventPlugin_1,
                    SelectEventPlugin: SelectEventPlugin_1,
                    BeforeInputEventPlugin: BeforeInputEventPlugin_1
                });
                var MUST_USE_PROPERTY = DOMProperty_1.injection.MUST_USE_PROPERTY;
                var HAS_BOOLEAN_VALUE = DOMProperty_1.injection.HAS_BOOLEAN_VALUE;
                var HAS_NUMERIC_VALUE = DOMProperty_1.injection.HAS_NUMERIC_VALUE;
                var HAS_POSITIVE_NUMERIC_VALUE = DOMProperty_1.injection.HAS_POSITIVE_NUMERIC_VALUE;
                var HAS_OVERLOADED_BOOLEAN_VALUE = DOMProperty_1.injection.HAS_OVERLOADED_BOOLEAN_VALUE;
                var HAS_STRING_BOOLEAN_VALUE = DOMProperty_1.injection.HAS_STRING_BOOLEAN_VALUE;
                var HTMLDOMPropertyConfig = {
                    Properties: {
                        allowFullScreen: HAS_BOOLEAN_VALUE,
                        allowTransparency: HAS_STRING_BOOLEAN_VALUE,
                        async: HAS_BOOLEAN_VALUE,
                        autoPlay: HAS_BOOLEAN_VALUE,
                        capture: HAS_BOOLEAN_VALUE,
                        checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
                        cols: HAS_POSITIVE_NUMERIC_VALUE,
                        contentEditable: HAS_STRING_BOOLEAN_VALUE,
                        controls: HAS_BOOLEAN_VALUE,
                        'default': HAS_BOOLEAN_VALUE,
                        defer: HAS_BOOLEAN_VALUE,
                        disabled: HAS_BOOLEAN_VALUE,
                        download: HAS_OVERLOADED_BOOLEAN_VALUE,
                        draggable: HAS_STRING_BOOLEAN_VALUE,
                        formNoValidate: HAS_BOOLEAN_VALUE,
                        hidden: HAS_BOOLEAN_VALUE,
                        loop: HAS_BOOLEAN_VALUE,
                        multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
                        muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
                        noValidate: HAS_BOOLEAN_VALUE,
                        open: HAS_BOOLEAN_VALUE,
                        playsInline: HAS_BOOLEAN_VALUE,
                        readOnly: HAS_BOOLEAN_VALUE,
                        required: HAS_BOOLEAN_VALUE,
                        reversed: HAS_BOOLEAN_VALUE,
                        rows: HAS_POSITIVE_NUMERIC_VALUE,
                        rowSpan: HAS_NUMERIC_VALUE,
                        scoped: HAS_BOOLEAN_VALUE,
                        seamless: HAS_BOOLEAN_VALUE,
                        selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
                        size: HAS_POSITIVE_NUMERIC_VALUE,
                        start: HAS_NUMERIC_VALUE,
                        span: HAS_POSITIVE_NUMERIC_VALUE,
                        spellCheck: HAS_STRING_BOOLEAN_VALUE,
                        style: 0,
                        itemScope: HAS_BOOLEAN_VALUE,
                        acceptCharset: 0,
                        className: 0,
                        htmlFor: 0,
                        httpEquiv: 0,
                        value: HAS_STRING_BOOLEAN_VALUE
                    },
                    DOMAttributeNames: {
                        acceptCharset: 'accept-charset',
                        className: 'class',
                        htmlFor: 'for',
                        httpEquiv: 'http-equiv'
                    },
                    DOMMutationMethods: {
                        value: function (node, value) {
                            if (value == null) {
                                return node.removeAttribute('value');
                            }
                            if (node.type !== 'number' || node.hasAttribute('value') === false) {
                                node.setAttribute('value', '' + value);
                            } else if (node.validity && !node.validity.badInput && node.ownerDocument.activeElement !== node) {
                                node.setAttribute('value', '' + value);
                            }
                        }
                    }
                };
                var HTMLDOMPropertyConfig_1 = HTMLDOMPropertyConfig;
                var HAS_STRING_BOOLEAN_VALUE$1 = DOMProperty_1.injection.HAS_STRING_BOOLEAN_VALUE;
                var NS = {
                    xlink: 'http://www.w3.org/1999/xlink',
                    xml: 'http://www.w3.org/XML/1998/namespace'
                };
                var ATTRS = [
                    'accent-height',
                    'alignment-baseline',
                    'arabic-form',
                    'baseline-shift',
                    'cap-height',
                    'clip-path',
                    'clip-rule',
                    'color-interpolation',
                    'color-interpolation-filters',
                    'color-profile',
                    'color-rendering',
                    'dominant-baseline',
                    'enable-background',
                    'fill-opacity',
                    'fill-rule',
                    'flood-color',
                    'flood-opacity',
                    'font-family',
                    'font-size',
                    'font-size-adjust',
                    'font-stretch',
                    'font-style',
                    'font-variant',
                    'font-weight',
                    'glyph-name',
                    'glyph-orientation-horizontal',
                    'glyph-orientation-vertical',
                    'horiz-adv-x',
                    'horiz-origin-x',
                    'image-rendering',
                    'letter-spacing',
                    'lighting-color',
                    'marker-end',
                    'marker-mid',
                    'marker-start',
                    'overline-position',
                    'overline-thickness',
                    'paint-order',
                    'panose-1',
                    'pointer-events',
                    'rendering-intent',
                    'shape-rendering',
                    'stop-color',
                    'stop-opacity',
                    'strikethrough-position',
                    'strikethrough-thickness',
                    'stroke-dasharray',
                    'stroke-dashoffset',
                    'stroke-linecap',
                    'stroke-linejoin',
                    'stroke-miterlimit',
                    'stroke-opacity',
                    'stroke-width',
                    'text-anchor',
                    'text-decoration',
                    'text-rendering',
                    'underline-position',
                    'underline-thickness',
                    'unicode-bidi',
                    'unicode-range',
                    'units-per-em',
                    'v-alphabetic',
                    'v-hanging',
                    'v-ideographic',
                    'v-mathematical',
                    'vector-effect',
                    'vert-adv-y',
                    'vert-origin-x',
                    'vert-origin-y',
                    'word-spacing',
                    'writing-mode',
                    'x-height',
                    'xlink:actuate',
                    'xlink:arcrole',
                    'xlink:href',
                    'xlink:role',
                    'xlink:show',
                    'xlink:title',
                    'xlink:type',
                    'xml:base',
                    'xmlns:xlink',
                    'xml:lang',
                    'xml:space'
                ];
                var SVGDOMPropertyConfig = {
                    Properties: {
                        autoReverse: HAS_STRING_BOOLEAN_VALUE$1,
                        externalResourcesRequired: HAS_STRING_BOOLEAN_VALUE$1,
                        preserveAlpha: HAS_STRING_BOOLEAN_VALUE$1
                    },
                    DOMAttributeNames: {
                        autoReverse: 'autoReverse',
                        externalResourcesRequired: 'externalResourcesRequired',
                        preserveAlpha: 'preserveAlpha'
                    },
                    DOMAttributeNamespaces: {
                        xlinkActuate: NS.xlink,
                        xlinkArcrole: NS.xlink,
                        xlinkHref: NS.xlink,
                        xlinkRole: NS.xlink,
                        xlinkShow: NS.xlink,
                        xlinkTitle: NS.xlink,
                        xlinkType: NS.xlink,
                        xmlBase: NS.xml,
                        xmlLang: NS.xml,
                        xmlSpace: NS.xml
                    }
                };
                var CAMELIZE = /[\-\:]([a-z])/g;
                var capitalize = function (token) {
                    return token[1].toUpperCase();
                };
                ATTRS.forEach(function (original) {
                    var reactName = original.replace(CAMELIZE, capitalize);
                    SVGDOMPropertyConfig.Properties[reactName] = 0;
                    SVGDOMPropertyConfig.DOMAttributeNames[reactName] = original;
                });
                var SVGDOMPropertyConfig_1 = SVGDOMPropertyConfig;
                DOMProperty_1.injection.injectDOMPropertyConfig(HTMLDOMPropertyConfig_1);
                DOMProperty_1.injection.injectDOMPropertyConfig(SVGDOMPropertyConfig_1);
                var injectInternals = ReactFiberDevToolsHook.injectInternals;
                var ELEMENT_NODE = HTMLNodeType_1.ELEMENT_NODE;
                var TEXT_NODE = HTMLNodeType_1.TEXT_NODE;
                var COMMENT_NODE = HTMLNodeType_1.COMMENT_NODE;
                var DOCUMENT_NODE = HTMLNodeType_1.DOCUMENT_NODE;
                var DOCUMENT_FRAGMENT_NODE = HTMLNodeType_1.DOCUMENT_FRAGMENT_NODE;
                var ROOT_ATTRIBUTE_NAME = DOMProperty_1.ROOT_ATTRIBUTE_NAME;
                var getChildNamespace = DOMNamespaces.getChildNamespace;
                var createElement = ReactDOMFiberComponent_1.createElement;
                var createTextNode = ReactDOMFiberComponent_1.createTextNode;
                var setInitialProperties = ReactDOMFiberComponent_1.setInitialProperties;
                var diffProperties = ReactDOMFiberComponent_1.diffProperties;
                var updateProperties = ReactDOMFiberComponent_1.updateProperties;
                var diffHydratedProperties = ReactDOMFiberComponent_1.diffHydratedProperties;
                var diffHydratedText = ReactDOMFiberComponent_1.diffHydratedText;
                var warnForDeletedHydratableElement = ReactDOMFiberComponent_1.warnForDeletedHydratableElement;
                var warnForDeletedHydratableText = ReactDOMFiberComponent_1.warnForDeletedHydratableText;
                var warnForInsertedHydratedElement = ReactDOMFiberComponent_1.warnForInsertedHydratedElement;
                var warnForInsertedHydratedText = ReactDOMFiberComponent_1.warnForInsertedHydratedText;
                var precacheFiberNode = ReactDOMComponentTree_1.precacheFiberNode;
                var updateFiberProps = ReactDOMComponentTree_1.updateFiberProps;
                {
                    var lowPriorityWarning = lowPriorityWarning_1;
                    var warning = require$$0;
                    var validateDOMNesting = validateDOMNesting_1;
                    var updatedAncestorInfo = validateDOMNesting.updatedAncestorInfo;
                    if (typeof Map !== 'function' || Map.prototype == null || typeof Map.prototype.forEach !== 'function' || typeof Set !== 'function' || Set.prototype == null || typeof Set.prototype.clear !== 'function' || typeof Set.prototype.forEach !== 'function') {
                        warning(false, 'React depends on Map and Set built-in types. Make sure that you load a ' + 'polyfill in older browsers. http://fb.me/react-polyfills');
                    }
                }
                ReactControlledComponent_1.injection.injectFiberControlledHostComponent(ReactDOMFiberComponent_1);
                findDOMNode_1._injectFiber(function (fiber) {
                    return DOMRenderer.findHostInstance(fiber);
                });
                var eventsEnabled = null;
                var selectionInformation = null;
                function isValidContainer(node) {
                    return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === ' react-mount-point-unstable '));
                }
                function getReactRootElementInContainer(container) {
                    if (!container) {
                        return null;
                    }
                    if (container.nodeType === DOCUMENT_NODE) {
                        return container.documentElement;
                    } else {
                        return container.firstChild;
                    }
                }
                function shouldHydrateDueToLegacyHeuristic(container) {
                    var rootElement = getReactRootElementInContainer(container);
                    return !!(rootElement && rootElement.nodeType === ELEMENT_NODE && rootElement.hasAttribute(ROOT_ATTRIBUTE_NAME));
                }
                function shouldAutoFocusHostComponent(type, props) {
                    switch (type) {
                    case 'button':
                    case 'input':
                    case 'select':
                    case 'textarea':
                        return !!props.autoFocus;
                    }
                    return false;
                }
                var DOMRenderer = ReactFiberReconciler({
                    getRootHostContext: function (rootContainerInstance) {
                        var type = void 0;
                        var namespace = void 0;
                        if (rootContainerInstance.nodeType === DOCUMENT_NODE) {
                            type = '#document';
                            var root = rootContainerInstance.documentElement;
                            namespace = root ? root.namespaceURI : getChildNamespace(null, '');
                        } else {
                            var container = rootContainerInstance.nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
                            var ownNamespace = container.namespaceURI || null;
                            type = container.tagName;
                            namespace = getChildNamespace(ownNamespace, type);
                        }
                        {
                            var validatedTag = type.toLowerCase();
                            var _ancestorInfo = updatedAncestorInfo(null, validatedTag, null);
                            return {
                                namespace: namespace,
                                ancestorInfo: _ancestorInfo
                            };
                        }
                        return namespace;
                    },
                    getChildHostContext: function (parentHostContext, type) {
                        {
                            var parentHostContextDev = parentHostContext;
                            var _namespace = getChildNamespace(parentHostContextDev.namespace, type);
                            var _ancestorInfo2 = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type, null);
                            return {
                                namespace: _namespace,
                                ancestorInfo: _ancestorInfo2
                            };
                        }
                        var parentNamespace = parentHostContext;
                        return getChildNamespace(parentNamespace, type);
                    },
                    getPublicInstance: function (instance) {
                        return instance;
                    },
                    prepareForCommit: function () {
                        eventsEnabled = ReactBrowserEventEmitter_1.isEnabled();
                        selectionInformation = ReactInputSelection_1.getSelectionInformation();
                        ReactBrowserEventEmitter_1.setEnabled(false);
                    },
                    resetAfterCommit: function () {
                        ReactInputSelection_1.restoreSelection(selectionInformation);
                        selectionInformation = null;
                        ReactBrowserEventEmitter_1.setEnabled(eventsEnabled);
                        eventsEnabled = null;
                    },
                    createInstance: function (type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
                        var parentNamespace = void 0;
                        {
                            var hostContextDev = hostContext;
                            validateDOMNesting(type, null, null, hostContextDev.ancestorInfo);
                            if (typeof props.children === 'string' || typeof props.children === 'number') {
                                var string = '' + props.children;
                                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type, null);
                                validateDOMNesting(null, string, null, ownAncestorInfo);
                            }
                            parentNamespace = hostContextDev.namespace;
                        }
                        var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
                        precacheFiberNode(internalInstanceHandle, domElement);
                        updateFiberProps(domElement, props);
                        return domElement;
                    },
                    appendInitialChild: function (parentInstance, child) {
                        parentInstance.appendChild(child);
                    },
                    finalizeInitialChildren: function (domElement, type, props, rootContainerInstance) {
                        setInitialProperties(domElement, type, props, rootContainerInstance);
                        return shouldAutoFocusHostComponent(type, props);
                    },
                    prepareUpdate: function (domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
                        {
                            var hostContextDev = hostContext;
                            if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === 'string' || typeof newProps.children === 'number')) {
                                var string = '' + newProps.children;
                                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type, null);
                                validateDOMNesting(null, string, null, ownAncestorInfo);
                            }
                        }
                        return diffProperties(domElement, type, oldProps, newProps, rootContainerInstance);
                    },
                    commitMount: function (domElement, type, newProps, internalInstanceHandle) {
                        domElement.focus();
                    },
                    commitUpdate: function (domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
                        updateFiberProps(domElement, newProps);
                        updateProperties(domElement, updatePayload, type, oldProps, newProps);
                    },
                    shouldSetTextContent: function (type, props) {
                        return type === 'textarea' || typeof props.children === 'string' || typeof props.children === 'number' || typeof props.dangerouslySetInnerHTML === 'object' && props.dangerouslySetInnerHTML !== null && typeof props.dangerouslySetInnerHTML.__html === 'string';
                    },
                    resetTextContent: function (domElement) {
                        domElement.textContent = '';
                    },
                    shouldDeprioritizeSubtree: function (type, props) {
                        return !!props.hidden;
                    },
                    createTextInstance: function (text, rootContainerInstance, hostContext, internalInstanceHandle) {
                        {
                            var hostContextDev = hostContext;
                            validateDOMNesting(null, text, null, hostContextDev.ancestorInfo);
                        }
                        var textNode = createTextNode(text, rootContainerInstance);
                        precacheFiberNode(internalInstanceHandle, textNode);
                        return textNode;
                    },
                    commitTextUpdate: function (textInstance, oldText, newText) {
                        textInstance.nodeValue = newText;
                    },
                    appendChild: function (parentInstance, child) {
                        parentInstance.appendChild(child);
                    },
                    appendChildToContainer: function (container, child) {
                        if (container.nodeType === COMMENT_NODE) {
                            container.parentNode.insertBefore(child, container);
                        } else {
                            container.appendChild(child);
                        }
                    },
                    insertBefore: function (parentInstance, child, beforeChild) {
                        parentInstance.insertBefore(child, beforeChild);
                    },
                    insertInContainerBefore: function (container, child, beforeChild) {
                        if (container.nodeType === COMMENT_NODE) {
                            container.parentNode.insertBefore(child, beforeChild);
                        } else {
                            container.insertBefore(child, beforeChild);
                        }
                    },
                    removeChild: function (parentInstance, child) {
                        parentInstance.removeChild(child);
                    },
                    removeChildFromContainer: function (container, child) {
                        if (container.nodeType === COMMENT_NODE) {
                            container.parentNode.removeChild(child);
                        } else {
                            container.removeChild(child);
                        }
                    },
                    canHydrateInstance: function (instance, type, props) {
                        return instance.nodeType === ELEMENT_NODE && type === instance.nodeName.toLowerCase();
                    },
                    canHydrateTextInstance: function (instance, text) {
                        if (text === '') {
                            return false;
                        }
                        return instance.nodeType === TEXT_NODE;
                    },
                    getNextHydratableSibling: function (instance) {
                        var node = instance.nextSibling;
                        while (node && node.nodeType !== ELEMENT_NODE && node.nodeType !== TEXT_NODE) {
                            node = node.nextSibling;
                        }
                        return node;
                    },
                    getFirstHydratableChild: function (parentInstance) {
                        var next = parentInstance.firstChild;
                        while (next && next.nodeType !== ELEMENT_NODE && next.nodeType !== TEXT_NODE) {
                            next = next.nextSibling;
                        }
                        return next;
                    },
                    hydrateInstance: function (instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
                        precacheFiberNode(internalInstanceHandle, instance);
                        updateFiberProps(instance, props);
                        var parentNamespace = void 0;
                        {
                            var hostContextDev = hostContext;
                            parentNamespace = hostContextDev.namespace;
                        }
                        return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance);
                    },
                    hydrateTextInstance: function (textInstance, text, internalInstanceHandle) {
                        precacheFiberNode(internalInstanceHandle, textInstance);
                        return diffHydratedText(textInstance, text);
                    },
                    didNotHydrateInstance: function (parentInstance, instance) {
                        if (instance.nodeType === 1) {
                            warnForDeletedHydratableElement(parentInstance, instance);
                        } else {
                            warnForDeletedHydratableText(parentInstance, instance);
                        }
                    },
                    didNotFindHydratableInstance: function (parentInstance, type, props) {
                        warnForInsertedHydratedElement(parentInstance, type, props);
                    },
                    didNotFindHydratableTextInstance: function (parentInstance, text) {
                        warnForInsertedHydratedText(parentInstance, text);
                    },
                    scheduleDeferredCallback: ReactDOMFrameScheduling.rIC,
                    useSyncScheduling: !ReactDOMFeatureFlags_1.fiberAsyncScheduling
                });
                ReactGenericBatching_1.injection.injectFiberBatchedUpdates(DOMRenderer.batchedUpdates);
                var warnedAboutHydrateAPI = false;
                function renderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
                    !isValidContainer(container) ? invariant(false, 'Target container is not a DOM element.') : void 0;
                    {
                        if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
                            var hostInstance = DOMRenderer.findHostInstanceWithNoPortals(container._reactRootContainer.current);
                            if (hostInstance) {
                                warning(hostInstance.parentNode === container, 'render(...): It looks like the React-rendered content of this ' + 'container was removed without using React. This is not ' + 'supported and will cause errors. Instead, call ' + 'ReactDOM.unmountComponentAtNode to empty a container.');
                            }
                        }
                        var isRootRenderedBySomeReact = !!container._reactRootContainer;
                        var rootEl = getReactRootElementInContainer(container);
                        var hasNonRootReactChild = !!(rootEl && ReactDOMComponentTree_1.getInstanceFromNode(rootEl));
                        warning(!hasNonRootReactChild || isRootRenderedBySomeReact, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.');
                        warning(container.nodeType !== ELEMENT_NODE || !container.tagName || container.tagName.toUpperCase() !== 'BODY', 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.');
                    }
                    var root = container._reactRootContainer;
                    if (!root) {
                        var shouldHydrate = forceHydrate || shouldHydrateDueToLegacyHeuristic(container);
                        if (!shouldHydrate) {
                            var warned = false;
                            var rootSibling = void 0;
                            while (rootSibling = container.lastChild) {
                                {
                                    if (!warned && rootSibling.nodeType === ELEMENT_NODE && rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME)) {
                                        warned = true;
                                        warning(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.');
                                    }
                                }
                                container.removeChild(rootSibling);
                            }
                        }
                        {
                            if (shouldHydrate && !forceHydrate && !warnedAboutHydrateAPI) {
                                warnedAboutHydrateAPI = true;
                                lowPriorityWarning(false, 'render(): Calling ReactDOM.render() to hydrate server-rendered markup ' + 'will stop working in React v17. Replace the ReactDOM.render() call ' + 'with ReactDOM.hydrate() if you want React to attach to the server HTML.');
                            }
                        }
                        var newRoot = DOMRenderer.createContainer(container);
                        root = container._reactRootContainer = newRoot;
                        DOMRenderer.unbatchedUpdates(function () {
                            DOMRenderer.updateContainer(children, newRoot, parentComponent, callback);
                        });
                    } else {
                        DOMRenderer.updateContainer(children, root, parentComponent, callback);
                    }
                    return DOMRenderer.getPublicRootInstance(root);
                }
                function createPortal(children, container) {
                    var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
                    !isValidContainer(container) ? invariant(false, 'Target container is not a DOM element.') : void 0;
                    return ReactPortal.createPortal(children, container, null, key);
                }
                var ReactDOMFiber = {
                    createPortal: createPortal,
                    hydrate: function (element, container, callback) {
                        return renderSubtreeIntoContainer(null, element, container, true, callback);
                    },
                    render: function (element, container, callback) {
                        return renderSubtreeIntoContainer(null, element, container, false, callback);
                    },
                    unstable_renderSubtreeIntoContainer: function (parentComponent, element, containerNode, callback) {
                        !(parentComponent != null && ReactInstanceMap_1.has(parentComponent)) ? invariant(false, 'parentComponent must be a valid React Component') : void 0;
                        return renderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
                    },
                    unmountComponentAtNode: function (container) {
                        !isValidContainer(container) ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : void 0;
                        if (container._reactRootContainer) {
                            {
                                var rootEl = getReactRootElementInContainer(container);
                                var renderedByDifferentReact = rootEl && !ReactDOMComponentTree_1.getInstanceFromNode(rootEl);
                                warning(!renderedByDifferentReact, 'unmountComponentAtNode(): The node you\'re attempting to unmount ' + 'was rendered by another copy of React.');
                            }
                            DOMRenderer.unbatchedUpdates(function () {
                                renderSubtreeIntoContainer(null, null, container, false, function () {
                                    container._reactRootContainer = null;
                                });
                            });
                            return true;
                        } else {
                            {
                                var _rootEl = getReactRootElementInContainer(container);
                                var hasNonRootReactChild = !!(_rootEl && ReactDOMComponentTree_1.getInstanceFromNode(_rootEl));
                                var isContainerReactRoot = container.nodeType === 1 && isValidContainer(container.parentNode) && !!container.parentNode._reactRootContainer;
                                warning(!hasNonRootReactChild, 'unmountComponentAtNode(): The node you\'re attempting to unmount ' + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.');
                            }
                            return false;
                        }
                    },
                    findDOMNode: findDOMNode_1,
                    unstable_createPortal: createPortal,
                    unstable_batchedUpdates: ReactGenericBatching_1.batchedUpdates,
                    unstable_deferredUpdates: DOMRenderer.deferredUpdates,
                    flushSync: DOMRenderer.flushSync,
                    __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
                        EventPluginHub: EventPluginHub_1,
                        EventPluginRegistry: EventPluginRegistry_1,
                        EventPropagators: EventPropagators_1,
                        ReactControlledComponent: ReactControlledComponent_1,
                        ReactDOMComponentTree: ReactDOMComponentTree_1,
                        ReactDOMEventListener: ReactDOMEventListener_1
                    }
                };
                var foundDevTools = injectInternals({
                    findFiberByHostInstance: ReactDOMComponentTree_1.getClosestInstanceFromNode,
                    findHostInstanceByFiber: DOMRenderer.findHostInstance,
                    bundleType: 1,
                    version: ReactVersion,
                    rendererPackageName: 'react-dom'
                });
                {
                    if (!foundDevTools && ExecutionEnvironment.canUseDOM && window.top === window.self) {
                        if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
                            var protocol = window.location.protocol;
                            if (/^(https?|file):$/.test(protocol)) {
                                console.info('%cDownload the React DevTools ' + 'for a better development experience: ' + 'https://fb.me/react-devtools' + (protocol === 'file:' ? '\nYou might need to use a local HTTP server (instead of file://): ' + 'https://fb.me/react-devtools-faq' : ''), 'font-weight:bold');
                            }
                        }
                    }
                }
                var ReactDOMFiberEntry = ReactDOMFiber;
                module.exports = ReactDOMFiberEntry;
            }());
        }
    }(function () {
        return this;
    }(), require, exports, module));
});
/*react-dom@16.0.0#index*/
define('react-dom@16.0.0#index', [
    'require',
    'exports',
    'module',
    './cjs/react-dom.production.min.js',
    './cjs/react-dom.development.js'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        function checkDCE() {
            if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function') {
                return;
            }
            if (process.env.NODE_ENV !== 'production') {
                throw new Error('^_^');
            }
            try {
                __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
            } catch (err) {
                console.error(err);
            }
        }
        if (process.env.NODE_ENV === 'production') {
            checkDCE();
            module.exports = require('./cjs/react-dom.production.min.js');
        } else {
            module.exports = require('./cjs/react-dom.development.js');
        }
    }(function () {
        return this;
    }(), require, exports, module));
});
/*isobject@3.0.1#index*/
define('isobject@3.0.1#index', function (require, exports, module) {
    'use strict';
    module.exports = function isObject(val) {
        return val != null && typeof val === 'object' && Array.isArray(val) === false;
    };
});
/*is-plain-object@2.0.4#index*/
define('is-plain-object@2.0.4#index', [
    'require',
    'exports',
    'module',
    'isobject'
], function (require, exports, module) {
    'use strict';
    var isObject = require('isobject');
    function isObjectObject(o) {
        return isObject(o) === true && Object.prototype.toString.call(o) === '[object Object]';
    }
    module.exports = function isPlainObject(o) {
        var ctor, prot;
        if (isObjectObject(o) === false)
            return false;
        ctor = o.constructor;
        if (typeof ctor !== 'function')
            return false;
        prot = ctor.prototype;
        if (isObjectObject(prot) === false)
            return false;
        if (prot.hasOwnProperty('isPrototypeOf') === false) {
            return false;
        }
        return true;
    };
});
/*styled-components@2.2.3#lib/types*/
define('styled-components@2.2.3#lib/types', [
    'require',
    'exports',
    'module',
    'prop-types',
    'prop-types'
], function (require, exports, module) {
    'use strict';
    if (typeof exports !== 'undefined')
        Object.defineProperty(exports, 'babelPluginFlowReactPropTypes_proptype_StyleSheet', { value: require('prop-types').shape({ create: require('prop-types').func.isRequired }) });
});
/*styled-components@2.2.3#lib/utils/flatten*/
define('styled-components@2.2.3#lib/utils/flatten', [
    'require',
    'exports',
    'module',
    'fbjs/lib/hyphenateStyleName',
    'is-plain-object',
    '../types',
    'prop-types'
], function (require, exports, module) {
    'use strict';
    exports.__esModule = true;
    exports.objToCss = undefined;
    var _hyphenateStyleName = require('fbjs/lib/hyphenateStyleName');
    var _hyphenateStyleName2 = _interopRequireDefault(_hyphenateStyleName);
    var _isPlainObject = require('is-plain-object');
    var _isPlainObject2 = _interopRequireDefault(_isPlainObject);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var babelPluginFlowReactPropTypes_proptype_Interpolation = require('../types').babelPluginFlowReactPropTypes_proptype_Interpolation || require('prop-types').any;
    var objToCss = exports.objToCss = function objToCss(obj, prevKey) {
        var css = Object.keys(obj).filter(function (key) {
            var chunk = obj[key];
            return chunk !== undefined && chunk !== null && chunk !== false && chunk !== '';
        }).map(function (key) {
            if ((0, _isPlainObject2.default)(obj[key]))
                return objToCss(obj[key], key);
            return (0, _hyphenateStyleName2.default)(key) + ': ' + obj[key] + ';';
        }).join(' ');
        return prevKey ? prevKey + ' {\n  ' + css + '\n}' : css;
    };
    var flatten = function flatten(chunks, executionContext) {
        return chunks.reduce(function (ruleSet, chunk) {
            if (chunk === undefined || chunk === null || chunk === false || chunk === '')
                return ruleSet;
            if (Array.isArray(chunk))
                return [].concat(ruleSet, flatten(chunk, executionContext));
            if (chunk.hasOwnProperty('styledComponentId'))
                return [].concat(ruleSet, ['.' + chunk.styledComponentId]);
            if (typeof chunk === 'function') {
                return executionContext ? ruleSet.concat.apply(ruleSet, flatten([chunk(executionContext)], executionContext)) : ruleSet.concat(chunk);
            }
            return ruleSet.concat((0, _isPlainObject2.default)(chunk) ? objToCss(chunk) : chunk.toString());
        }, []);
    };
    exports.default = flatten;
});
/*stylis@3.4.0#stylis*/
define('stylis@3.4.0#stylis', function (require, exports, module) {
    (function (global, require, exports, module) {
        (function (factory) {
            typeof exports === 'object' && typeof module !== 'undefined' ? module['exports'] = factory(null) : typeof define === 'function' && define['amd'] ? define(factory(null)) : window['stylis'] = factory(null);
        }(function factory(options) {
            'use strict';
            var nullptn = /^\0+/g;
            var formatptn = /[\0\r\f]/g;
            var colonptn = /: */g;
            var cursorptn = /zoo|gra/;
            var transformptn = /([,: ])(transform)/g;
            var animationptn = /,+\s*(?![^(]*[)])/g;
            var propertiesptn = / +\s*(?![^(]*[)])/g;
            var elementptn = / *[\0] */g;
            var selectorptn = /,\r+?/g;
            var andptn = /([\t\r\n ])*\f?&/g;
            var escapeptn = /:global\(((?:[^\(\)\[\]]*|\[.*\]|\([^\(\)]*\))*)\)/g;
            var invalidptn = /\W+/g;
            var keyframeptn = /@(k\w+)\s*(\S*)\s*/;
            var plcholdrptn = /::(place)/g;
            var readonlyptn = /:(read-only)/g;
            var beforeptn = /\s+(?=[{\];=:>])/g;
            var afterptn = /([[}=:>])\s+/g;
            var tailptn = /(\{[^{]+?);(?=\})/g;
            var whiteptn = /\s{2,}/g;
            var pseudoptn = /([^\(])(:+) */g;
            var writingptn = /[svh]\w+-[tblr]{2}/;
            var gradientptn = /([\w-]+t\()/g;
            var supportsptn = /\(\s*([^]*?)\s*\)/g;
            var propertyptn = /([^]*?);/g;
            var selfptn = /-self|flex-/g;
            var pseudofmt = /[^]*?(:[rp][el]a[\w-]+)[^]*/;
            var webkit = '-webkit-';
            var moz = '-moz-';
            var ms = '-ms-';
            var SEMICOLON = 59;
            var CLOSEBRACES = 125;
            var OPENBRACES = 123;
            var OPENPARENTHESES = 40;
            var CLOSEPARENTHESES = 41;
            var OPENBRACKET = 91;
            var CLOSEBRACKET = 93;
            var NEWLINE = 10;
            var CARRIAGE = 13;
            var TAB = 9;
            var AT = 64;
            var SPACE = 32;
            var AND = 38;
            var DASH = 45;
            var UNDERSCORE = 95;
            var STAR = 42;
            var COMMA = 44;
            var COLON = 58;
            var SINGLEQUOTE = 39;
            var DOUBLEQUOTE = 34;
            var FOWARDSLASH = 47;
            var GREATERTHAN = 62;
            var PLUS = 43;
            var TILDE = 126;
            var NULL = 0;
            var FORMFEED = 12;
            var VERTICALTAB = 11;
            var KEYFRAME = 107;
            var MEDIA = 109;
            var SUPPORTS = 115;
            var PLACEHOLDER = 112;
            var READONLY = 111;
            var IMPORT = 169;
            var CHARSET = 163;
            var DOCUMENT = 100;
            var column = 1;
            var line = 1;
            var pattern = 0;
            var cascade = 1;
            var prefix = 1;
            var escape = 1;
            var compress = 0;
            var semicolon = 0;
            var preserve = 0;
            var array = [];
            var plugins = [];
            var plugged = 0;
            var should = null;
            var POSTS = -2;
            var PREPS = -1;
            var UNKWN = 0;
            var PROPS = 1;
            var BLCKS = 2;
            var ATRUL = 3;
            var unkwn = 0;
            var keyed = 1;
            var key = '';
            var nscopealt = '';
            var nscope = '';
            function compile(parent, current, body, id, depth) {
                var bracket = 0;
                var comment = 0;
                var parentheses = 0;
                var quote = 0;
                var first = 0;
                var second = 0;
                var code = 0;
                var tail = 0;
                var trail = 0;
                var peak = 0;
                var counter = 0;
                var context = 0;
                var atrule = 0;
                var pseudo = 0;
                var caret = 0;
                var format = 0;
                var insert = 0;
                var invert = 0;
                var length = 0;
                var eof = body.length;
                var eol = eof - 1;
                var char = '';
                var chars = '';
                var child = '';
                var out = '';
                var children = '';
                var flat = '';
                var selector;
                var result;
                while (caret < eof) {
                    code = body.charCodeAt(caret);
                    if (comment + quote + parentheses + bracket === 0) {
                        if (caret === eol) {
                            if (format > 0) {
                                chars = chars.replace(formatptn, '');
                            }
                            if (chars.trim().length > 0) {
                                switch (code) {
                                case SPACE:
                                case TAB:
                                case SEMICOLON:
                                case CARRIAGE:
                                case NEWLINE: {
                                        break;
                                    }
                                default: {
                                        chars += body.charAt(caret);
                                    }
                                }
                                code = SEMICOLON;
                            }
                        }
                        if (insert === 1) {
                            switch (code) {
                            case OPENBRACES:
                            case COMMA: {
                                    insert = 0;
                                    break;
                                }
                            case TAB:
                            case CARRIAGE:
                            case NEWLINE:
                            case SPACE: {
                                    break;
                                }
                            default: {
                                    caret--;
                                    code = SEMICOLON;
                                }
                            }
                        }
                        switch (code) {
                        case OPENBRACES: {
                                chars = chars.trim();
                                first = chars.charCodeAt(0);
                                counter = 1;
                                length = ++caret;
                                while (caret < eof) {
                                    code = body.charCodeAt(caret);
                                    switch (code) {
                                    case OPENBRACES: {
                                            counter++;
                                            break;
                                        }
                                    case CLOSEBRACES: {
                                            counter--;
                                            break;
                                        }
                                    }
                                    if (counter === 0) {
                                        break;
                                    }
                                    caret++;
                                }
                                child = body.substring(length, caret);
                                if (first === NULL) {
                                    first = (chars = chars.replace(nullptn, '').trim()).charCodeAt(0);
                                }
                                switch (first) {
                                case AT: {
                                        if (format > 0) {
                                            chars = chars.replace(formatptn, '');
                                        }
                                        second = chars.charCodeAt(1);
                                        switch (second) {
                                        case DOCUMENT:
                                        case MEDIA:
                                        case SUPPORTS: {
                                                selector = current;
                                                break;
                                            }
                                        default: {
                                                selector = array;
                                            }
                                        }
                                        child = compile(current, selector, child, second, depth + 1);
                                        length = child.length;
                                        if (preserve > 0 && length === 0) {
                                            length = chars.length;
                                        }
                                        if (plugged > 0) {
                                            selector = select(array, chars, invert);
                                            result = proxy(ATRUL, child, selector, current, line, column, length, second, depth);
                                            chars = selector.join('');
                                            if (result !== void 0) {
                                                if ((length = (child = result.trim()).length) === 0) {
                                                    second = 0;
                                                    child = '';
                                                }
                                            }
                                        }
                                        if (length > 0) {
                                            switch (second) {
                                            case SUPPORTS: {
                                                    chars = chars.replace(supportsptn, supports);
                                                }
                                            case DOCUMENT:
                                            case MEDIA: {
                                                    child = chars + '{' + child + '}';
                                                    break;
                                                }
                                            case KEYFRAME: {
                                                    chars = chars.replace(keyframeptn, '$1 $2' + (keyed > 0 ? key : ''));
                                                    child = chars + '{' + child + '}';
                                                    if (prefix === 1 || prefix === 2 && vendor('@' + child, 3)) {
                                                        child = '@' + webkit + child + '@' + child;
                                                    } else {
                                                        child = '@' + child;
                                                    }
                                                    break;
                                                }
                                            default: {
                                                    child = chars + child;
                                                }
                                            }
                                        } else {
                                            child = '';
                                        }
                                        break;
                                    }
                                default: {
                                        child = compile(current, select(current, chars, invert), child, id, depth + 1);
                                    }
                                }
                                children += child;
                                context = 0;
                                insert = 0;
                                pseudo = 0;
                                format = 0;
                                invert = 0;
                                atrule = 0;
                                chars = '';
                                child = '';
                                code = body.charCodeAt(++caret);
                                break;
                            }
                        case CLOSEBRACES:
                        case SEMICOLON: {
                                chars = (format > 0 ? chars.replace(formatptn, '') : chars).trim();
                                if ((length = chars.length) > 1) {
                                    if (pseudo === 0) {
                                        first = chars.charCodeAt(0);
                                        if (first === DASH || first > 96 && first < 123) {
                                            length = (chars = chars.replace(' ', ':')).length;
                                        }
                                    }
                                    if (plugged > 0) {
                                        if ((result = proxy(PROPS, chars, current, parent, line, column, out.length, id, depth)) !== void 0) {
                                            if ((length = (chars = result.trim()).length) === 0) {
                                                chars = '\0\0';
                                            }
                                        }
                                    }
                                    first = chars.charCodeAt(0);
                                    second = chars.charCodeAt(1);
                                    switch (first + second) {
                                    case NULL: {
                                            break;
                                        }
                                    case IMPORT:
                                    case CHARSET: {
                                            flat += chars + body.charAt(caret);
                                            break;
                                        }
                                    default: {
                                            if (chars.charCodeAt(length - 1) === COLON)
                                                break;
                                            out += property(chars, first, second, chars.charCodeAt(2));
                                        }
                                    }
                                }
                                context = 0;
                                insert = 0;
                                pseudo = 0;
                                format = 0;
                                invert = 0;
                                chars = '';
                                code = body.charCodeAt(++caret);
                                break;
                            }
                        }
                    }
                    switch (code) {
                    case CARRIAGE:
                    case NEWLINE: {
                            if (comment + quote + parentheses + bracket + semicolon === 0) {
                                switch (peak) {
                                case CLOSEPARENTHESES:
                                case SINGLEQUOTE:
                                case DOUBLEQUOTE:
                                case AT:
                                case TILDE:
                                case GREATERTHAN:
                                case STAR:
                                case PLUS:
                                case FOWARDSLASH:
                                case DASH:
                                case COLON:
                                case COMMA:
                                case SEMICOLON:
                                case OPENBRACES:
                                case CLOSEBRACES: {
                                        break;
                                    }
                                default: {
                                        if (pseudo > 0) {
                                            insert = 1;
                                        }
                                    }
                                }
                            }
                            if (comment === FOWARDSLASH) {
                                comment = 0;
                            }
                            if (plugged * unkwn > 0) {
                                proxy(UNKWN, chars, current, parent, line, column, out.length, id, depth);
                            }
                            column = 1;
                            line++;
                            break;
                        }
                    case SEMICOLON:
                    case CLOSEBRACES: {
                            if (comment + quote + parentheses + bracket === 0) {
                                column++;
                                break;
                            }
                        }
                    default: {
                            column++;
                            char = body.charAt(caret);
                            switch (code) {
                            case TAB:
                            case SPACE: {
                                    if (quote + bracket === 0) {
                                        switch (tail) {
                                        case COMMA:
                                        case COLON:
                                        case TAB:
                                        case SPACE: {
                                                char = '';
                                                break;
                                            }
                                        default: {
                                                if (code !== SPACE) {
                                                    char = ' ';
                                                }
                                            }
                                        }
                                    }
                                    break;
                                }
                            case NULL: {
                                    char = '\\0';
                                    break;
                                }
                            case FORMFEED: {
                                    char = '\\f';
                                    break;
                                }
                            case VERTICALTAB: {
                                    char = '\\v';
                                    break;
                                }
                            case AND: {
                                    if (quote + comment + bracket === 0 && cascade > 0) {
                                        invert = 1;
                                        format = 1;
                                        char = '\f' + char;
                                    }
                                    break;
                                }
                            case 108: {
                                    if (quote + comment + bracket + pattern === 0 && pseudo > 0) {
                                        switch (caret - pseudo) {
                                        case 2: {
                                                if (tail === PLACEHOLDER && body.charCodeAt(caret - 3) === COLON) {
                                                    pattern = tail;
                                                }
                                            }
                                        case 8: {
                                                if (trail === READONLY) {
                                                    pattern = trail;
                                                }
                                            }
                                        }
                                    }
                                    break;
                                }
                            case COLON: {
                                    if (quote + comment + bracket === 0) {
                                        pseudo = caret;
                                    }
                                    break;
                                }
                            case COMMA: {
                                    if (comment + parentheses + quote + bracket === 0) {
                                        format = 1;
                                        char += '\r';
                                    }
                                    break;
                                }
                            case DOUBLEQUOTE: {
                                    if (comment === 0) {
                                        quote = quote === code ? 0 : quote === 0 ? code : quote;
                                        if (caret === eol) {
                                            eol++;
                                            eof++;
                                        }
                                    }
                                    break;
                                }
                            case SINGLEQUOTE: {
                                    if (comment === 0) {
                                        quote = quote === code ? 0 : quote === 0 ? code : quote;
                                        if (caret === eol) {
                                            eol++;
                                            eof++;
                                        }
                                    }
                                    break;
                                }
                            case OPENBRACKET: {
                                    if (quote + comment + parentheses === 0) {
                                        bracket++;
                                    }
                                    break;
                                }
                            case CLOSEBRACKET: {
                                    if (quote + comment + parentheses === 0) {
                                        bracket--;
                                    }
                                    break;
                                }
                            case CLOSEPARENTHESES: {
                                    if (quote + comment + bracket === 0) {
                                        if (caret === eol) {
                                            eol++;
                                            eof++;
                                        }
                                        parentheses--;
                                    }
                                    break;
                                }
                            case OPENPARENTHESES: {
                                    if (quote + comment + bracket === 0) {
                                        if (context === 0) {
                                            switch (tail * 2 + trail * 3) {
                                            case 533: {
                                                    break;
                                                }
                                            default: {
                                                    counter = 0;
                                                    context = 1;
                                                }
                                            }
                                        }
                                        parentheses++;
                                    }
                                    break;
                                }
                            case AT: {
                                    if (comment + parentheses + quote + bracket + pseudo + atrule === 0) {
                                        atrule = 1;
                                    }
                                    break;
                                }
                            case STAR:
                            case FOWARDSLASH: {
                                    if (quote + bracket + parentheses > 0) {
                                        break;
                                    }
                                    switch (comment) {
                                    case 0: {
                                            switch (code * 2 + body.charCodeAt(caret + 1) * 3) {
                                            case 235: {
                                                    comment = FOWARDSLASH;
                                                    break;
                                                }
                                            case 220: {
                                                    length = caret;
                                                    comment = STAR;
                                                    break;
                                                }
                                            }
                                            break;
                                        }
                                    case STAR: {
                                            if (code === FOWARDSLASH && tail === STAR) {
                                                if (body.charCodeAt(length + 2) === 33) {
                                                    out += body.substring(length, caret + 1);
                                                }
                                                char = '';
                                                comment = 0;
                                            }
                                        }
                                    }
                                }
                            }
                            if (comment === 0) {
                                if (cascade + quote + bracket + atrule === 0 && id !== KEYFRAME && code !== SEMICOLON) {
                                    switch (code) {
                                    case COMMA:
                                    case TILDE:
                                    case GREATERTHAN:
                                    case PLUS:
                                    case CLOSEPARENTHESES:
                                    case OPENPARENTHESES: {
                                            if (context === 0) {
                                                switch (tail) {
                                                case TAB:
                                                case SPACE:
                                                case NEWLINE:
                                                case CARRIAGE: {
                                                        char = char + '\0';
                                                        break;
                                                    }
                                                default: {
                                                        char = '\0' + char + (code === COMMA ? '' : '\0');
                                                    }
                                                }
                                                format = 1;
                                            } else {
                                                switch (code) {
                                                case OPENPARENTHESES: {
                                                        context = ++counter;
                                                        break;
                                                    }
                                                case CLOSEPARENTHESES: {
                                                        if ((context = --counter) === 0) {
                                                            format = 1;
                                                            char += '\0';
                                                        }
                                                        break;
                                                    }
                                                }
                                            }
                                            break;
                                        }
                                    case SPACE: {
                                            switch (tail) {
                                            case NULL:
                                            case OPENBRACES:
                                            case CLOSEBRACES:
                                            case SEMICOLON:
                                            case COMMA:
                                            case FORMFEED:
                                            case TAB:
                                            case SPACE:
                                            case NEWLINE:
                                            case CARRIAGE: {
                                                    break;
                                                }
                                            default: {
                                                    if (context === 0) {
                                                        format = 1;
                                                        char += '\0';
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                chars += char;
                                if (code !== SPACE) {
                                    peak = code;
                                }
                            }
                        }
                    }
                    trail = tail;
                    tail = code;
                    caret++;
                }
                length = out.length;
                if (preserve > 0) {
                    if (length === 0 && children.length === 0 && current[0].length === 0 === false) {
                        if (id !== MEDIA || current.length === 1 && (cascade > 0 ? nscopealt : nscope) === current[0]) {
                            length = current.join(',').length + 2;
                        }
                    }
                }
                if (length > 0) {
                    selector = cascade === 0 && id !== KEYFRAME ? isolate(current) : current;
                    if (plugged > 0) {
                        result = proxy(BLCKS, out, selector, parent, line, column, length, id, depth);
                        if (result !== void 0 && (out = result).length === 0) {
                            return flat + out + children;
                        }
                    }
                    out = selector.join(',') + '{' + out + '}';
                    if (prefix * pattern !== 0) {
                        if (prefix === 2 && !vendor(out, 2))
                            pattern = 0;
                        switch (pattern) {
                        case READONLY: {
                                out = out.replace(readonlyptn, ':' + moz + '$1') + out;
                                break;
                            }
                        case PLACEHOLDER: {
                                out = out.replace(plcholdrptn, '::' + webkit + 'input-$1') + out.replace(plcholdrptn, '::' + moz + '$1') + out.replace(plcholdrptn, ':' + ms + 'input-$1') + out;
                                break;
                            }
                        }
                        pattern = 0;
                    }
                }
                return flat + out + children;
            }
            function select(parent, current, invert) {
                var selectors = current.trim().split(selectorptn);
                var out = selectors;
                var length = selectors.length;
                var l = parent.length;
                switch (l) {
                case 0:
                case 1: {
                        for (var i = 0, selector = l === 0 ? '' : parent[0] + ' '; i < length; ++i) {
                            out[i] = scope(selector, out[i], invert, l).trim();
                        }
                        break;
                    }
                default: {
                        for (var i = 0, j = 0, out = []; i < length; ++i) {
                            for (var k = 0; k < l; ++k) {
                                out[j++] = scope(parent[k] + ' ', selectors[i], invert, l).trim();
                            }
                        }
                    }
                }
                return out;
            }
            function scope(parent, current, invert, level) {
                var selector = current;
                var code = selector.charCodeAt(0);
                if (code < 33) {
                    code = (selector = selector.trim()).charCodeAt(0);
                }
                switch (code) {
                case AND: {
                        switch (cascade + level) {
                        case 0:
                        case 1: {
                                if (parent.trim().length === 0) {
                                    break;
                                }
                            }
                        default: {
                                return selector.replace(andptn, '$1' + parent.trim());
                            }
                        }
                        break;
                    }
                case COLON: {
                        switch (selector.charCodeAt(1)) {
                        case 103: {
                                if (escape > 0 && cascade > 0) {
                                    return selector.replace(escapeptn, '$1').replace(andptn, '$1' + nscope);
                                }
                                break;
                            }
                        default: {
                                return parent.trim() + selector;
                            }
                        }
                    }
                default: {
                        if (invert * cascade > 0 && selector.indexOf('\f') > 0) {
                            return selector.replace(andptn, (parent.charCodeAt(0) === COLON ? '' : '$1') + parent.trim());
                        }
                    }
                }
                return parent + selector;
            }
            function property(input, first, second, third) {
                var index = 0;
                var out = input + ';';
                var hash = first * 2 + second * 3 + third * 4;
                var cache;
                if (hash === 944) {
                    return animation(out);
                } else if (prefix === 0 || prefix === 2 && !vendor(out, 1)) {
                    return out;
                }
                switch (hash) {
                case 1015: {
                        return out.charCodeAt(9) === DASH ? webkit + out + out : out;
                    }
                case 951: {
                        return out.charCodeAt(3) === 116 ? webkit + out + out : out;
                    }
                case 963: {
                        return out.charCodeAt(5) === 110 ? webkit + out + out : out;
                    }
                case 969:
                case 942: {
                        return webkit + out + out;
                    }
                case 978: {
                        return webkit + out + moz + out + out;
                    }
                case 1019:
                case 983: {
                        return webkit + out + moz + out + ms + out + out;
                    }
                case 883: {
                        return out.charCodeAt(8) === DASH ? webkit + out + out : out;
                    }
                case 932: {
                        return webkit + out + ms + out + out;
                    }
                case 964: {
                        return webkit + out + ms + 'flex' + '-' + out + out;
                    }
                case 1023: {
                        if (out.charCodeAt(8) !== 99) {
                            break;
                        }
                        cache = out.substring(out.indexOf(':', 15)).replace('flex-', '').replace('space-between', 'justify');
                        return webkit + 'box-pack' + cache + webkit + out + ms + 'flex-pack' + cache + out;
                    }
                case 1005: {
                        return cursorptn.test(out) ? out.replace(colonptn, ':' + webkit) + out.replace(colonptn, ':' + moz) + out : out;
                    }
                case 1000: {
                        cache = out.substring(13).trim();
                        index = cache.indexOf('-') + 1;
                        switch (cache.charCodeAt(0) + cache.charCodeAt(index)) {
                        case 226: {
                                cache = out.replace(writingptn, 'tb');
                                break;
                            }
                        case 232: {
                                cache = out.replace(writingptn, 'tb-rl');
                                break;
                            }
                        case 220: {
                                cache = out.replace(writingptn, 'lr');
                                break;
                            }
                        default: {
                                return out;
                            }
                        }
                        return webkit + out + ms + cache + out;
                    }
                case 1017: {
                        if (out.indexOf('sticky', 9) === -1) {
                            return out;
                        }
                    }
                case 975: {
                        index = (out = input).length - 10;
                        cache = (out.charCodeAt(index) === 33 ? out.substring(0, index) : out).substring(input.indexOf(':', 7) + 1).trim();
                        switch (hash = cache.charCodeAt(0) + (cache.charCodeAt(7) | 0)) {
                        case 203: {
                                if (cache.charCodeAt(8) < 111) {
                                    break;
                                }
                            }
                        case 115: {
                                out = out.replace(cache, webkit + cache) + ';' + out;
                                break;
                            }
                        case 207:
                        case 102: {
                                out = out.replace(cache, webkit + (hash > 102 ? 'inline-' : '') + 'box') + ';' + out.replace(cache, webkit + cache) + ';' + out.replace(cache, ms + cache + 'box') + ';' + out;
                            }
                        }
                        return out + ';';
                    }
                case 938: {
                        if (out.charCodeAt(5) === DASH) {
                            switch (out.charCodeAt(6)) {
                            case 105: {
                                    cache = out.replace('-items', '');
                                    return webkit + out + webkit + 'box-' + cache + ms + 'flex-' + cache + out;
                                }
                            case 115: {
                                    return webkit + out + ms + 'flex-item-' + out.replace(selfptn, '') + out;
                                }
                            default: {
                                    return webkit + out + ms + 'flex-line-pack' + out.replace('align-content', '') + out;
                                }
                            }
                        }
                        break;
                    }
                case 953: {
                        if ((index = out.indexOf('-content', 9)) > 0) {
                            if (out.charCodeAt(index - 3) === 109 && out.charCodeAt(index - 4) !== 45) {
                                cache = out.substring(index - 3);
                                return 'width:' + webkit + cache + 'width:' + moz + cache + 'width:' + cache;
                            }
                        }
                        break;
                    }
                case 962: {
                        out = webkit + out + (out.charCodeAt(5) === 102 ? ms + out : '') + out;
                        if (second + third === 211 && out.charCodeAt(13) === 105 && out.indexOf('transform', 10) > 0) {
                            return out.substring(0, out.indexOf(';', 27) + 1).replace(transformptn, '$1' + webkit + '$2') + out;
                        }
                        break;
                    }
                }
                return out;
            }
            var i = 0;
            function vendor(content, context) {
                var index = content.indexOf(context === 1 ? ':' : '{');
                var key = content.substring(0, context !== 3 ? index : 10);
                var value = content.substring(index + 1, content.length - 1);
                return should(context !== 2 ? key : key.replace(pseudofmt, '$1'), value, context);
            }
            function supports(match, group) {
                var out = property(group, group.charCodeAt(0), group.charCodeAt(1), group.charCodeAt(2));
                return out !== group + ';' ? out.replace(propertyptn, ' or ($1)').substring(4) : '(' + group + ')';
            }
            function animation(input) {
                var length = input.length;
                var index = input.indexOf(':', 9) + 1;
                var declare = input.substring(0, index).trim();
                var out = input.substring(index, length - 1).trim();
                switch (input.charCodeAt(9) * keyed) {
                case 0: {
                        break;
                    }
                case DASH: {
                        if (input.charCodeAt(10) !== 110) {
                            break;
                        }
                    }
                default: {
                        var list = out.split((out = '', animationptn));
                        for (var i = 0, index = 0, length = list.length; i < length; index = 0, ++i) {
                            var value = list[i];
                            var items = value.split(propertiesptn);
                            while (value = items[index]) {
                                var peak = value.charCodeAt(0);
                                if (keyed === 1 && (peak > AT && peak < 90 || peak > 96 && peak < 123 || peak === UNDERSCORE || peak === DASH && value.charCodeAt(1) !== DASH)) {
                                    switch (isNaN(parseFloat(value)) + (value.indexOf('(') !== -1)) {
                                    case 1: {
                                            switch (value) {
                                            case 'infinite':
                                            case 'alternate':
                                            case 'backwards':
                                            case 'running':
                                            case 'normal':
                                            case 'forwards':
                                            case 'both':
                                            case 'none':
                                            case 'linear':
                                            case 'ease':
                                            case 'ease-in':
                                            case 'ease-out':
                                            case 'ease-in-out':
                                            case 'paused':
                                            case 'reverse':
                                            case 'alternate-reverse':
                                            case 'inherit':
                                            case 'initial':
                                            case 'unset':
                                            case 'step-start':
                                            case 'step-end': {
                                                    break;
                                                }
                                            default: {
                                                    value += key;
                                                }
                                            }
                                        }
                                    }
                                }
                                items[index++] = value;
                            }
                            out += (i === 0 ? '' : ',') + items.join(' ');
                        }
                    }
                }
                out = declare + out + ';';
                if (prefix === 1 || prefix === 2 && vendor(out, 1))
                    return webkit + out + out;
                return out;
            }
            function isolate(current) {
                for (var i = 0, length = current.length, selector = Array(length), padding, element; i < length; ++i) {
                    var elements = current[i].split(elementptn);
                    var out = '';
                    for (var j = 0, size = 0, tail = 0, code = 0, l = elements.length; j < l; ++j) {
                        if ((size = (element = elements[j]).length) === 0 && l > 1) {
                            continue;
                        }
                        tail = out.charCodeAt(out.length - 1);
                        code = element.charCodeAt(0);
                        padding = '';
                        if (j !== 0) {
                            switch (tail) {
                            case STAR:
                            case TILDE:
                            case GREATERTHAN:
                            case PLUS:
                            case SPACE:
                            case OPENPARENTHESES: {
                                    break;
                                }
                            default: {
                                    padding = ' ';
                                }
                            }
                        }
                        switch (code) {
                        case AND: {
                                element = padding + nscopealt;
                            }
                        case TILDE:
                        case GREATERTHAN:
                        case PLUS:
                        case SPACE:
                        case CLOSEPARENTHESES:
                        case OPENPARENTHESES: {
                                break;
                            }
                        case OPENBRACKET: {
                                element = padding + element + nscopealt;
                                break;
                            }
                        case COLON: {
                                switch (element.charCodeAt(1) * 2 + element.charCodeAt(2) * 3) {
                                case 530: {
                                        if (escape > 0) {
                                            element = padding + element.substring(8, size - 1);
                                            break;
                                        }
                                    }
                                default: {
                                        if (j < 1 || elements[j - 1].length < 1) {
                                            element = padding + nscopealt + element;
                                        }
                                    }
                                }
                                break;
                            }
                        case COMMA: {
                                padding = '';
                            }
                        default: {
                                if (size > 1 && element.indexOf(':') > 0) {
                                    element = padding + element.replace(pseudoptn, '$1' + nscopealt + '$2');
                                } else {
                                    element = padding + element + nscopealt;
                                }
                            }
                        }
                        out += element;
                    }
                    selector[i] = out.replace(formatptn, '').trim();
                }
                return selector;
            }
            function proxy(context, content, selectors, parents, line, column, length, id, depth) {
                for (var i = 0, out = content, next; i < plugged; ++i) {
                    switch (next = plugins[i].call(stylis, context, out, selectors, parents, line, column, length, id, depth)) {
                    case void 0:
                    case false:
                    case true:
                    case null: {
                            break;
                        }
                    default: {
                            out = next;
                        }
                    }
                }
                switch (out) {
                case void 0:
                case false:
                case true:
                case null:
                case content: {
                        break;
                    }
                default: {
                        return out;
                    }
                }
            }
            function minify(output) {
                return output.replace(formatptn, '').replace(beforeptn, '').replace(afterptn, '$1').replace(tailptn, '$1').replace(whiteptn, ' ');
            }
            function use(plugin) {
                switch (plugin) {
                case void 0:
                case null: {
                        plugged = plugins.length = 0;
                        break;
                    }
                default: {
                        switch (plugin.constructor) {
                        case Array: {
                                for (var i = 0, length = plugin.length; i < length; ++i) {
                                    use(plugin[i]);
                                }
                                break;
                            }
                        case Function: {
                                plugins[plugged++] = plugin;
                                break;
                            }
                        case Boolean: {
                                unkwn = !!plugin | 0;
                            }
                        }
                    }
                }
                return use;
            }
            function set(options) {
                for (var name in options) {
                    var value = options[name];
                    switch (name) {
                    case 'keyframe':
                        keyed = value | 0;
                        break;
                    case 'global':
                        escape = value | 0;
                        break;
                    case 'cascade':
                        cascade = value | 0;
                        break;
                    case 'compress':
                        compress = value | 0;
                        break;
                    case 'semicolon':
                        semicolon = value | 0;
                        break;
                    case 'preserve':
                        preserve = value | 0;
                        break;
                    case 'prefix':
                        should = null;
                        if (!value) {
                            prefix = 0;
                        } else if (typeof value !== 'function') {
                            prefix = 1;
                        } else {
                            prefix = 2;
                            should = value;
                        }
                    }
                }
                return set;
            }
            function stylis(selector, input) {
                if (this !== void 0 && this.constructor === stylis) {
                    return factory(selector);
                }
                var ns = selector;
                var code = ns.charCodeAt(0);
                if (code < 33) {
                    code = (ns = ns.trim()).charCodeAt(0);
                }
                if (keyed > 0) {
                    key = ns.replace(invalidptn, code === OPENBRACKET ? '' : '-');
                }
                code = 1;
                if (cascade === 1) {
                    nscope = ns;
                } else {
                    nscopealt = ns;
                }
                var selectors = [nscope];
                var result;
                if (plugged > 0) {
                    result = proxy(PREPS, input, selectors, selectors, line, column, 0, 0, 0);
                    if (result !== void 0 && typeof result === 'string') {
                        input = result;
                    }
                }
                var output = compile(array, selectors, input, 0, 0);
                if (plugged > 0) {
                    result = proxy(POSTS, output, selectors, selectors, line, column, output.length, 0, 0);
                    if (result !== void 0 && typeof (output = result) !== 'string') {
                        code = 0;
                    }
                }
                key = '';
                nscope = '';
                nscopealt = '';
                pattern = 0;
                line = 1;
                column = 1;
                return compress * code === 0 ? output : minify(output);
            }
            stylis['use'] = use;
            stylis['set'] = set;
            if (options !== void 0) {
                set(options);
            }
            return stylis;
        }));
    }(function () {
        return this;
    }(), require, exports, module));
});
/*styled-components@2.2.3#lib/utils/stringifyRules*/
define('styled-components@2.2.3#lib/utils/stringifyRules', [
    'require',
    'exports',
    'module',
    'stylis',
    '../types',
    'prop-types'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        exports.__esModule = true;
        var _stylis = require('stylis');
        var _stylis2 = _interopRequireDefault(_stylis);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
        }
        var babelPluginFlowReactPropTypes_proptype_Interpolation = require('../types').babelPluginFlowReactPropTypes_proptype_Interpolation || require('prop-types').any;
        var stylis = new _stylis2.default({
            global: false,
            cascade: true,
            keyframe: false,
            prefix: true,
            compress: false,
            semicolon: true
        });
        var stringifyRules = function stringifyRules(rules, selector, prefix) {
            var flatCSS = rules.join('').replace(/^\s*\/\/.*$/gm, '');
            var cssStr = selector && prefix ? prefix + ' ' + selector + ' { ' + flatCSS + ' }' : flatCSS;
            return stylis(prefix || !selector ? '' : selector, cssStr);
        };
        exports.default = stringifyRules;
        module.exports = exports['default'];
    }(function () {
        return this;
    }(), require, exports, module));
});
/*styled-components@2.2.3#lib/utils/generateAlphabeticName*/
define('styled-components@2.2.3#lib/utils/generateAlphabeticName', function (require, exports, module) {
    'use strict';
    exports.__esModule = true;
    var chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('');
    var charsLength = chars.length;
    var generateAlphabeticName = function generateAlphabeticName(code) {
        var name = '';
        var x = void 0;
        for (x = code; x > charsLength; x = Math.floor(x / charsLength)) {
            name = chars[x % charsLength] + name;
        }
        return chars[x % charsLength] + name;
    };
    exports.default = generateAlphabeticName;
    module.exports = exports['default'];
});
/*styled-components@2.2.3#lib/utils/interleave*/
define('styled-components@2.2.3#lib/utils/interleave', [
    'require',
    'exports',
    'module',
    '../types',
    'prop-types'
], function (require, exports, module) {
    'use strict';
    exports.__esModule = true;
    var babelPluginFlowReactPropTypes_proptype_Interpolation = require('../types').babelPluginFlowReactPropTypes_proptype_Interpolation || require('prop-types').any;
    exports.default = function (strings, interpolations) {
        return interpolations.reduce(function (array, interp, i) {
            return array.concat(interp, strings[i + 1]);
        }, [strings[0]]);
    };
    module.exports = exports['default'];
});
/*styled-components@2.2.3#lib/constructors/css*/
define('styled-components@2.2.3#lib/constructors/css', [
    'require',
    'exports',
    'module',
    '../utils/interleave',
    '../utils/flatten',
    '../types',
    'prop-types',
    '../types',
    'prop-types'
], function (require, exports, module) {
    'use strict';
    exports.__esModule = true;
    var _interleave = require('../utils/interleave');
    var _interleave2 = _interopRequireDefault(_interleave);
    var _flatten = require('../utils/flatten');
    var _flatten2 = _interopRequireDefault(_flatten);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var babelPluginFlowReactPropTypes_proptype_RuleSet = require('../types').babelPluginFlowReactPropTypes_proptype_RuleSet || require('prop-types').any;
    var babelPluginFlowReactPropTypes_proptype_Interpolation = require('../types').babelPluginFlowReactPropTypes_proptype_Interpolation || require('prop-types').any;
    exports.default = function (strings) {
        for (var _len = arguments.length, interpolations = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            interpolations[_key - 1] = arguments[_key];
        }
        return (0, _flatten2.default)((0, _interleave2.default)(strings, interpolations));
    };
    module.exports = exports['default'];
});
/*styled-components@2.2.3#lib/utils/extractCompsFromCSS*/
define('styled-components@2.2.3#lib/utils/extractCompsFromCSS', function (require, exports, module) {
    'use strict';
    exports.__esModule = true;
    var SC_COMPONENT_ID = /^[^\S\n]*?\/\* sc-component-id:\s+(\S+)\s+\*\//mg;
    exports.default = function (maybeCSS) {
        var css = '' + (maybeCSS || '');
        var existingComponents = [];
        css.replace(SC_COMPONENT_ID, function (match, componentId, matchIndex) {
            existingComponents.push({
                componentId: componentId,
                matchIndex: matchIndex
            });
            return match;
        });
        return existingComponents.map(function (_ref, i) {
            var componentId = _ref.componentId, matchIndex = _ref.matchIndex;
            var nextComp = existingComponents[i + 1];
            var cssFromDOM = nextComp ? css.slice(matchIndex, nextComp.matchIndex) : css.slice(matchIndex);
            return {
                componentId: componentId,
                cssFromDOM: cssFromDOM
            };
        });
    };
    module.exports = exports['default'];
});
/*styled-components@2.2.3#lib/utils/nonce*/
define('styled-components@2.2.3#lib/utils/nonce', function (require, exports, module) {
    'use strict';
    exports.__esModule = true;
    exports.default = function () {
        return typeof __webpack_nonce__ !== 'undefined' ? __webpack_nonce__ : null;
    };
    module.exports = exports['default'];
});
/*styled-components@2.2.3#lib/models/BrowserStyleSheet*/
define('styled-components@2.2.3#lib/models/BrowserStyleSheet', [
    'require',
    'exports',
    'module',
    '../utils/extractCompsFromCSS',
    '../utils/nonce',
    './StyleSheet',
    './StyleSheet',
    'prop-types'
], function (require, exports, module) {
    'use strict';
    exports.__esModule = true;
    exports.COMPONENTS_PER_TAG = undefined;
    var _extractCompsFromCSS = require('../utils/extractCompsFromCSS');
    var _extractCompsFromCSS2 = _interopRequireDefault(_extractCompsFromCSS);
    var _nonce = require('../utils/nonce');
    var _nonce2 = _interopRequireDefault(_nonce);
    var _StyleSheet = require('./StyleSheet');
    var _StyleSheet2 = _interopRequireDefault(_StyleSheet);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError('Cannot call a class as a function');
        }
    }
    var babelPluginFlowReactPropTypes_proptype_Tag = require('./StyleSheet').babelPluginFlowReactPropTypes_proptype_Tag || require('prop-types').any;
    var COMPONENTS_PER_TAG = exports.COMPONENTS_PER_TAG = 40;
    var BrowserTag = function () {
        function BrowserTag(el, isLocal) {
            var existingSource = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
            _classCallCheck(this, BrowserTag);
            this.el = el;
            this.isLocal = isLocal;
            this.ready = false;
            var extractedComps = (0, _extractCompsFromCSS2.default)(existingSource);
            this.size = extractedComps.length;
            this.components = extractedComps.reduce(function (acc, obj) {
                acc[obj.componentId] = obj;
                return acc;
            }, {});
        }
        BrowserTag.prototype.isFull = function isFull() {
            return this.size >= COMPONENTS_PER_TAG;
        };
        BrowserTag.prototype.addComponent = function addComponent(componentId) {
            if (!this.ready)
                this.replaceElement();
            if (this.components[componentId])
                throw new Error('Trying to add Component \'' + componentId + '\' twice!');
            var comp = {
                componentId: componentId,
                textNode: document.createTextNode('')
            };
            this.el.appendChild(comp.textNode);
            this.size += 1;
            this.components[componentId] = comp;
        };
        BrowserTag.prototype.inject = function inject(componentId, css, name) {
            if (!this.ready)
                this.replaceElement();
            var comp = this.components[componentId];
            if (!comp)
                throw new Error('Must add a new component before you can inject css into it');
            if (comp.textNode.data === '')
                comp.textNode.appendData('\n/* sc-component-id: ' + componentId + ' */\n');
            comp.textNode.appendData(css);
            if (name) {
                var existingNames = this.el.getAttribute(_StyleSheet.SC_ATTR);
                this.el.setAttribute(_StyleSheet.SC_ATTR, existingNames ? existingNames + ' ' + name : name);
            }
            var nonce = (0, _nonce2.default)();
            if (nonce) {
                this.el.setAttribute('nonce', nonce);
            }
        };
        BrowserTag.prototype.toHTML = function toHTML() {
            return this.el.outerHTML;
        };
        BrowserTag.prototype.toReactElement = function toReactElement() {
            throw new Error('BrowserTag doesn\'t implement toReactElement!');
        };
        BrowserTag.prototype.clone = function clone() {
            throw new Error('BrowserTag cannot be cloned!');
        };
        BrowserTag.prototype.replaceElement = function replaceElement() {
            var _this = this;
            this.ready = true;
            if (this.size === 0)
                return;
            var newEl = this.el.cloneNode();
            newEl.appendChild(document.createTextNode('\n'));
            Object.keys(this.components).forEach(function (key) {
                var comp = _this.components[key];
                comp.textNode = document.createTextNode(comp.cssFromDOM);
                newEl.appendChild(comp.textNode);
            });
            if (!this.el.parentNode)
                throw new Error('Trying to replace an element that wasn\'t mounted!');
            this.el.parentNode.replaceChild(newEl, this.el);
            this.el = newEl;
        };
        return BrowserTag;
    }();
    exports.default = {
        create: function create() {
            var tags = [];
            var names = {};
            var nodes = document.querySelectorAll('[' + _StyleSheet.SC_ATTR + ']');
            var nodesLength = nodes.length;
            for (var i = 0; i < nodesLength; i += 1) {
                var el = nodes[i];
                tags.push(new BrowserTag(el, el.getAttribute(_StyleSheet.LOCAL_ATTR) === 'true', el.innerHTML));
                var attr = el.getAttribute(_StyleSheet.SC_ATTR);
                if (attr) {
                    attr.trim().split(/\s+/).forEach(function (name) {
                        names[name] = true;
                    });
                }
            }
            var tagConstructor = function tagConstructor(isLocal) {
                var el = document.createElement('style');
                el.type = 'text/css';
                el.setAttribute(_StyleSheet.SC_ATTR, '');
                el.setAttribute(_StyleSheet.LOCAL_ATTR, isLocal ? 'true' : 'false');
                if (!document.head)
                    throw new Error('Missing document <head>');
                document.head.appendChild(el);
                return new BrowserTag(el, isLocal);
            };
            return new _StyleSheet2.default(tagConstructor, tags, names);
        }
    };
});
/*styled-components@2.2.3#lib/models/StyleSheet*/
define('styled-components@2.2.3#lib/models/StyleSheet', [
    'require',
    'exports',
    'module',
    'react',
    './BrowserStyleSheet',
    './ServerStyleSheet'
], function (require, exports, module) {
    'use strict';
    exports.__esModule = true;
    exports.clones = exports.CONTEXT_KEY = exports.LOCAL_ATTR = exports.SC_ATTR = undefined;
    var _extends = Object.assign || function (target) {
        for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                    target[key] = source[key];
                }
            }
        }
        return target;
    };
    var _createClass = function () {
        function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ('value' in descriptor)
                    descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
            }
        }
        return function (Constructor, protoProps, staticProps) {
            if (protoProps)
                defineProperties(Constructor.prototype, protoProps);
            if (staticProps)
                defineProperties(Constructor, staticProps);
            return Constructor;
        };
    }();
    var _react = require('react');
    var _react2 = _interopRequireDefault(_react);
    var _BrowserStyleSheet = require('./BrowserStyleSheet');
    var _BrowserStyleSheet2 = _interopRequireDefault(_BrowserStyleSheet);
    var _ServerStyleSheet = require('./ServerStyleSheet');
    var _ServerStyleSheet2 = _interopRequireDefault(_ServerStyleSheet);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError('Cannot call a class as a function');
        }
    }
    var SC_ATTR = exports.SC_ATTR = 'data-styled-components';
    var LOCAL_ATTR = exports.LOCAL_ATTR = 'data-styled-components-is-local';
    var CONTEXT_KEY = exports.CONTEXT_KEY = '__styled-components-stylesheet__';
    var instance = null;
    var clones = exports.clones = [];
    var StyleSheet = function () {
        function StyleSheet(tagConstructor) {
            var tags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
            var names = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
            _classCallCheck(this, StyleSheet);
            this.hashes = {};
            this.deferredInjections = {};
            this.stylesCacheable = typeof document !== 'undefined';
            this.tagConstructor = tagConstructor;
            this.tags = tags;
            this.names = names;
            this.constructComponentTagMap();
        }
        StyleSheet.prototype.constructComponentTagMap = function constructComponentTagMap() {
            var _this = this;
            this.componentTags = {};
            this.tags.forEach(function (tag) {
                Object.keys(tag.components).forEach(function (componentId) {
                    _this.componentTags[componentId] = tag;
                });
            });
        };
        StyleSheet.prototype.getName = function getName(hash) {
            return this.hashes[hash.toString()];
        };
        StyleSheet.prototype.alreadyInjected = function alreadyInjected(hash, name) {
            if (!this.names[name])
                return false;
            this.hashes[hash.toString()] = name;
            return true;
        };
        StyleSheet.prototype.hasInjectedComponent = function hasInjectedComponent(componentId) {
            return !!this.componentTags[componentId];
        };
        StyleSheet.prototype.deferredInject = function deferredInject(componentId, isLocal, css) {
            if (this === instance) {
                clones.forEach(function (clone) {
                    clone.deferredInject(componentId, isLocal, css);
                });
            }
            this.getOrCreateTag(componentId, isLocal);
            this.deferredInjections[componentId] = css;
        };
        StyleSheet.prototype.inject = function inject(componentId, isLocal, css, hash, name) {
            if (this === instance) {
                clones.forEach(function (clone) {
                    clone.inject(componentId, isLocal, css);
                });
            }
            var tag = this.getOrCreateTag(componentId, isLocal);
            var deferredInjection = this.deferredInjections[componentId];
            if (deferredInjection) {
                tag.inject(componentId, deferredInjection);
                delete this.deferredInjections[componentId];
            }
            tag.inject(componentId, css, name);
            if (hash && name) {
                this.hashes[hash.toString()] = name;
            }
        };
        StyleSheet.prototype.toHTML = function toHTML() {
            return this.tags.map(function (tag) {
                return tag.toHTML();
            }).join('');
        };
        StyleSheet.prototype.toReactElements = function toReactElements() {
            return this.tags.map(function (tag, i) {
                return tag.toReactElement('sc-' + i);
            });
        };
        StyleSheet.prototype.getOrCreateTag = function getOrCreateTag(componentId, isLocal) {
            var existingTag = this.componentTags[componentId];
            if (existingTag) {
                return existingTag;
            }
            var lastTag = this.tags[this.tags.length - 1];
            var componentTag = !lastTag || lastTag.isFull() || lastTag.isLocal !== isLocal ? this.createNewTag(isLocal) : lastTag;
            this.componentTags[componentId] = componentTag;
            componentTag.addComponent(componentId);
            return componentTag;
        };
        StyleSheet.prototype.createNewTag = function createNewTag(isLocal) {
            var newTag = this.tagConstructor(isLocal);
            this.tags.push(newTag);
            return newTag;
        };
        StyleSheet.reset = function reset(isServer) {
            instance = StyleSheet.create(isServer);
        };
        StyleSheet.create = function create() {
            var isServer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : typeof document === 'undefined';
            return (isServer ? _ServerStyleSheet2.default : _BrowserStyleSheet2.default).create();
        };
        StyleSheet.clone = function clone(oldSheet) {
            var newSheet = new StyleSheet(oldSheet.tagConstructor, oldSheet.tags.map(function (tag) {
                return tag.clone();
            }), _extends({}, oldSheet.names));
            newSheet.hashes = _extends({}, oldSheet.hashes);
            newSheet.deferredInjections = _extends({}, oldSheet.deferredInjections);
            clones.push(newSheet);
            return newSheet;
        };
        _createClass(StyleSheet, null, [{
                key: 'instance',
                get: function get() {
                    return instance || (instance = StyleSheet.create());
                }
            }]);
        return StyleSheet;
    }();
    exports.default = StyleSheet;
});
/*styled-components@2.2.3#lib/models/StyleSheetManager*/
define('styled-components@2.2.3#lib/models/StyleSheetManager', [
    'require',
    'exports',
    'module',
    'react',
    'prop-types',
    './StyleSheet',
    './ServerStyleSheet'
], function (require, exports, module) {
    'use strict';
    exports.__esModule = true;
    var _StyleSheetManager$ch;
    var _react = require('react');
    var _react2 = _interopRequireDefault(_react);
    var _propTypes = require('prop-types');
    var _propTypes2 = _interopRequireDefault(_propTypes);
    var _StyleSheet = require('./StyleSheet');
    var _StyleSheet2 = _interopRequireDefault(_StyleSheet);
    var _ServerStyleSheet = require('./ServerStyleSheet');
    var _ServerStyleSheet2 = _interopRequireDefault(_ServerStyleSheet);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError('Cannot call a class as a function');
        }
    }
    function _possibleConstructorReturn(self, call) {
        if (!self) {
            throw new ReferenceError('this hasn\'t been initialised - super() hasn\'t been called');
        }
        return call && (typeof call === 'object' || typeof call === 'function') ? call : self;
    }
    function _inherits(subClass, superClass) {
        if (typeof superClass !== 'function' && superClass !== null) {
            throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        if (superClass)
            Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }
    var StyleSheetManager = function (_Component) {
        _inherits(StyleSheetManager, _Component);
        function StyleSheetManager() {
            _classCallCheck(this, StyleSheetManager);
            return _possibleConstructorReturn(this, _Component.apply(this, arguments));
        }
        StyleSheetManager.prototype.getChildContext = function getChildContext() {
            var _ref;
            return _ref = {}, _ref[_StyleSheet.CONTEXT_KEY] = this.props.sheet, _ref;
        };
        StyleSheetManager.prototype.render = function render() {
            return _react2.default.Children.only(this.props.children);
        };
        return StyleSheetManager;
    }(_react.Component);
    StyleSheetManager.childContextTypes = (_StyleSheetManager$ch = {}, _StyleSheetManager$ch[_StyleSheet.CONTEXT_KEY] = _propTypes2.default.oneOfType([
        _propTypes2.default.instanceOf(_StyleSheet2.default),
        _propTypes2.default.instanceOf(_ServerStyleSheet2.default)
    ]).isRequired, _StyleSheetManager$ch);
    StyleSheetManager.propTypes = {
        sheet: _propTypes2.default.oneOfType([
            _propTypes2.default.instanceOf(_StyleSheet2.default),
            _propTypes2.default.instanceOf(_ServerStyleSheet2.default)
        ]).isRequired
    };
    exports.default = StyleSheetManager;
    module.exports = exports['default'];
});
/*styled-components@2.2.3#lib/models/ServerStyleSheet*/
define('styled-components@2.2.3#lib/models/ServerStyleSheet', [
    'require',
    'exports',
    'module',
    'react',
    './StyleSheet',
    './StyleSheetManager',
    '../utils/nonce',
    './StyleSheet',
    'prop-types'
], function (require, exports, module) {
    'use strict';
    exports.__esModule = true;
    var _extends = Object.assign || function (target) {
        for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                    target[key] = source[key];
                }
            }
        }
        return target;
    };
    var _react = require('react');
    var _react2 = _interopRequireDefault(_react);
    var _StyleSheet = require('./StyleSheet');
    var _StyleSheet2 = _interopRequireDefault(_StyleSheet);
    var _StyleSheetManager = require('./StyleSheetManager');
    var _StyleSheetManager2 = _interopRequireDefault(_StyleSheetManager);
    var _nonce = require('../utils/nonce');
    var _nonce2 = _interopRequireDefault(_nonce);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError('Cannot call a class as a function');
        }
    }
    var babelPluginFlowReactPropTypes_proptype_Tag = require('./StyleSheet').babelPluginFlowReactPropTypes_proptype_Tag || require('prop-types').any;
    var ServerTag = function () {
        function ServerTag(isLocal) {
            _classCallCheck(this, ServerTag);
            this.isLocal = isLocal;
            this.components = {};
            this.size = 0;
            this.names = [];
        }
        ServerTag.prototype.isFull = function isFull() {
            return false;
        };
        ServerTag.prototype.addComponent = function addComponent(componentId) {
            if (this.components[componentId])
                throw new Error('Trying to add Component \'' + componentId + '\' twice!');
            this.components[componentId] = {
                componentId: componentId,
                css: ''
            };
            this.size += 1;
        };
        ServerTag.prototype.concatenateCSS = function concatenateCSS() {
            var _this = this;
            return Object.keys(this.components).reduce(function (styles, k) {
                return styles + _this.components[k].css;
            }, '');
        };
        ServerTag.prototype.inject = function inject(componentId, css, name) {
            var comp = this.components[componentId];
            if (!comp)
                throw new Error('Must add a new component before you can inject css into it');
            if (comp.css === '')
                comp.css = '/* sc-component-id: ' + componentId + ' */\n';
            comp.css += css.replace(/\n*$/, '\n');
            if (name)
                this.names.push(name);
        };
        ServerTag.prototype.toHTML = function toHTML() {
            var attrs = [
                'type="text/css"',
                _StyleSheet.SC_ATTR + '="' + this.names.join(' ') + '"',
                _StyleSheet.LOCAL_ATTR + '="' + (this.isLocal ? 'true' : 'false') + '"'
            ];
            var nonce = (0, _nonce2.default)();
            if (nonce) {
                attrs.push('nonce="' + nonce + '"');
            }
            return '<style ' + attrs.join(' ') + '>' + this.concatenateCSS() + '</style>';
        };
        ServerTag.prototype.toReactElement = function toReactElement(key) {
            var _attrs;
            var attrs = (_attrs = {}, _attrs[_StyleSheet.SC_ATTR] = this.names.join(' '), _attrs[_StyleSheet.LOCAL_ATTR] = this.isLocal.toString(), _attrs);
            var nonce = (0, _nonce2.default)();
            if (nonce) {
                attrs.nonce = nonce;
            }
            return _react2.default.createElement('style', _extends({
                key: key,
                type: 'text/css'
            }, attrs, { dangerouslySetInnerHTML: { __html: this.concatenateCSS() } }));
        };
        ServerTag.prototype.clone = function clone() {
            var _this2 = this;
            var copy = new ServerTag(this.isLocal);
            copy.names = [].concat(this.names);
            copy.size = this.size;
            copy.components = Object.keys(this.components).reduce(function (acc, key) {
                acc[key] = _extends({}, _this2.components[key]);
                return acc;
            }, {});
            return copy;
        };
        return ServerTag;
    }();
    var ServerStyleSheet = function () {
        function ServerStyleSheet() {
            _classCallCheck(this, ServerStyleSheet);
            this.instance = _StyleSheet2.default.clone(_StyleSheet2.default.instance);
        }
        ServerStyleSheet.prototype.collectStyles = function collectStyles(children) {
            if (this.closed)
                throw new Error('Can\'t collect styles once you\'ve called getStyleTags!');
            return _react2.default.createElement(_StyleSheetManager2.default, { sheet: this.instance }, children);
        };
        ServerStyleSheet.prototype.getStyleTags = function getStyleTags() {
            if (!this.closed) {
                _StyleSheet.clones.splice(_StyleSheet.clones.indexOf(this.instance), 1);
                this.closed = true;
            }
            return this.instance.toHTML();
        };
        ServerStyleSheet.prototype.getStyleElement = function getStyleElement() {
            if (!this.closed) {
                _StyleSheet.clones.splice(_StyleSheet.clones.indexOf(this.instance), 1);
                this.closed = true;
            }
            return this.instance.toReactElements();
        };
        ServerStyleSheet.create = function create() {
            return new _StyleSheet2.default(function (isLocal) {
                return new ServerTag(isLocal);
            });
        };
        return ServerStyleSheet;
    }();
    exports.default = ServerStyleSheet;
    module.exports = exports['default'];
});
/*styled-components@2.2.3#lib/utils/createWarnTooManyClasses*/
define('styled-components@2.2.3#lib/utils/createWarnTooManyClasses', function (require, exports, module) {
    'use strict';
    exports.__esModule = true;
    var LIMIT = 200;
    exports.default = function (displayName) {
        var generatedClasses = {};
        var warningSeen = false;
        return function (className) {
            if (!warningSeen) {
                generatedClasses[className] = true;
                if (Object.keys(generatedClasses).length >= LIMIT) {
                    console.warn('Over ' + LIMIT + ' classes were generated for component ' + displayName + '. \n' + 'Consider using the attrs method, together with a style object for frequently changed styles.\n' + 'Example:\n' + '  const Component = styled.div.attrs({\n' + '    style: ({ background }) => ({\n' + '      background,\n' + '    }),\n' + '  })`width: 100%;`\n\n' + '  <Component />');
                    warningSeen = true;
                    generatedClasses = {};
                }
            }
        };
    };
    module.exports = exports['default'];
});
/*styled-components@2.2.3#lib/utils/validAttr*/
define('styled-components@2.2.3#lib/utils/validAttr', function (require, exports, module) {
    'use strict';
    exports.__esModule = true;
    var reactProps = {
        children: true,
        dangerouslySetInnerHTML: true,
        key: true,
        ref: true,
        autoFocus: true,
        defaultValue: true,
        valueLink: true,
        defaultChecked: true,
        checkedLink: true,
        innerHTML: true,
        suppressContentEditableWarning: true,
        onFocusIn: true,
        onFocusOut: true,
        className: true,
        onCopy: true,
        onCut: true,
        onPaste: true,
        onCompositionEnd: true,
        onCompositionStart: true,
        onCompositionUpdate: true,
        onKeyDown: true,
        onKeyPress: true,
        onKeyUp: true,
        onFocus: true,
        onBlur: true,
        onChange: true,
        onInput: true,
        onSubmit: true,
        onReset: true,
        onClick: true,
        onContextMenu: true,
        onDoubleClick: true,
        onDrag: true,
        onDragEnd: true,
        onDragEnter: true,
        onDragExit: true,
        onDragLeave: true,
        onDragOver: true,
        onDragStart: true,
        onDrop: true,
        onMouseDown: true,
        onMouseEnter: true,
        onMouseLeave: true,
        onMouseMove: true,
        onMouseOut: true,
        onMouseOver: true,
        onMouseUp: true,
        onSelect: true,
        onTouchCancel: true,
        onTouchEnd: true,
        onTouchMove: true,
        onTouchStart: true,
        onScroll: true,
        onWheel: true,
        onAbort: true,
        onCanPlay: true,
        onCanPlayThrough: true,
        onDurationChange: true,
        onEmptied: true,
        onEncrypted: true,
        onEnded: true,
        onError: true,
        onLoadedData: true,
        onLoadedMetadata: true,
        onLoadStart: true,
        onPause: true,
        onPlay: true,
        onPlaying: true,
        onProgress: true,
        onRateChange: true,
        onSeeked: true,
        onSeeking: true,
        onStalled: true,
        onSuspend: true,
        onTimeUpdate: true,
        onVolumeChange: true,
        onWaiting: true,
        onLoad: true,
        onAnimationStart: true,
        onAnimationEnd: true,
        onAnimationIteration: true,
        onTransitionEnd: true,
        onCopyCapture: true,
        onCutCapture: true,
        onPasteCapture: true,
        onCompositionEndCapture: true,
        onCompositionStartCapture: true,
        onCompositionUpdateCapture: true,
        onKeyDownCapture: true,
        onKeyPressCapture: true,
        onKeyUpCapture: true,
        onFocusCapture: true,
        onBlurCapture: true,
        onChangeCapture: true,
        onInputCapture: true,
        onSubmitCapture: true,
        onResetCapture: true,
        onClickCapture: true,
        onContextMenuCapture: true,
        onDoubleClickCapture: true,
        onDragCapture: true,
        onDragEndCapture: true,
        onDragEnterCapture: true,
        onDragExitCapture: true,
        onDragLeaveCapture: true,
        onDragOverCapture: true,
        onDragStartCapture: true,
        onDropCapture: true,
        onMouseDownCapture: true,
        onMouseEnterCapture: true,
        onMouseLeaveCapture: true,
        onMouseMoveCapture: true,
        onMouseOutCapture: true,
        onMouseOverCapture: true,
        onMouseUpCapture: true,
        onSelectCapture: true,
        onTouchCancelCapture: true,
        onTouchEndCapture: true,
        onTouchMoveCapture: true,
        onTouchStartCapture: true,
        onScrollCapture: true,
        onWheelCapture: true,
        onAbortCapture: true,
        onCanPlayCapture: true,
        onCanPlayThroughCapture: true,
        onDurationChangeCapture: true,
        onEmptiedCapture: true,
        onEncryptedCapture: true,
        onEndedCapture: true,
        onErrorCapture: true,
        onLoadedDataCapture: true,
        onLoadedMetadataCapture: true,
        onLoadStartCapture: true,
        onPauseCapture: true,
        onPlayCapture: true,
        onPlayingCapture: true,
        onProgressCapture: true,
        onRateChangeCapture: true,
        onSeekedCapture: true,
        onSeekingCapture: true,
        onStalledCapture: true,
        onSuspendCapture: true,
        onTimeUpdateCapture: true,
        onVolumeChangeCapture: true,
        onWaitingCapture: true,
        onLoadCapture: true,
        onAnimationStartCapture: true,
        onAnimationEndCapture: true,
        onAnimationIterationCapture: true,
        onTransitionEndCapture: true
    };
    var htmlProps = {
        accept: true,
        acceptCharset: true,
        accessKey: true,
        action: true,
        allowFullScreen: true,
        allowTransparency: true,
        alt: true,
        as: true,
        async: true,
        autoComplete: true,
        autoPlay: true,
        capture: true,
        cellPadding: true,
        cellSpacing: true,
        charSet: true,
        challenge: true,
        checked: true,
        cite: true,
        classID: true,
        className: true,
        cols: true,
        colSpan: true,
        content: true,
        contentEditable: true,
        contextMenu: true,
        controls: true,
        coords: true,
        crossOrigin: true,
        data: true,
        dateTime: true,
        default: true,
        defer: true,
        dir: true,
        disabled: true,
        download: true,
        draggable: true,
        encType: true,
        form: true,
        formAction: true,
        formEncType: true,
        formMethod: true,
        formNoValidate: true,
        formTarget: true,
        frameBorder: true,
        headers: true,
        height: true,
        hidden: true,
        high: true,
        href: true,
        hrefLang: true,
        htmlFor: true,
        httpEquiv: true,
        icon: true,
        id: true,
        inputMode: true,
        integrity: true,
        is: true,
        keyParams: true,
        keyType: true,
        kind: true,
        label: true,
        lang: true,
        list: true,
        loop: true,
        low: true,
        manifest: true,
        marginHeight: true,
        marginWidth: true,
        max: true,
        maxLength: true,
        media: true,
        mediaGroup: true,
        method: true,
        min: true,
        minLength: true,
        multiple: true,
        muted: true,
        name: true,
        nonce: true,
        noValidate: true,
        open: true,
        optimum: true,
        pattern: true,
        placeholder: true,
        playsInline: true,
        poster: true,
        preload: true,
        profile: true,
        radioGroup: true,
        readOnly: true,
        referrerPolicy: true,
        rel: true,
        required: true,
        reversed: true,
        role: true,
        rows: true,
        rowSpan: true,
        sandbox: true,
        scope: true,
        scoped: true,
        scrolling: true,
        seamless: true,
        selected: true,
        shape: true,
        size: true,
        sizes: true,
        span: true,
        spellCheck: true,
        src: true,
        srcDoc: true,
        srcLang: true,
        srcSet: true,
        start: true,
        step: true,
        style: true,
        summary: true,
        tabIndex: true,
        target: true,
        title: true,
        type: true,
        useMap: true,
        value: true,
        width: true,
        wmode: true,
        wrap: true,
        about: true,
        datatype: true,
        inlist: true,
        prefix: true,
        property: true,
        resource: true,
        typeof: true,
        vocab: true,
        autoCapitalize: true,
        autoCorrect: true,
        autoSave: true,
        color: true,
        itemProp: true,
        itemScope: true,
        itemType: true,
        itemID: true,
        itemRef: true,
        results: true,
        security: true,
        unselectable: 0
    };
    var svgProps = {
        accentHeight: true,
        accumulate: true,
        additive: true,
        alignmentBaseline: true,
        allowReorder: true,
        alphabetic: true,
        amplitude: true,
        arabicForm: true,
        ascent: true,
        attributeName: true,
        attributeType: true,
        autoReverse: true,
        azimuth: true,
        baseFrequency: true,
        baseProfile: true,
        baselineShift: true,
        bbox: true,
        begin: true,
        bias: true,
        by: true,
        calcMode: true,
        capHeight: true,
        clip: true,
        clipPath: true,
        clipRule: true,
        clipPathUnits: true,
        colorInterpolation: true,
        colorInterpolationFilters: true,
        colorProfile: true,
        colorRendering: true,
        contentScriptType: true,
        contentStyleType: true,
        cursor: true,
        cx: true,
        cy: true,
        d: true,
        decelerate: true,
        descent: true,
        diffuseConstant: true,
        direction: true,
        display: true,
        divisor: true,
        dominantBaseline: true,
        dur: true,
        dx: true,
        dy: true,
        edgeMode: true,
        elevation: true,
        enableBackground: true,
        end: true,
        exponent: true,
        externalResourcesRequired: true,
        fill: true,
        fillOpacity: true,
        fillRule: true,
        filter: true,
        filterRes: true,
        filterUnits: true,
        floodColor: true,
        floodOpacity: true,
        focusable: true,
        fontFamily: true,
        fontSize: true,
        fontSizeAdjust: true,
        fontStretch: true,
        fontStyle: true,
        fontVariant: true,
        fontWeight: true,
        format: true,
        from: true,
        fx: true,
        fy: true,
        g1: true,
        g2: true,
        glyphName: true,
        glyphOrientationHorizontal: true,
        glyphOrientationVertical: true,
        glyphRef: true,
        gradientTransform: true,
        gradientUnits: true,
        hanging: true,
        horizAdvX: true,
        horizOriginX: true,
        ideographic: true,
        imageRendering: true,
        in: true,
        in2: true,
        intercept: true,
        k: true,
        k1: true,
        k2: true,
        k3: true,
        k4: true,
        kernelMatrix: true,
        kernelUnitLength: true,
        kerning: true,
        keyPoints: true,
        keySplines: true,
        keyTimes: true,
        lengthAdjust: true,
        letterSpacing: true,
        lightingColor: true,
        limitingConeAngle: true,
        local: true,
        markerEnd: true,
        markerMid: true,
        markerStart: true,
        markerHeight: true,
        markerUnits: true,
        markerWidth: true,
        mask: true,
        maskContentUnits: true,
        maskUnits: true,
        mathematical: true,
        mode: true,
        numOctaves: true,
        offset: true,
        opacity: true,
        operator: true,
        order: true,
        orient: true,
        orientation: true,
        origin: true,
        overflow: true,
        overlinePosition: true,
        overlineThickness: true,
        paintOrder: true,
        panose1: true,
        pathLength: true,
        patternContentUnits: true,
        patternTransform: true,
        patternUnits: true,
        pointerEvents: true,
        points: true,
        pointsAtX: true,
        pointsAtY: true,
        pointsAtZ: true,
        preserveAlpha: true,
        preserveAspectRatio: true,
        primitiveUnits: true,
        r: true,
        radius: true,
        refX: true,
        refY: true,
        renderingIntent: true,
        repeatCount: true,
        repeatDur: true,
        requiredExtensions: true,
        requiredFeatures: true,
        restart: true,
        result: true,
        rotate: true,
        rx: true,
        ry: true,
        scale: true,
        seed: true,
        shapeRendering: true,
        slope: true,
        spacing: true,
        specularConstant: true,
        specularExponent: true,
        speed: true,
        spreadMethod: true,
        startOffset: true,
        stdDeviation: true,
        stemh: true,
        stemv: true,
        stitchTiles: true,
        stopColor: true,
        stopOpacity: true,
        strikethroughPosition: true,
        strikethroughThickness: true,
        string: true,
        stroke: true,
        strokeDasharray: true,
        strokeDashoffset: true,
        strokeLinecap: true,
        strokeLinejoin: true,
        strokeMiterlimit: true,
        strokeOpacity: true,
        strokeWidth: true,
        surfaceScale: true,
        systemLanguage: true,
        tableValues: true,
        targetX: true,
        targetY: true,
        textAnchor: true,
        textDecoration: true,
        textRendering: true,
        textLength: true,
        to: true,
        transform: true,
        u1: true,
        u2: true,
        underlinePosition: true,
        underlineThickness: true,
        unicode: true,
        unicodeBidi: true,
        unicodeRange: true,
        unitsPerEm: true,
        vAlphabetic: true,
        vHanging: true,
        vIdeographic: true,
        vMathematical: true,
        values: true,
        vectorEffect: true,
        version: true,
        vertAdvY: true,
        vertOriginX: true,
        vertOriginY: true,
        viewBox: true,
        viewTarget: true,
        visibility: true,
        widths: true,
        wordSpacing: true,
        writingMode: true,
        x: true,
        xHeight: true,
        x1: true,
        x2: true,
        xChannelSelector: true,
        xlinkActuate: true,
        xlinkArcrole: true,
        xlinkHref: true,
        xlinkRole: true,
        xlinkShow: true,
        xlinkTitle: true,
        xlinkType: true,
        xmlBase: true,
        xmlns: true,
        xmlnsXlink: true,
        xmlLang: true,
        xmlSpace: true,
        y: true,
        y1: true,
        y2: true,
        yChannelSelector: true,
        z: true,
        zoomAndPan: true
    };
    var ATTRIBUTE_NAME_START_CHAR = ':A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD';
    var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + '\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040';
    var isCustomAttribute = RegExp.prototype.test.bind(new RegExp('^(data|aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$'));
    var hasOwnProperty = {}.hasOwnProperty;
    exports.default = function (name) {
        return hasOwnProperty.call(htmlProps, name) || hasOwnProperty.call(svgProps, name) || isCustomAttribute(name.toLowerCase()) || hasOwnProperty.call(reactProps, name);
    };
    module.exports = exports['default'];
});
/*styled-components@2.2.3#lib/utils/isTag*/
define('styled-components@2.2.3#lib/utils/isTag', [
    'require',
    'exports',
    'module',
    '../types',
    'prop-types'
], function (require, exports, module) {
    'use strict';
    exports.__esModule = true;
    exports.default = isTag;
    var babelPluginFlowReactPropTypes_proptype_Target = require('../types').babelPluginFlowReactPropTypes_proptype_Target || require('prop-types').any;
    function isTag(target) {
        return typeof target === 'string';
    }
    module.exports = exports['default'];
});
/*styled-components@2.2.3#lib/utils/isStyledComponent*/
define('styled-components@2.2.3#lib/utils/isStyledComponent', [
    'require',
    'exports',
    'module',
    '../types',
    'prop-types'
], function (require, exports, module) {
    'use strict';
    exports.__esModule = true;
    exports.default = isStyledComponent;
    var babelPluginFlowReactPropTypes_proptype_Target = require('../types').babelPluginFlowReactPropTypes_proptype_Target || require('prop-types').any;
    function isStyledComponent(target) {
        return typeof target === 'function' && typeof target.styledComponentId === 'string';
    }
    module.exports = exports['default'];
});
/*styled-components@2.2.3#lib/utils/getComponentName*/
define('styled-components@2.2.3#lib/utils/getComponentName', function (require, exports, module) {
    'use strict';
    exports.__esModule = true;
    exports.default = getComponentName;
    function getComponentName(target) {
        return target.displayName || target.name || 'Component';
    }
    module.exports = exports['default'];
});
/*styled-components@2.2.3#lib/utils/determineTheme*/
define('styled-components@2.2.3#lib/utils/determineTheme', function (require, exports, module) {
    'use strict';
    exports.__esModule = true;
    exports.default = function (props, fallbackTheme, defaultProps) {
        var isDefaultTheme = defaultProps && props.theme === defaultProps.theme;
        var theme = props.theme && !isDefaultTheme ? props.theme : fallbackTheme;
        return theme;
    };
    module.exports = exports['default'];
});
/*is-function@1.0.1#index*/
define('is-function@1.0.1#index', function (require, exports, module) {
    module.exports = isFunction;
    var toString = Object.prototype.toString;
    function isFunction(fn) {
        var string = toString.call(fn);
        return string === '[object Function]' || typeof fn === 'function' && string !== '[object RegExp]' || typeof window !== 'undefined' && (fn === window.setTimeout || fn === window.alert || fn === window.confirm || fn === window.prompt);
    }
    ;
});
/*styled-components@2.2.3#lib/utils/create-broadcast*/
define('styled-components@2.2.3#lib/utils/create-broadcast', [
    'require',
    'exports',
    'module',
    'prop-types',
    'prop-types',
    'prop-types',
    'prop-types'
], function (require, exports, module) {
    'use strict';
    exports.__esModule = true;
    if (typeof exports !== 'undefined')
        Object.defineProperty(exports, 'babelPluginFlowReactPropTypes_proptype_Broadcast', {
            value: require('prop-types').shape({
                publish: require('prop-types').func.isRequired,
                subscribe: require('prop-types').func.isRequired,
                unsubscribe: require('prop-types').func.isRequired
            })
        });
    var createBroadcast = function createBroadcast(initialState) {
        var listeners = {};
        var id = 0;
        var state = initialState;
        function publish(nextState) {
            state = nextState;
            for (var key in listeners) {
                var _listener = listeners[key];
                if (_listener === undefined) {
                    continue;
                }
                _listener(state);
            }
        }
        function subscribe(listener) {
            var currentId = id;
            listeners[currentId] = listener;
            id += 1;
            listener(state);
            return currentId;
        }
        function unsubscribe(unsubID) {
            listeners[unsubID] = undefined;
        }
        return {
            publish: publish,
            subscribe: subscribe,
            unsubscribe: unsubscribe
        };
    };
    exports.default = createBroadcast;
    module.exports = exports['default'];
});
/*styled-components@2.2.3#lib/utils/once*/
define('styled-components@2.2.3#lib/utils/once', function (require, exports, module) {
    'use strict';
    exports.__esModule = true;
    exports.default = function (cb) {
        var called = false;
        return function () {
            if (!called) {
                called = true;
                cb();
            }
        };
    };
    module.exports = exports['default'];
});
/*styled-components@2.2.3#lib/models/ThemeProvider*/
define('styled-components@2.2.3#lib/models/ThemeProvider', [
    'require',
    'exports',
    'module',
    'react',
    'prop-types',
    'is-function',
    'is-plain-object',
    '../utils/create-broadcast',
    '../utils/once',
    '../utils/create-broadcast',
    'prop-types',
    'prop-types',
    'prop-types',
    'prop-types',
    'prop-types',
    'prop-types'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        exports.__esModule = true;
        exports.CONTEXT_CHANNEL_SHAPE = exports.CHANNEL_NEXT = exports.CHANNEL = undefined;
        var _ThemeProvider$childC, _ThemeProvider$contex;
        var _extends = Object.assign || function (target) {
            for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source) {
                    if (Object.prototype.hasOwnProperty.call(source, key)) {
                        target[key] = source[key];
                    }
                }
            }
            return target;
        };
        var _react = require('react');
        var _react2 = _interopRequireDefault(_react);
        var _propTypes = require('prop-types');
        var _propTypes2 = _interopRequireDefault(_propTypes);
        var _isFunction = require('is-function');
        var _isFunction2 = _interopRequireDefault(_isFunction);
        var _isPlainObject = require('is-plain-object');
        var _isPlainObject2 = _interopRequireDefault(_isPlainObject);
        var _createBroadcast = require('../utils/create-broadcast');
        var _createBroadcast2 = _interopRequireDefault(_createBroadcast);
        var _once = require('../utils/once');
        var _once2 = _interopRequireDefault(_once);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
        }
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError('Cannot call a class as a function');
            }
        }
        function _possibleConstructorReturn(self, call) {
            if (!self) {
                throw new ReferenceError('this hasn\'t been initialised - super() hasn\'t been called');
            }
            return call && (typeof call === 'object' || typeof call === 'function') ? call : self;
        }
        function _inherits(subClass, superClass) {
            if (typeof superClass !== 'function' && superClass !== null) {
                throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass)
                Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        var babelPluginFlowReactPropTypes_proptype_Broadcast = require('../utils/create-broadcast').babelPluginFlowReactPropTypes_proptype_Broadcast || require('prop-types').any;
        var CHANNEL = exports.CHANNEL = '__styled-components__';
        var CHANNEL_NEXT = exports.CHANNEL_NEXT = CHANNEL + 'next__';
        var CONTEXT_CHANNEL_SHAPE = exports.CONTEXT_CHANNEL_SHAPE = _propTypes2.default.shape({
            getTheme: _propTypes2.default.func,
            subscribe: _propTypes2.default.func,
            unsubscribe: _propTypes2.default.func
        });
        if (typeof exports !== 'undefined')
            Object.defineProperty(exports, 'babelPluginFlowReactPropTypes_proptype_Theme', { value: require('prop-types').shape({}) });
        var warnChannelDeprecated = (0, _once2.default)(function () {
            console.error('Warning: Usage of `context.' + CHANNEL + '` as a function is deprecated. It will be replaced with the object on `.context.' + CHANNEL_NEXT + '` in a future version.');
        });
        var ThemeProvider = function (_Component) {
            _inherits(ThemeProvider, _Component);
            function ThemeProvider() {
                _classCallCheck(this, ThemeProvider);
                var _this = _possibleConstructorReturn(this, _Component.call(this));
                _this.unsubscribeToOuterId = -1;
                _this.getTheme = _this.getTheme.bind(_this);
                return _this;
            }
            ThemeProvider.prototype.componentWillMount = function componentWillMount() {
                var _this2 = this;
                var outerContext = this.context[CHANNEL_NEXT];
                if (outerContext !== undefined) {
                    this.unsubscribeToOuterId = outerContext.subscribe(function (theme) {
                        _this2.outerTheme = theme;
                    });
                }
                this.broadcast = (0, _createBroadcast2.default)(this.getTheme());
            };
            ThemeProvider.prototype.getChildContext = function getChildContext() {
                var _this3 = this, _extends2;
                return _extends({}, this.context, (_extends2 = {}, _extends2[CHANNEL_NEXT] = {
                    getTheme: this.getTheme,
                    subscribe: this.broadcast.subscribe,
                    unsubscribe: this.broadcast.unsubscribe
                }, _extends2[CHANNEL] = function (subscriber) {
                    warnChannelDeprecated();
                    var unsubscribeId = _this3.broadcast.subscribe(subscriber);
                    return function () {
                        return _this3.broadcast.unsubscribe(unsubscribeId);
                    };
                }, _extends2));
            };
            ThemeProvider.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
                if (this.props.theme !== nextProps.theme)
                    this.broadcast.publish(this.getTheme(nextProps.theme));
            };
            ThemeProvider.prototype.componentWillUnmount = function componentWillUnmount() {
                if (this.unsubscribeToOuterId !== -1) {
                    this.context[CHANNEL_NEXT].unsubscribe(this.unsubscribeToOuterId);
                }
            };
            ThemeProvider.prototype.getTheme = function getTheme(passedTheme) {
                var theme = passedTheme || this.props.theme;
                if ((0, _isFunction2.default)(theme)) {
                    var mergedTheme = theme(this.outerTheme);
                    if (!(0, _isPlainObject2.default)(mergedTheme)) {
                        throw new Error('[ThemeProvider] Please return an object from your theme function, i.e. theme={() => ({})}!');
                    }
                    return mergedTheme;
                }
                if (!(0, _isPlainObject2.default)(theme)) {
                    throw new Error('[ThemeProvider] Please make your theme prop a plain object');
                }
                return _extends({}, this.outerTheme, theme);
            };
            ThemeProvider.prototype.render = function render() {
                if (!this.props.children) {
                    return null;
                }
                return _react2.default.Children.only(this.props.children);
            };
            return ThemeProvider;
        }(_react.Component);
        ThemeProvider.propTypes = {
            children: require('prop-types').any,
            theme: require('prop-types').oneOfType([
                require('prop-types').shape({}),
                require('prop-types').func
            ]).isRequired
        };
        ThemeProvider.childContextTypes = (_ThemeProvider$childC = {}, _ThemeProvider$childC[CHANNEL] = _propTypes2.default.func, _ThemeProvider$childC[CHANNEL_NEXT] = CONTEXT_CHANNEL_SHAPE, _ThemeProvider$childC);
        ThemeProvider.contextTypes = (_ThemeProvider$contex = {}, _ThemeProvider$contex[CHANNEL_NEXT] = CONTEXT_CHANNEL_SHAPE, _ThemeProvider$contex);
        exports.default = ThemeProvider;
    }(function () {
        return this;
    }(), require, exports, module));
});
/*styled-components@2.2.3#lib/models/StyledComponent*/
define('styled-components@2.2.3#lib/models/StyledComponent', [
    'require',
    'exports',
    'module',
    'react',
    'prop-types',
    '../utils/createWarnTooManyClasses',
    '../utils/validAttr',
    '../utils/isTag',
    '../utils/isStyledComponent',
    '../utils/getComponentName',
    '../utils/determineTheme',
    './ThemeProvider',
    './StyleSheet',
    './ServerStyleSheet',
    './ThemeProvider',
    'prop-types',
    '../types',
    'prop-types',
    '../types',
    'prop-types'
], function (require, exports, module) {
    'use strict';
    exports.__esModule = true;
    var _createClass = function () {
        function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ('value' in descriptor)
                    descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
            }
        }
        return function (Constructor, protoProps, staticProps) {
            if (protoProps)
                defineProperties(Constructor.prototype, protoProps);
            if (staticProps)
                defineProperties(Constructor, staticProps);
            return Constructor;
        };
    }();
    var _extends = Object.assign || function (target) {
        for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                    target[key] = source[key];
                }
            }
        }
        return target;
    };
    var _react = require('react');
    var _propTypes = require('prop-types');
    var _propTypes2 = _interopRequireDefault(_propTypes);
    var _createWarnTooManyClasses = require('../utils/createWarnTooManyClasses');
    var _createWarnTooManyClasses2 = _interopRequireDefault(_createWarnTooManyClasses);
    var _validAttr = require('../utils/validAttr');
    var _validAttr2 = _interopRequireDefault(_validAttr);
    var _isTag = require('../utils/isTag');
    var _isTag2 = _interopRequireDefault(_isTag);
    var _isStyledComponent = require('../utils/isStyledComponent');
    var _isStyledComponent2 = _interopRequireDefault(_isStyledComponent);
    var _getComponentName = require('../utils/getComponentName');
    var _getComponentName2 = _interopRequireDefault(_getComponentName);
    var _determineTheme = require('../utils/determineTheme');
    var _determineTheme2 = _interopRequireDefault(_determineTheme);
    var _ThemeProvider = require('./ThemeProvider');
    var _StyleSheet = require('./StyleSheet');
    var _StyleSheet2 = _interopRequireDefault(_StyleSheet);
    var _ServerStyleSheet = require('./ServerStyleSheet');
    var _ServerStyleSheet2 = _interopRequireDefault(_ServerStyleSheet);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    function _objectWithoutProperties(obj, keys) {
        var target = {};
        for (var i in obj) {
            if (keys.indexOf(i) >= 0)
                continue;
            if (!Object.prototype.hasOwnProperty.call(obj, i))
                continue;
            target[i] = obj[i];
        }
        return target;
    }
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError('Cannot call a class as a function');
        }
    }
    function _possibleConstructorReturn(self, call) {
        if (!self) {
            throw new ReferenceError('this hasn\'t been initialised - super() hasn\'t been called');
        }
        return call && (typeof call === 'object' || typeof call === 'function') ? call : self;
    }
    function _inherits(subClass, superClass) {
        if (typeof superClass !== 'function' && superClass !== null) {
            throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        if (superClass)
            Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }
    var babelPluginFlowReactPropTypes_proptype_Theme = require('./ThemeProvider').babelPluginFlowReactPropTypes_proptype_Theme || require('prop-types').any;
    var babelPluginFlowReactPropTypes_proptype_Target = require('../types').babelPluginFlowReactPropTypes_proptype_Target || require('prop-types').any;
    var babelPluginFlowReactPropTypes_proptype_RuleSet = require('../types').babelPluginFlowReactPropTypes_proptype_RuleSet || require('prop-types').any;
    var escapeRegex = /[[\].#*$><+~=|^:(),"'`]/g;
    var multiDashRegex = /--+/g;
    var STATIC_EXECUTION_CONTEXT = {};
    exports.default = function (ComponentStyle, constructWithOptions) {
        var identifiers = {};
        var generateId = function generateId(_displayName, parentComponentId) {
            var displayName = typeof _displayName !== 'string' ? 'sc' : _displayName.replace(escapeRegex, '-').replace(multiDashRegex, '-');
            var nr = (identifiers[displayName] || 0) + 1;
            identifiers[displayName] = nr;
            var hash = ComponentStyle.generateName(displayName + nr);
            var componentId = displayName + '-' + hash;
            return parentComponentId !== undefined ? parentComponentId + '-' + componentId : componentId;
        };
        var BaseStyledComponent = function (_Component) {
            _inherits(BaseStyledComponent, _Component);
            function BaseStyledComponent() {
                var _temp, _this, _ret;
                _classCallCheck(this, BaseStyledComponent);
                for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                    args[_key] = arguments[_key];
                }
                return _ret = (_temp = (_this = _possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.attrs = {}, _this.state = {
                    theme: null,
                    generatedClassName: ''
                }, _this.unsubscribeId = -1, _temp), _possibleConstructorReturn(_this, _ret);
            }
            BaseStyledComponent.prototype.unsubscribeFromContext = function unsubscribeFromContext() {
                if (this.unsubscribeId !== -1) {
                    this.context[_ThemeProvider.CHANNEL_NEXT].unsubscribe(this.unsubscribeId);
                }
            };
            BaseStyledComponent.prototype.buildExecutionContext = function buildExecutionContext(theme, props) {
                var attrs = this.constructor.attrs;
                var context = _extends({}, props, { theme: theme });
                if (attrs === undefined) {
                    return context;
                }
                this.attrs = Object.keys(attrs).reduce(function (acc, key) {
                    var attr = attrs[key];
                    acc[key] = typeof attr === 'function' ? attr(context) : attr;
                    return acc;
                }, {});
                return _extends({}, context, this.attrs);
            };
            BaseStyledComponent.prototype.generateAndInjectStyles = function generateAndInjectStyles(theme, props) {
                var _constructor = this.constructor, attrs = _constructor.attrs, componentStyle = _constructor.componentStyle, warnTooManyClasses = _constructor.warnTooManyClasses;
                var styleSheet = this.context[_StyleSheet.CONTEXT_KEY] || _StyleSheet2.default.instance;
                if (componentStyle.isStatic && attrs === undefined) {
                    return componentStyle.generateAndInjectStyles(STATIC_EXECUTION_CONTEXT, styleSheet);
                } else {
                    var executionContext = this.buildExecutionContext(theme, props);
                    var className = componentStyle.generateAndInjectStyles(executionContext, styleSheet);
                    if (warnTooManyClasses !== undefined)
                        warnTooManyClasses(className);
                    return className;
                }
            };
            BaseStyledComponent.prototype.componentWillMount = function componentWillMount() {
                var _this2 = this;
                var componentStyle = this.constructor.componentStyle;
                var styledContext = this.context[_ThemeProvider.CHANNEL_NEXT];
                if (componentStyle.isStatic) {
                    var generatedClassName = this.generateAndInjectStyles(STATIC_EXECUTION_CONTEXT, this.props);
                    this.setState({ generatedClassName: generatedClassName });
                } else if (styledContext !== undefined) {
                    var subscribe = styledContext.subscribe;
                    this.unsubscribeId = subscribe(function (nextTheme) {
                        var theme = (0, _determineTheme2.default)(_this2.props, nextTheme, _this2.constructor.defaultProps);
                        var generatedClassName = _this2.generateAndInjectStyles(theme, _this2.props);
                        _this2.setState({
                            theme: theme,
                            generatedClassName: generatedClassName
                        });
                    });
                } else {
                    var _theme = this.props.theme || {};
                    var _generatedClassName = this.generateAndInjectStyles(_theme, this.props);
                    this.setState({
                        theme: _theme,
                        generatedClassName: _generatedClassName
                    });
                }
            };
            BaseStyledComponent.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
                var _this3 = this;
                var componentStyle = this.constructor.componentStyle;
                if (componentStyle.isStatic) {
                    return;
                }
                this.setState(function (oldState) {
                    var theme = (0, _determineTheme2.default)(nextProps, oldState.theme, _this3.constructor.defaultProps);
                    var generatedClassName = _this3.generateAndInjectStyles(theme, nextProps);
                    return {
                        theme: theme,
                        generatedClassName: generatedClassName
                    };
                });
            };
            BaseStyledComponent.prototype.componentWillUnmount = function componentWillUnmount() {
                this.unsubscribeFromContext();
            };
            BaseStyledComponent.prototype.render = function render() {
                var _this4 = this;
                var innerRef = this.props.innerRef;
                var generatedClassName = this.state.generatedClassName;
                var _constructor2 = this.constructor, styledComponentId = _constructor2.styledComponentId, target = _constructor2.target;
                var isTargetTag = (0, _isTag2.default)(target);
                var className = [
                    this.props.className,
                    styledComponentId,
                    this.attrs.className,
                    generatedClassName
                ].filter(Boolean).join(' ');
                var baseProps = _extends({}, this.attrs, { className: className });
                if ((0, _isStyledComponent2.default)(target)) {
                    baseProps.innerRef = innerRef;
                } else {
                    baseProps.ref = innerRef;
                }
                var propsForElement = Object.keys(this.props).reduce(function (acc, propName) {
                    if (propName !== 'innerRef' && propName !== 'className' && (!isTargetTag || (0, _validAttr2.default)(propName))) {
                        acc[propName] = _this4.props[propName];
                    }
                    return acc;
                }, baseProps);
                return (0, _react.createElement)(target, propsForElement);
            };
            return BaseStyledComponent;
        }(_react.Component);
        var createStyledComponent = function createStyledComponent(target, options, rules) {
            var _StyledComponent$cont;
            var _options$displayName = options.displayName, displayName = _options$displayName === undefined ? (0, _isTag2.default)(target) ? 'styled.' + target : 'Styled(' + (0, _getComponentName2.default)(target) + ')' : _options$displayName, _options$componentId = options.componentId, componentId = _options$componentId === undefined ? generateId(options.displayName, options.parentComponentId) : _options$componentId, _options$ParentCompon = options.ParentComponent, ParentComponent = _options$ParentCompon === undefined ? BaseStyledComponent : _options$ParentCompon, extendingRules = options.rules, attrs = options.attrs;
            var styledComponentId = options.displayName && options.componentId ? options.displayName + '-' + options.componentId : componentId;
            var warnTooManyClasses = void 0;
            if (process.env.NODE_ENV !== 'production') {
                warnTooManyClasses = (0, _createWarnTooManyClasses2.default)(displayName);
            }
            var componentStyle = new ComponentStyle(extendingRules === undefined ? rules : extendingRules.concat(rules), attrs, styledComponentId);
            var StyledComponent = function (_ParentComponent) {
                _inherits(StyledComponent, _ParentComponent);
                function StyledComponent() {
                    _classCallCheck(this, StyledComponent);
                    return _possibleConstructorReturn(this, _ParentComponent.apply(this, arguments));
                }
                StyledComponent.withComponent = function withComponent(tag) {
                    var previousComponentId = options.componentId, optionsToCopy = _objectWithoutProperties(options, ['componentId']);
                    var newComponentId = previousComponentId && previousComponentId + '-' + ((0, _isTag2.default)(tag) ? tag : (0, _getComponentName2.default)(tag));
                    var newOptions = _extends({}, optionsToCopy, {
                        componentId: newComponentId,
                        ParentComponent: StyledComponent
                    });
                    return createStyledComponent(tag, newOptions, rules);
                };
                _createClass(StyledComponent, null, [{
                        key: 'extend',
                        get: function get() {
                            var rulesFromOptions = options.rules, parentComponentId = options.componentId, optionsToCopy = _objectWithoutProperties(options, [
                                    'rules',
                                    'componentId'
                                ]);
                            var newRules = rulesFromOptions === undefined ? rules : rulesFromOptions.concat(rules);
                            var newOptions = _extends({}, optionsToCopy, {
                                rules: newRules,
                                parentComponentId: parentComponentId,
                                ParentComponent: StyledComponent
                            });
                            return constructWithOptions(createStyledComponent, target, newOptions);
                        }
                    }]);
                return StyledComponent;
            }(ParentComponent);
            StyledComponent.contextTypes = (_StyledComponent$cont = {}, _StyledComponent$cont[_ThemeProvider.CHANNEL] = _propTypes2.default.func, _StyledComponent$cont[_ThemeProvider.CHANNEL_NEXT] = _ThemeProvider.CONTEXT_CHANNEL_SHAPE, _StyledComponent$cont[_StyleSheet.CONTEXT_KEY] = _propTypes2.default.oneOfType([
                _propTypes2.default.instanceOf(_StyleSheet2.default),
                _propTypes2.default.instanceOf(_ServerStyleSheet2.default)
            ]), _StyledComponent$cont);
            StyledComponent.displayName = displayName;
            StyledComponent.styledComponentId = styledComponentId;
            StyledComponent.attrs = attrs;
            StyledComponent.componentStyle = componentStyle;
            StyledComponent.warnTooManyClasses = warnTooManyClasses;
            StyledComponent.target = target;
            return StyledComponent;
        };
        return createStyledComponent;
    };
    module.exports = exports['default'];
});
/*styled-components@2.2.3#lib/vendor/glamor/hash*/
define('styled-components@2.2.3#lib/vendor/glamor/hash', function (require, exports, module) {
    'use strict';
    exports.__esModule = true;
    exports.default = doHash;
    function doHash(str, seed) {
        var m = 1540483477;
        var r = 24;
        var h = seed ^ str.length;
        var length = str.length;
        var currentIndex = 0;
        while (length >= 4) {
            var k = UInt32(str, currentIndex);
            k = Umul32(k, m);
            k ^= k >>> r;
            k = Umul32(k, m);
            h = Umul32(h, m);
            h ^= k;
            currentIndex += 4;
            length -= 4;
        }
        switch (length) {
        case 3:
            h ^= UInt16(str, currentIndex);
            h ^= str.charCodeAt(currentIndex + 2) << 16;
            h = Umul32(h, m);
            break;
        case 2:
            h ^= UInt16(str, currentIndex);
            h = Umul32(h, m);
            break;
        case 1:
            h ^= str.charCodeAt(currentIndex);
            h = Umul32(h, m);
            break;
        }
        h ^= h >>> 13;
        h = Umul32(h, m);
        h ^= h >>> 15;
        return h >>> 0;
    }
    function UInt32(str, pos) {
        return str.charCodeAt(pos++) + (str.charCodeAt(pos++) << 8) + (str.charCodeAt(pos++) << 16) + (str.charCodeAt(pos) << 24);
    }
    function UInt16(str, pos) {
        return str.charCodeAt(pos++) + (str.charCodeAt(pos++) << 8);
    }
    function Umul32(n, m) {
        n = n | 0;
        m = m | 0;
        var nlo = n & 65535;
        var nhi = n >>> 16;
        var res = nlo * m + ((nhi * m & 65535) << 16) | 0;
        return res;
    }
    module.exports = exports['default'];
});
/*styled-components@2.2.3#lib/models/ComponentStyle*/
define('styled-components@2.2.3#lib/models/ComponentStyle', [
    'require',
    'exports',
    'module',
    '../vendor/glamor/hash',
    './StyleSheet',
    '../utils/isStyledComponent',
    '../types',
    'prop-types',
    '../types',
    'prop-types',
    '../types',
    'prop-types',
    '../types',
    'prop-types'
], function (require, exports, module) {
    'use strict';
    exports.__esModule = true;
    var _hash = require('../vendor/glamor/hash');
    var _hash2 = _interopRequireDefault(_hash);
    var _StyleSheet = require('./StyleSheet');
    var _StyleSheet2 = _interopRequireDefault(_StyleSheet);
    var _isStyledComponent = require('../utils/isStyledComponent');
    var _isStyledComponent2 = _interopRequireDefault(_isStyledComponent);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError('Cannot call a class as a function');
        }
    }
    var babelPluginFlowReactPropTypes_proptype_Stringifier = require('../types').babelPluginFlowReactPropTypes_proptype_Stringifier || require('prop-types').any;
    var babelPluginFlowReactPropTypes_proptype_Flattener = require('../types').babelPluginFlowReactPropTypes_proptype_Flattener || require('prop-types').any;
    var babelPluginFlowReactPropTypes_proptype_NameGenerator = require('../types').babelPluginFlowReactPropTypes_proptype_NameGenerator || require('prop-types').any;
    var babelPluginFlowReactPropTypes_proptype_RuleSet = require('../types').babelPluginFlowReactPropTypes_proptype_RuleSet || require('prop-types').any;
    var isStaticRules = function isStaticRules(rules, attrs) {
        for (var i = 0; i < rules.length; i += 1) {
            var rule = rules[i];
            if (Array.isArray(rule) && !isStaticRules(rule)) {
                return false;
            } else if (typeof rule === 'function' && !(0, _isStyledComponent2.default)(rule)) {
                return false;
            }
        }
        if (attrs !== undefined) {
            for (var key in attrs) {
                var value = attrs[key];
                if (typeof value === 'function') {
                    return false;
                }
            }
        }
        return true;
    };
    exports.default = function (nameGenerator, flatten, stringifyRules) {
        var ComponentStyle = function () {
            function ComponentStyle(rules, attrs, componentId) {
                _classCallCheck(this, ComponentStyle);
                this.rules = rules;
                this.isStatic = isStaticRules(rules, attrs);
                this.componentId = componentId;
                if (!_StyleSheet2.default.instance.hasInjectedComponent(this.componentId)) {
                    var placeholder = process.env.NODE_ENV !== 'production' ? '.' + componentId + ' {}' : '';
                    _StyleSheet2.default.instance.deferredInject(componentId, true, placeholder);
                }
            }
            ComponentStyle.prototype.generateAndInjectStyles = function generateAndInjectStyles(executionContext, styleSheet) {
                var isStatic = this.isStatic, lastClassName = this.lastClassName;
                if (isStatic && lastClassName !== undefined) {
                    return lastClassName;
                }
                var flatCSS = flatten(this.rules, executionContext);
                var hash = (0, _hash2.default)(this.componentId + flatCSS.join(''));
                var existingName = styleSheet.getName(hash);
                if (existingName !== undefined) {
                    if (styleSheet.stylesCacheable) {
                        this.lastClassName = existingName;
                    }
                    return existingName;
                }
                var name = nameGenerator(hash);
                if (styleSheet.stylesCacheable) {
                    this.lastClassName = existingName;
                }
                if (styleSheet.alreadyInjected(hash, name)) {
                    return name;
                }
                var css = '\n' + stringifyRules(flatCSS, '.' + name);
                styleSheet.inject(this.componentId, true, css, hash, name);
                return name;
            };
            ComponentStyle.generateName = function generateName(str) {
                return nameGenerator((0, _hash2.default)(str));
            };
            return ComponentStyle;
        }();
        return ComponentStyle;
    };
    module.exports = exports['default'];
});
/*styled-components@2.2.3#lib/utils/domElements*/
define('styled-components@2.2.3#lib/utils/domElements', function (require, exports, module) {
    'use strict';
    exports.__esModule = true;
    exports.default = [
        'a',
        'abbr',
        'address',
        'area',
        'article',
        'aside',
        'audio',
        'b',
        'base',
        'bdi',
        'bdo',
        'big',
        'blockquote',
        'body',
        'br',
        'button',
        'canvas',
        'caption',
        'cite',
        'code',
        'col',
        'colgroup',
        'data',
        'datalist',
        'dd',
        'del',
        'details',
        'dfn',
        'dialog',
        'div',
        'dl',
        'dt',
        'em',
        'embed',
        'fieldset',
        'figcaption',
        'figure',
        'footer',
        'form',
        'h1',
        'h2',
        'h3',
        'h4',
        'h5',
        'h6',
        'head',
        'header',
        'hgroup',
        'hr',
        'html',
        'i',
        'iframe',
        'img',
        'input',
        'ins',
        'kbd',
        'keygen',
        'label',
        'legend',
        'li',
        'link',
        'main',
        'map',
        'mark',
        'marquee',
        'menu',
        'menuitem',
        'meta',
        'meter',
        'nav',
        'noscript',
        'object',
        'ol',
        'optgroup',
        'option',
        'output',
        'p',
        'param',
        'picture',
        'pre',
        'progress',
        'q',
        'rp',
        'rt',
        'ruby',
        's',
        'samp',
        'script',
        'section',
        'select',
        'small',
        'source',
        'span',
        'strong',
        'style',
        'sub',
        'summary',
        'sup',
        'table',
        'tbody',
        'td',
        'textarea',
        'tfoot',
        'th',
        'thead',
        'time',
        'title',
        'tr',
        'track',
        'u',
        'ul',
        'var',
        'video',
        'wbr',
        'circle',
        'clipPath',
        'defs',
        'ellipse',
        'g',
        'image',
        'line',
        'linearGradient',
        'mask',
        'path',
        'pattern',
        'polygon',
        'polyline',
        'radialGradient',
        'rect',
        'stop',
        'svg',
        'text',
        'tspan'
    ];
    module.exports = exports['default'];
});
/*styled-components@2.2.3#lib/constructors/styled*/
define('styled-components@2.2.3#lib/constructors/styled', [
    'require',
    'exports',
    'module',
    '../utils/domElements',
    '../types',
    'prop-types'
], function (require, exports, module) {
    'use strict';
    exports.__esModule = true;
    var _domElements = require('../utils/domElements');
    var _domElements2 = _interopRequireDefault(_domElements);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var babelPluginFlowReactPropTypes_proptype_Target = require('../types').babelPluginFlowReactPropTypes_proptype_Target || require('prop-types').any;
    exports.default = function (styledComponent, constructWithOptions) {
        var styled = function styled(tag) {
            return constructWithOptions(styledComponent, tag);
        };
        _domElements2.default.forEach(function (domElement) {
            styled[domElement] = styled(domElement);
        });
        return styled;
    };
    module.exports = exports['default'];
});
/*styled-components@2.2.3#lib/constructors/keyframes*/
define('styled-components@2.2.3#lib/constructors/keyframes', [
    'require',
    'exports',
    'module',
    '../vendor/glamor/hash',
    '../models/StyleSheet',
    '../types',
    'prop-types',
    '../types',
    'prop-types',
    '../types',
    'prop-types'
], function (require, exports, module) {
    'use strict';
    exports.__esModule = true;
    var _hash = require('../vendor/glamor/hash');
    var _hash2 = _interopRequireDefault(_hash);
    var _StyleSheet = require('../models/StyleSheet');
    var _StyleSheet2 = _interopRequireDefault(_StyleSheet);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var babelPluginFlowReactPropTypes_proptype_Stringifier = require('../types').babelPluginFlowReactPropTypes_proptype_Stringifier || require('prop-types').any;
    var babelPluginFlowReactPropTypes_proptype_NameGenerator = require('../types').babelPluginFlowReactPropTypes_proptype_NameGenerator || require('prop-types').any;
    var babelPluginFlowReactPropTypes_proptype_Interpolation = require('../types').babelPluginFlowReactPropTypes_proptype_Interpolation || require('prop-types').any;
    var replaceWhitespace = function replaceWhitespace(str) {
        return str.replace(/\s|\\n/g, '');
    };
    exports.default = function (nameGenerator, stringifyRules, css) {
        return function (strings) {
            for (var _len = arguments.length, interpolations = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                interpolations[_key - 1] = arguments[_key];
            }
            var rules = css.apply(undefined, [strings].concat(interpolations));
            var hash = (0, _hash2.default)(replaceWhitespace(JSON.stringify(rules)));
            var existingName = _StyleSheet2.default.instance.getName(hash);
            if (existingName)
                return existingName;
            var name = nameGenerator(hash);
            if (_StyleSheet2.default.instance.alreadyInjected(hash, name))
                return name;
            var generatedCSS = stringifyRules(rules, name, '@keyframes');
            _StyleSheet2.default.instance.inject('sc-keyframes-' + name, true, generatedCSS, hash, name);
            return name;
        };
    };
    module.exports = exports['default'];
});
/*styled-components@2.2.3#lib/constructors/injectGlobal*/
define('styled-components@2.2.3#lib/constructors/injectGlobal', [
    'require',
    'exports',
    'module',
    '../vendor/glamor/hash',
    '../models/StyleSheet',
    '../types',
    'prop-types',
    '../types',
    'prop-types'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        exports.__esModule = true;
        var _hash = require('../vendor/glamor/hash');
        var _hash2 = _interopRequireDefault(_hash);
        var _StyleSheet = require('../models/StyleSheet');
        var _StyleSheet2 = _interopRequireDefault(_StyleSheet);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
        }
        var babelPluginFlowReactPropTypes_proptype_Stringifier = require('../types').babelPluginFlowReactPropTypes_proptype_Stringifier || require('prop-types').any;
        var babelPluginFlowReactPropTypes_proptype_Interpolation = require('../types').babelPluginFlowReactPropTypes_proptype_Interpolation || require('prop-types').any;
        exports.default = function (stringifyRules, css) {
            var injectGlobal = function injectGlobal(strings) {
                for (var _len = arguments.length, interpolations = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                    interpolations[_key - 1] = arguments[_key];
                }
                var rules = css.apply(undefined, [strings].concat(interpolations));
                var hash = (0, _hash2.default)(JSON.stringify(rules));
                var componentId = 'sc-global-' + hash;
                if (_StyleSheet2.default.instance.hasInjectedComponent(componentId))
                    return;
                _StyleSheet2.default.instance.inject(componentId, false, stringifyRules(rules));
            };
            return injectGlobal;
        };
        module.exports = exports['default'];
    }(function () {
        return this;
    }(), require, exports, module));
});
/*styled-components@2.2.3#lib/constructors/constructWithOptions*/
define('styled-components@2.2.3#lib/constructors/constructWithOptions', [
    'require',
    'exports',
    'module',
    '../types',
    'prop-types',
    '../types',
    'prop-types'
], function (require, exports, module) {
    'use strict';
    exports.__esModule = true;
    var _extends = Object.assign || function (target) {
        for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                    target[key] = source[key];
                }
            }
        }
        return target;
    };
    var babelPluginFlowReactPropTypes_proptype_Target = require('../types').babelPluginFlowReactPropTypes_proptype_Target || require('prop-types').any;
    var babelPluginFlowReactPropTypes_proptype_Interpolation = require('../types').babelPluginFlowReactPropTypes_proptype_Interpolation || require('prop-types').any;
    exports.default = function (css) {
        var constructWithOptions = function constructWithOptions(componentConstructor, tag) {
            var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
            if (typeof tag !== 'string' && typeof tag !== 'function') {
                throw new Error('Cannot create styled-component for component: ' + tag);
            }
            var templateFunction = function templateFunction(strings) {
                for (var _len = arguments.length, interpolations = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                    interpolations[_key - 1] = arguments[_key];
                }
                return componentConstructor(tag, options, css.apply(undefined, [strings].concat(interpolations)));
            };
            templateFunction.withConfig = function (config) {
                return constructWithOptions(componentConstructor, tag, _extends({}, options, config));
            };
            templateFunction.attrs = function (attrs) {
                return constructWithOptions(componentConstructor, tag, _extends({}, options, { attrs: _extends({}, options.attrs || {}, attrs) }));
            };
            return templateFunction;
        };
        return constructWithOptions;
    };
    module.exports = exports['default'];
});
/*hoist-non-react-statics@1.2.0#index*/
define('hoist-non-react-statics@1.2.0#index', function (require, exports, module) {
    'use strict';
    var REACT_STATICS = {
        childContextTypes: true,
        contextTypes: true,
        defaultProps: true,
        displayName: true,
        getDefaultProps: true,
        mixins: true,
        propTypes: true,
        type: true
    };
    var KNOWN_STATICS = {
        name: true,
        length: true,
        prototype: true,
        caller: true,
        arguments: true,
        arity: true
    };
    var isGetOwnPropertySymbolsAvailable = typeof Object.getOwnPropertySymbols === 'function';
    module.exports = function hoistNonReactStatics(targetComponent, sourceComponent, customStatics) {
        if (typeof sourceComponent !== 'string') {
            var keys = Object.getOwnPropertyNames(sourceComponent);
            if (isGetOwnPropertySymbolsAvailable) {
                keys = keys.concat(Object.getOwnPropertySymbols(sourceComponent));
            }
            for (var i = 0; i < keys.length; ++i) {
                if (!REACT_STATICS[keys[i]] && !KNOWN_STATICS[keys[i]] && (!customStatics || !customStatics[keys[i]])) {
                    try {
                        targetComponent[keys[i]] = sourceComponent[keys[i]];
                    } catch (error) {
                    }
                }
            }
        }
        return targetComponent;
    };
});
/*styled-components@2.2.3#lib/hoc/withTheme*/
define('styled-components@2.2.3#lib/hoc/withTheme', [
    'require',
    'exports',
    'module',
    'react',
    'prop-types',
    'hoist-non-react-statics',
    '../models/ThemeProvider',
    '../utils/isStyledComponent',
    '../utils/determineTheme'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        exports.__esModule = true;
        var _extends = Object.assign || function (target) {
            for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source) {
                    if (Object.prototype.hasOwnProperty.call(source, key)) {
                        target[key] = source[key];
                    }
                }
            }
            return target;
        };
        var _react = require('react');
        var _react2 = _interopRequireDefault(_react);
        var _propTypes = require('prop-types');
        var _propTypes2 = _interopRequireDefault(_propTypes);
        var _hoistNonReactStatics = require('hoist-non-react-statics');
        var _hoistNonReactStatics2 = _interopRequireDefault(_hoistNonReactStatics);
        var _ThemeProvider = require('../models/ThemeProvider');
        var _isStyledComponent2 = require('../utils/isStyledComponent');
        var _isStyledComponent3 = _interopRequireDefault(_isStyledComponent2);
        var _determineTheme = require('../utils/determineTheme');
        var _determineTheme2 = _interopRequireDefault(_determineTheme);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
        }
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError('Cannot call a class as a function');
            }
        }
        function _possibleConstructorReturn(self, call) {
            if (!self) {
                throw new ReferenceError('this hasn\'t been initialised - super() hasn\'t been called');
            }
            return call && (typeof call === 'object' || typeof call === 'function') ? call : self;
        }
        function _inherits(subClass, superClass) {
            if (typeof superClass !== 'function' && superClass !== null) {
                throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass)
                Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        var wrapWithTheme = function wrapWithTheme(Component) {
            var _WithTheme$contextTyp;
            var componentName = Component.displayName || Component.name || 'Component';
            var isStyledComponent = (0, _isStyledComponent3.default)(Component);
            var WithTheme = function (_React$Component) {
                _inherits(WithTheme, _React$Component);
                function WithTheme() {
                    var _temp, _this, _ret;
                    _classCallCheck(this, WithTheme);
                    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                        args[_key] = arguments[_key];
                    }
                    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.state = {}, _this.unsubscribeId = -1, _temp), _possibleConstructorReturn(_this, _ret);
                }
                WithTheme.prototype.componentWillMount = function componentWillMount() {
                    var _this2 = this;
                    var defaultProps = this.constructor.defaultProps;
                    var styledContext = this.context[_ThemeProvider.CHANNEL_NEXT];
                    var themeProp = (0, _determineTheme2.default)(this.props, undefined, defaultProps);
                    if (styledContext === undefined && themeProp === undefined && process.env.NODE_ENV !== 'production') {
                        console.warn('[withTheme] You are not using a ThemeProvider nor passing a theme prop or a theme in defaultProps');
                    } else if (styledContext === undefined && themeProp !== undefined) {
                        this.setState({ theme: themeProp });
                    } else {
                        var subscribe = styledContext.subscribe;
                        this.unsubscribeId = subscribe(function (nextTheme) {
                            var theme = (0, _determineTheme2.default)(_this2.props, nextTheme, defaultProps);
                            _this2.setState({ theme: theme });
                        });
                    }
                };
                WithTheme.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
                    var defaultProps = this.constructor.defaultProps;
                    this.setState(function (oldState) {
                        var theme = (0, _determineTheme2.default)(nextProps, oldState.theme, defaultProps);
                        return { theme: theme };
                    });
                };
                WithTheme.prototype.componentWillUnmount = function componentWillUnmount() {
                    if (this.unsubscribeId !== -1) {
                        this.context[_ThemeProvider.CHANNEL_NEXT].unsubscribe(this.unsubscribeId);
                    }
                };
                WithTheme.prototype.render = function render() {
                    var innerRef = this.props.innerRef;
                    var theme = this.state.theme;
                    return _react2.default.createElement(Component, _extends({ theme: theme }, this.props, {
                        innerRef: isStyledComponent ? innerRef : undefined,
                        ref: isStyledComponent ? undefined : innerRef
                    }));
                };
                return WithTheme;
            }(_react2.default.Component);
            WithTheme.displayName = 'WithTheme(' + componentName + ')';
            WithTheme.styledComponentId = 'withTheme';
            WithTheme.contextTypes = (_WithTheme$contextTyp = {}, _WithTheme$contextTyp[_ThemeProvider.CHANNEL] = _propTypes2.default.func, _WithTheme$contextTyp[_ThemeProvider.CHANNEL_NEXT] = _ThemeProvider.CONTEXT_CHANNEL_SHAPE, _WithTheme$contextTyp);
            return (0, _hoistNonReactStatics2.default)(WithTheme, Component);
        };
        exports.default = wrapWithTheme;
        module.exports = exports['default'];
    }(function () {
        return this;
    }(), require, exports, module));
});
/*styled-components@2.2.3#lib/index*/
define('styled-components@2.2.3#lib/index', [
    'require',
    'exports',
    'module',
    './utils/flatten',
    './utils/stringifyRules',
    './utils/generateAlphabeticName',
    './constructors/css',
    './models/ServerStyleSheet',
    './models/StyleSheetManager',
    './models/StyledComponent',
    './models/ComponentStyle',
    './constructors/styled',
    './constructors/keyframes',
    './constructors/injectGlobal',
    './constructors/constructWithOptions',
    './models/ThemeProvider',
    './hoc/withTheme'
], function (require, exports, module) {
    'use strict';
    exports.__esModule = true;
    exports.StyleSheetManager = exports.ServerStyleSheet = exports.withTheme = exports.ThemeProvider = exports.injectGlobal = exports.keyframes = exports.css = undefined;
    var _flatten = require('./utils/flatten');
    var _flatten2 = _interopRequireDefault(_flatten);
    var _stringifyRules = require('./utils/stringifyRules');
    var _stringifyRules2 = _interopRequireDefault(_stringifyRules);
    var _generateAlphabeticName = require('./utils/generateAlphabeticName');
    var _generateAlphabeticName2 = _interopRequireDefault(_generateAlphabeticName);
    var _css = require('./constructors/css');
    var _css2 = _interopRequireDefault(_css);
    var _ServerStyleSheet = require('./models/ServerStyleSheet');
    var _ServerStyleSheet2 = _interopRequireDefault(_ServerStyleSheet);
    var _StyleSheetManager = require('./models/StyleSheetManager');
    var _StyleSheetManager2 = _interopRequireDefault(_StyleSheetManager);
    var _StyledComponent2 = require('./models/StyledComponent');
    var _StyledComponent3 = _interopRequireDefault(_StyledComponent2);
    var _ComponentStyle2 = require('./models/ComponentStyle');
    var _ComponentStyle3 = _interopRequireDefault(_ComponentStyle2);
    var _styled2 = require('./constructors/styled');
    var _styled3 = _interopRequireDefault(_styled2);
    var _keyframes2 = require('./constructors/keyframes');
    var _keyframes3 = _interopRequireDefault(_keyframes2);
    var _injectGlobal2 = require('./constructors/injectGlobal');
    var _injectGlobal3 = _interopRequireDefault(_injectGlobal2);
    var _constructWithOptions2 = require('./constructors/constructWithOptions');
    var _constructWithOptions3 = _interopRequireDefault(_constructWithOptions2);
    var _ThemeProvider = require('./models/ThemeProvider');
    var _ThemeProvider2 = _interopRequireDefault(_ThemeProvider);
    var _withTheme = require('./hoc/withTheme');
    var _withTheme2 = _interopRequireDefault(_withTheme);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var ComponentStyle = (0, _ComponentStyle3.default)(_generateAlphabeticName2.default, _flatten2.default, _stringifyRules2.default);
    var constructWithOptions = (0, _constructWithOptions3.default)(_css2.default);
    var StyledComponent = (0, _StyledComponent3.default)(ComponentStyle, constructWithOptions);
    var keyframes = (0, _keyframes3.default)(_generateAlphabeticName2.default, _stringifyRules2.default, _css2.default);
    var injectGlobal = (0, _injectGlobal3.default)(_stringifyRules2.default, _css2.default);
    var styled = (0, _styled3.default)(StyledComponent, constructWithOptions);
    exports.default = styled;
    exports.css = _css2.default;
    exports.keyframes = keyframes;
    exports.injectGlobal = injectGlobal;
    exports.ThemeProvider = _ThemeProvider2.default;
    exports.withTheme = _withTheme2.default;
    exports.ServerStyleSheet = _ServerStyleSheet2.default;
    exports.StyleSheetManager = _StyleSheetManager2.default;
});
/*steal-styled-components-bug@1.0.0#public/index*/
define('steal-styled-components-bug@1.0.0#public/index', [
    'react',
    'react-dom',
    'styled-components'
], function (_react, _reactDom, _styledComponents) {
    'use strict';
    var _react2 = _interopRequireDefault(_react);
    var _reactDom2 = _interopRequireDefault(_reactDom);
    var _styledComponents2 = _interopRequireDefault(_styledComponents);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var _templateObject = _taggedTemplateLiteral(['\n\tfont-size: 2em;\n\tfont-weight: bold;\n\tcolor: green;\n'], ['\n\tfont-size: 2em;\n\tfont-weight: bold;\n\tcolor: green;\n']);
    function _taggedTemplateLiteral(strings, raw) {
        return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } }));
    }
    var HelloWorld = _styledComponents2.default.div(_templateObject);
    function AppComponent() {
        return _react2.default.createElement(HelloWorld, null, 'Hello World');
    }
    _reactDom2.default.render(_react2.default.createElement(AppComponent, null), document.getElementById('application'));
});
/*[import-main-module]*/
System["import"]("package.json!npm").then(function() {
	System["import"]("steal-styled-components-bug@1.0.0#public/index");
});
